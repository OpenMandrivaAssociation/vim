To: vim_dev@googlegroups.com
Subject: Patch 7.4.1065
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.4.1065
Problem:    Cannot use the "dll" options on MS-Windows.
Solution:   Support the options on all platforms.  Use the built-in name as
            the default, so that it's clear what Vim is looking for.
Files:      src/if_python.c, src/if_python3.c, src/if_lua.c, src/if_perl.xs,
            src/if_ruby.c, src/option.c, runtime/doc/options.txt, src/Makefile


*** ../vim-7.4.1064/src/if_python.c	2015-12-31 21:03:20.004605937 +0100
--- src/if_python.c	2016-01-09 14:39:39.400179353 +0100
***************
*** 732,743 ****
      int
  python_enabled(int verbose)
  {
! #ifdef WIN3264
!     char *dll = DYNAMIC_PYTHON_DLL;
! #else
!     char *dll = *p_pydll ? (char *)p_pydll : DYNAMIC_PYTHON_DLL;
! #endif
!     return python_runtime_link_init(dll, verbose) == OK;
  }
  
  /*
--- 732,738 ----
      int
  python_enabled(int verbose)
  {
!     return python_runtime_link_init((char *)p_pydll, verbose) == OK;
  }
  
  /*
*** ../vim-7.4.1064/src/if_python3.c	2015-12-31 21:03:20.004605937 +0100
--- src/if_python3.c	2016-01-09 14:39:46.500103078 +0100
***************
*** 686,697 ****
      int
  python3_enabled(int verbose)
  {
! #ifdef WIN3264
!     char *dll = DYNAMIC_PYTHON3_DLL;
! #else
!     char *dll = *p_py3dll ? (char *)p_py3dll : DYNAMIC_PYTHON3_DLL;
! #endif
!     return py3_runtime_link_init(dll, verbose) == OK;
  }
  
  /* Load the standard Python exceptions - don't import the symbols from the
--- 686,692 ----
      int
  python3_enabled(int verbose)
  {
!     return py3_runtime_link_init((char *)p_py3dll, verbose) == OK;
  }
  
  /* Load the standard Python exceptions - don't import the symbols from the
*** ../vim-7.4.1064/src/if_lua.c	2015-12-03 17:43:10.938448274 +0100
--- src/if_lua.c	2016-01-09 14:39:32.332255284 +0100
***************
*** 402,413 ****
      int
  lua_enabled(int verbose)
  {
! #ifdef WIN3264
!     char *dll = DYNAMIC_LUA_DLL;
! #else
!     char *dll = *p_luadll ? (char *)p_luadll : DYNAMIC_LUA_DLL;
! #endif
!     return lua_link_init(dll, verbose) == OK;
  }
  
  #endif /* DYNAMIC_LUA */
--- 402,408 ----
      int
  lua_enabled(int verbose)
  {
!     return lua_link_init((char *)p_luadll, verbose) == OK;
  }
  
  #endif /* DYNAMIC_LUA */
*** ../vim-7.4.1064/src/if_perl.xs	2015-11-02 17:35:37.335704679 +0100
--- src/if_perl.xs	2016-01-09 14:40:13.339814726 +0100
***************
*** 611,622 ****
  perl_enabled(verbose)
      int		verbose;
  {
! #ifdef WIN3264
!     char *dll = DYNAMIC_PERL_DLL;
! #else
!     char *dll = *p_perldll ? (char *)p_perldll : DYNAMIC_PERL_DLL;
! #endif
!     return perl_runtime_link_init(dll, verbose) == OK;
  }
  #endif /* DYNAMIC_PERL */
  
--- 611,617 ----
  perl_enabled(verbose)
      int		verbose;
  {
!     return perl_runtime_link_init((char *)p_perldll, verbose) == OK;
  }
  #endif /* DYNAMIC_PERL */
  
*** ../vim-7.4.1064/src/if_ruby.c	2015-12-28 22:05:24.513362778 +0100
--- src/if_ruby.c	2016-01-09 14:39:59.447963974 +0100
***************
*** 677,688 ****
  ruby_enabled(verbose)
      int		verbose;
  {
! #ifdef WIN3264
!     char *dll = DYNAMIC_RUBY_DLL;
! #else
!     char *dll = *p_rubydll ? (char *)p_rubydll : DYNAMIC_RUBY_DLL;
! #endif
!     return ruby_runtime_link_init(dll, verbose) == OK;
  }
  #endif /* defined(DYNAMIC_RUBY) || defined(PROTO) */
  
--- 677,683 ----
  ruby_enabled(verbose)
      int		verbose;
  {
!     return ruby_runtime_link_init((char *)p_rubydll, verbose) == OK;
  }
  #endif /* defined(DYNAMIC_RUBY) || defined(PROTO) */
  
*** ../vim-7.4.1064/src/option.c	2016-01-02 17:54:04.423793267 +0100
--- src/option.c	2016-01-09 14:26:06.948940811 +0100
***************
*** 1776,1785 ****
      {"loadplugins", "lpl",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lpl, PV_NONE,
  			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_LUA) && !defined(WIN3264)
      {"luadll",      NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_luadll, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #endif
  #ifdef FEAT_GUI_MAC
      {"macatsui",    NULL,   P_BOOL|P_VI_DEF|P_RCLR,
--- 1776,1786 ----
      {"loadplugins", "lpl",  P_BOOL|P_VI_DEF,
  			    (char_u *)&p_lpl, PV_NONE,
  			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_LUA)
      {"luadll",      NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_luadll, PV_NONE,
! 			    {(char_u *)DYNAMIC_LUA_DLL, (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
  #ifdef FEAT_GUI_MAC
      {"macatsui",    NULL,   P_BOOL|P_VI_DEF|P_RCLR,
***************
*** 2016,2025 ****
  # endif
  #endif
  				(char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_PERL) && !defined(WIN3264)
      {"perldll",     NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_perldll, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"preserveindent", "pi", P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_pi, PV_PI,
--- 2017,2027 ----
  # endif
  #endif
  				(char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_PERL)
      {"perldll",     NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_perldll, PV_NONE,
! 			    {(char_u *)DYNAMIC_PERL_DLL, (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
      {"preserveindent", "pi", P_BOOL|P_VI_DEF|P_VIM,
  			    (char_u *)&p_pi, PV_PI,
***************
*** 2126,2140 ****
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_PYTHON3) && !defined(WIN3264)
      {"pythonthreedll",  NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_py3dll, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #endif
! #if defined(DYNAMIC_PYTHON) && !defined(WIN3264)
      {"pythondll",   NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_pydll, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"quoteescape", "qe",   P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_TEXTOBJ
--- 2128,2144 ----
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
! #if defined(DYNAMIC_PYTHON3)
      {"pythonthreedll",  NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_py3dll, PV_NONE,
! 			    {(char_u *)DYNAMIC_PYTHON3_DLL, (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
! #if defined(DYNAMIC_PYTHON)
      {"pythondll",   NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_pydll, PV_NONE,
! 			    {(char_u *)DYNAMIC_PYTHON_DLL, (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
      {"quoteescape", "qe",   P_STRING|P_ALLOCED|P_VI_DEF,
  #ifdef FEAT_TEXTOBJ
***************
*** 2209,2218 ****
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
  			    SCRIPTID_INIT},
! #if defined(DYNAMIC_RUBY) && !defined(WIN3264)
      {"rubydll",     NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_rubydll, PV_NONE,
! 			    {(char_u *)"", (char_u *)0L} SCRIPTID_INIT},
  #endif
      {"ruler",	    "ru",   P_BOOL|P_VI_DEF|P_VIM|P_RSTAT,
  #ifdef FEAT_CMDL_INFO
--- 2213,2223 ----
  			    {(char_u *)NULL, (char_u *)0L}
  #endif
  			    SCRIPTID_INIT},
! #if defined(DYNAMIC_RUBY)
      {"rubydll",     NULL,   P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_rubydll, PV_NONE,
! 			    {(char_u *)DYNAMIC_RUBY_DLL, (char_u *)0L}
! 			    SCRIPTID_INIT},
  #endif
      {"ruler",	    "ru",   P_BOOL|P_VI_DEF|P_VIM|P_RSTAT,
  #ifdef FEAT_CMDL_INFO
*** ../vim-7.4.1064/runtime/doc/options.txt	2015-11-24 18:45:52.633647066 +0100
--- runtime/doc/options.txt	2016-01-09 14:33:35.704090138 +0100
***************
*** 4832,4844 ****
  	reset this option. |-u| |--noplugin|
  
  						*'luadll'*
! 'luadll' 		string	(default empty)
  			global
! 			{not in Vi} {only for Unix}
  			{only available when compiled with the |+lua/dyn|
  			feature}
! 	Specifies the path of the Lua shared library instead of DYNAMIC_LUA_DLL
! 	what was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
--- 4848,4860 ----
  	reset this option. |-u| |--noplugin|
  
  						*'luadll'*
! 'luadll' 		string	(default depends on the build)
  			global
! 			{not in Vi}
  			{only available when compiled with the |+lua/dyn|
  			feature}
! 	Specifies the name of the Lua shared library. The default is
! 	DYNAMIC_LUA_DLL, which was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
***************
*** 5544,5556 ****
  	this doesn't work when $INCL contains a comma or white space.
  
  						*'perldll'*
! 'perldll' 		string	(default empty)
  			global
! 			{not in Vi} {only for Unix}
  			{only available when compiled with the |+perl/dyn|
  			feature}
! 	Specifies the path of the Perl shared library instead of
! 	DYNAMIC_PERL_DLL what was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
--- 5568,5580 ----
  	this doesn't work when $INCL contains a comma or white space.
  
  						*'perldll'*
! 'perldll' 		string	(default depends on the build)
  			global
! 			{not in Vi}
  			{only available when compiled with the |+perl/dyn|
  			feature}
! 	Specifies the name of the Perl shared library. The default is
! 	DYNAMIC_PERL_DLL, which was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
***************
*** 5680,5704 ****
  	Insert mode completion.  When zero as much space as available is used.
  	|ins-completion-menu|.
  
! 						*'pythonthreedll'*
! 'pythonthreedll'	string	(default empty)
  			global
! 			{not in Vi} {only for Unix}
! 			{only available when compiled with the |+python3/dyn|
  			feature}
! 	Specifies the path of the Python 3 shared library instead of
! 	DYNAMIC_PYTHON3_DLL what was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
! 						*'pythondll'*
! 'pythondll' 		string	(default empty)
  			global
! 			{not in Vi} {only for Unix}
! 			{only available when compiled with the |+python/dyn|
  			feature}
! 	Specifies the path of the Python 2.x shared library instead of
! 	DYNAMIC_PYTHON_DLL what was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
--- 5704,5728 ----
  	Insert mode completion.  When zero as much space as available is used.
  	|ins-completion-menu|.
  
! 						*'pythondll'*
! 'pythondll' 		string	(default depends on the build)
  			global
! 			{not in Vi}
! 			{only available when compiled with the |+python/dyn|
  			feature}
! 	Specifies the name of the Python 2.x shared library. The default is
! 	DYNAMIC_PYTHON_DLL, which was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
! 						*'pythonthreedll'*
! 'pythonthreedll'	string	(default depends on the build)
  			global
! 			{not in Vi}
! 			{only available when compiled with the |+python3/dyn|
  			feature}
! 	Specifies the name of the Python 3 shared library. The default is
! 	DYNAMIC_PYTHON3_DLL, which was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
***************
*** 5920,5932 ****
  	The 'rightleft' option must be set for 'rightleftcmd' to take effect.
  
  						*'rubydll'*
! 'rubydll' 		string	(default empty)
  			global
! 			{not in Vi} {only for Unix}
  			{only available when compiled with the |+ruby/dyn|
  			feature}
! 	Specifies the path of the Ruby shared library instead of
! 	DYNAMIC_RUBY_DLL what was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
--- 5946,5958 ----
  	The 'rightleft' option must be set for 'rightleftcmd' to take effect.
  
  						*'rubydll'*
! 'rubydll' 		string	(default: depends on the build)
  			global
! 			{not in Vi}
  			{only available when compiled with the |+ruby/dyn|
  			feature}
! 	Specifies the name of the Ruby shared library. The default is
! 	DYNAMIC_RUBY_DLL, which was specified at compile time.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
  
*** ../vim-7.4.1064/src/Makefile	2016-01-06 21:23:43.741255561 +0100
--- src/Makefile	2016-01-09 14:40:37.943550388 +0100
***************
*** 2801,2807 ****
  	$(CCC) -o $@ ops.c
  
  objects/option.o: option.c
! 	$(CCC) -o $@ option.c
  
  objects/os_beos.o: os_beos.c
  	$(CCC) -o $@ os_beos.c
--- 2801,2807 ----
  	$(CCC) -o $@ ops.c
  
  objects/option.o: option.c
! 	$(CCC) $(LUA_CFLAGS) $(PERL_CFLAGS) $(PYTHON_CFLAGS) $(PYTHON3_CFLAGS) $(RUBY_CFLAGS) -o $@ option.c
  
  objects/os_beos.o: os_beos.c
  	$(CCC) -o $@ os_beos.c
*** ../vim-7.4.1064/src/version.c	2016-01-09 13:51:30.531374928 +0100
--- src/version.c	2016-01-09 14:20:57.084289455 +0100
***************
*** 743,744 ****
--- 743,746 ----
  {   /* Add new patch number below this line */
+ /**/
+     1065,
  /**/

-- 
"I know that there are people who don't love their fellow man,
and I hate those people!" - Tom Lehrer

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
