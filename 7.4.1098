To: vim_dev@googlegroups.com
Subject: Patch 7.4.1098
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.4.1098
Problem:    Still using old style C function declarations.
Solution:   Always define __ARGS() to include types.  Turn a few functions
            into ANSI style to find out if this causes problems for anyone.
Files:      src/vim.h, src/os_unix.h, src/eval.c, src/main.c


*** ../vim-7.4.1097/src/vim.h	2016-01-10 22:12:41.356254408 +0100
--- src/vim.h	2016-01-15 21:05:06.130893912 +0100
***************
*** 255,280 ****
   */
  #ifdef AZTEC_C
  # include <functions.h>
- # define __ARGS(x)  x
  #endif
  
  #ifdef SASC
  # include <clib/exec_protos.h>
- # define __ARGS(x)  x
  #endif
  
  #ifdef _DCC
  # include <clib/exec_protos.h>
- # define __ARGS(x)  x
- #endif
- 
- #ifdef __TURBOC__
- # define __ARGS(x) x
  #endif
  
  #ifdef __BEOS__
  # include "os_beos.h"
- # define __ARGS(x)  x
  #endif
  
  #if (defined(UNIX) || defined(__EMX__) || defined(VMS)) \
--- 255,272 ----
***************
*** 282,297 ****
  # include "os_unix.h"	    /* bring lots of system header files */
  #endif
  
- #if defined(MACOS) && (defined(__MRC__) || defined(__SC__))
-    /* Apple's Compilers support prototypes */
- # define __ARGS(x) x
- #endif
  #ifndef __ARGS
! # if defined(__STDC__) || defined(__GNUC__) || defined(WIN3264)
! #  define __ARGS(x) x
! # else
! #  define __ARGS(x) ()
! # endif
  #endif
  
  /* __ARGS and __PARMS are the same thing. */
--- 274,281 ----
  # include "os_unix.h"	    /* bring lots of system header files */
  #endif
  
  #ifndef __ARGS
! # define __ARGS(x) x
  #endif
  
  /* __ARGS and __PARMS are the same thing. */
*** ../vim-7.4.1097/src/os_unix.h	2015-12-31 19:06:56.036082038 +0100
--- src/os_unix.h	2016-01-15 21:22:12.859672471 +0100
***************
*** 75,87 ****
  #endif
  
  #ifndef __ARGS
!     /* The AIX VisualAge cc compiler defines __EXTENDED__ instead of __STDC__
!      * because it includes pre-ansi features. */
! # if defined(__STDC__) || defined(__GNUC__) || defined(__EXTENDED__)
! #  define __ARGS(x) x
! # else
! #  define __ARGS(x) ()
! # endif
  #endif
  
  /* always use unlink() to remove files */
--- 75,81 ----
  #endif
  
  #ifndef __ARGS
! # define __ARGS(x) x
  #endif
  
  /* always use unlink() to remove files */
***************
*** 181,190 ****
  # include <pwd.h>
  #endif
  
- #ifdef __COHERENT__
- # undef __ARGS
- #endif
- 
  #if (defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_GETRLIMIT)) \
  	|| (defined(HAVE_SYS_SYSINFO_H) && defined(HAVE_SYSINFO)) \
  	|| defined(HAVE_SYSCTL) || defined(HAVE_SYSCONF)
--- 175,180 ----
*** ../vim-7.4.1097/src/eval.c	2016-01-15 20:48:09.862003231 +0100
--- src/eval.c	2016-01-15 21:11:26.966737694 +0100
***************
*** 973,980 ****
   * Return the name of the executed function.
   */
      char_u *
! func_name(cookie)
!     void *cookie;
  {
      return ((funccall_T *)cookie)->func->uf_name;
  }
--- 973,979 ----
   * Return the name of the executed function.
   */
      char_u *
! func_name(void *cookie)
  {
      return ((funccall_T *)cookie)->func->uf_name;
  }
***************
*** 993,1000 ****
   * Return the address holding the debug tick for a funccall cookie.
   */
      int *
! func_dbg_tick(cookie)
!     void *cookie;
  {
      return &((funccall_T *)cookie)->dbg_tick;
  }
--- 992,998 ----
   * Return the address holding the debug tick for a funccall cookie.
   */
      int *
! func_dbg_tick(void *cookie)
  {
      return &((funccall_T *)cookie)->dbg_tick;
  }
***************
*** 1003,1010 ****
   * Return the nesting level for a funccall cookie.
   */
      int
! func_level(cookie)
!     void *cookie;
  {
      return ((funccall_T *)cookie)->level;
  }
--- 1001,1007 ----
   * Return the nesting level for a funccall cookie.
   */
      int
! func_level(void *cookie)
  {
      return ((funccall_T *)cookie)->level;
  }
***************
*** 1031,1039 ****
   * not already exist.
   */
      void
! set_internal_string_var(name, value)
!     char_u	*name;
!     char_u	*value;
  {
      char_u	*val;
      typval_T	*tvp;
--- 1028,1034 ----
   * not already exist.
   */
      void
! set_internal_string_var(char_u *name, char_u *value)
  {
      char_u	*val;
      typval_T	*tvp;
***************
*** 1057,1068 ****
  
  /*
   * Start recording command output to a variable
   * Returns OK if successfully completed the setup.  FAIL otherwise.
   */
      int
! var_redir_start(name, append)
!     char_u	*name;
!     int		append;		/* append to an existing variable */
  {
      int		save_emsg;
      int		err;
--- 1052,1062 ----
  
  /*
   * Start recording command output to a variable
+  * When "append" is TRUE append to an existing variable.
   * Returns OK if successfully completed the setup.  FAIL otherwise.
   */
      int
! var_redir_start(char_u *name, int append)
  {
      int		save_emsg;
      int		err;
***************
*** 1139,1147 ****
   *   :redir END
   */
      void
! var_redir_str(value, value_len)
!     char_u	*value;
!     int		value_len;
  {
      int		len;
  
--- 1133,1139 ----
   *   :redir END
   */
      void
! var_redir_str(char_u *value, int value_len)
  {
      int		len;
  
***************
*** 1201,1211 ****
  
  # if defined(FEAT_MBYTE) || defined(PROTO)
      int
! eval_charconvert(enc_from, enc_to, fname_from, fname_to)
!     char_u	*enc_from;
!     char_u	*enc_to;
!     char_u	*fname_from;
!     char_u	*fname_to;
  {
      int		err = FALSE;
  
--- 1193,1203 ----
  
  # if defined(FEAT_MBYTE) || defined(PROTO)
      int
! eval_charconvert(
!     char_u	*enc_from,
!     char_u	*enc_to,
!     char_u	*fname_from,
!     char_u	*fname_to)
  {
      int		err = FALSE;
  
*** ../vim-7.4.1097/src/main.c	2015-12-31 19:53:16.266087765 +0100
--- src/main.c	2016-01-15 21:13:19.345511890 +0100
***************
*** 1064,1072 ****
   * commands, return when entering Ex mode.  "noexmode" is TRUE then.
   */
      void
! main_loop(cmdwin, noexmode)
!     int		cmdwin;	    /* TRUE when working in the command-line window */
!     int		noexmode;   /* TRUE when return on entering Ex mode */
  {
      oparg_T	oa;				/* operator arguments */
      volatile int previous_got_int = FALSE;	/* "got_int" was TRUE */
--- 1064,1072 ----
   * commands, return when entering Ex mode.  "noexmode" is TRUE then.
   */
      void
! main_loop(
!     int		cmdwin,	    /* TRUE when working in the command-line window */
!     int		noexmode)   /* TRUE when return on entering Ex mode */
  {
      oparg_T	oa;				/* operator arguments */
      volatile int previous_got_int = FALSE;	/* "got_int" was TRUE */
***************
*** 1360,1367 ****
   * Exit, but leave behind swap files for modified buffers.
   */
      void
! getout_preserve_modified(exitval)
!     int		exitval;
  {
  # if defined(SIGHUP) && defined(SIG_IGN)
      /* Ignore SIGHUP, because a dropped connection causes a read error, which
--- 1360,1366 ----
   * Exit, but leave behind swap files for modified buffers.
   */
      void
! getout_preserve_modified(int exitval)
  {
  # if defined(SIGHUP) && defined(SIG_IGN)
      /* Ignore SIGHUP, because a dropped connection causes a read error, which
***************
*** 1380,1387 ****
  
  /* Exit properly */
      void
! getout(exitval)
!     int		exitval;
  {
  #ifdef FEAT_AUTOCMD
      buf_T	*buf;
--- 1379,1385 ----
  
  /* Exit properly */
      void
! getout(int exitval)
  {
  #ifdef FEAT_AUTOCMD
      buf_T	*buf;
*** ../vim-7.4.1097/src/version.c	2016-01-15 20:53:34.194454636 +0100
--- src/version.c	2016-01-15 21:20:54.748536533 +0100
***************
*** 743,744 ****
--- 743,746 ----
  {   /* Add new patch number below this line */
+ /**/
+     1098,
  /**/

-- 
            |

Ceci n'est pas une pipe.

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
