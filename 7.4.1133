To: vim_dev@googlegroups.com
Subject: Patch 7.4.1133
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.4.1133
Problem:    Generated function prototypes still have __ARGS().
Solution:   Generate function prototypes without __ARGS().
Files:      src/Makefile, src/if_ruby.c, src/os_win32.c,
            src/proto/blowfish.pro, src/proto/buffer.pro,
            src/proto/charset.pro, src/proto/crypt.pro,
            src/proto/crypt_zip.pro, src/proto/diff.pro,
            src/proto/digraph.pro, src/proto/edit.pro, src/proto/eval.pro,
            src/proto/ex_cmds2.pro, src/proto/ex_cmds.pro,
            src/proto/ex_docmd.pro, src/proto/ex_eval.pro,
            src/proto/ex_getln.pro, src/proto/fileio.pro, src/proto/fold.pro,
            src/proto/getchar.pro, src/proto/gui_athena.pro,
            src/proto/gui_beval.pro, src/proto/gui_gtk_gresources.pro,
            src/proto/gui_gtk.pro, src/proto/gui_gtk_x11.pro,
            src/proto/gui_mac.pro, src/proto/gui_motif.pro,
            src/proto/gui_photon.pro, src/proto/gui.pro,
            src/proto/gui_w16.pro, src/proto/gui_w32.pro,
            src/proto/gui_x11.pro, src/proto/gui_xmdlg.pro,
            src/proto/hangulin.pro, src/proto/hardcopy.pro,
            src/proto/hashtab.pro, src/proto/if_cscope.pro,
            src/proto/if_lua.pro, src/proto/if_mzsch.pro,
            src/proto/if_ole.pro, src/proto/if_perl.pro,
            src/proto/if_perlsfio.pro, src/proto/if_python3.pro,
            src/proto/if_python.pro, src/proto/if_ruby.pro,
            src/proto/if_tcl.pro, src/proto/if_xcmdsrv.pro,
            src/proto/main.pro, src/proto/mark.pro, src/proto/mbyte.pro,
            src/proto/memfile.pro, src/proto/memline.pro, src/proto/menu.pro,
            src/proto/message.pro, src/proto/misc1.pro, src/proto/misc2.pro,
            src/proto/move.pro, src/proto/netbeans.pro, src/proto/normal.pro,
            src/proto/ops.pro, src/proto/option.pro, src/proto/os_amiga.pro,
            src/proto/os_beos.pro, src/proto/os_mac_conv.pro,
            src/proto/os_msdos.pro, src/proto/os_mswin.pro,
            src/proto/os_qnx.pro, src/proto/os_unix.pro, src/proto/os_vms.pro,
            src/proto/os_win16.pro, src/proto/os_win32.pro,
            src/proto/popupmnu.pro, src/proto/pty.pro, src/proto/quickfix.pro,
            src/proto/regexp.pro, src/proto/screen.pro, src/proto/search.pro,
            src/proto/sha256.pro, src/proto/spell.pro, src/proto/syntax.pro,
            src/proto/tag.pro, src/proto/termlib.pro, src/proto/term.pro,
            src/proto/ui.pro, src/proto/undo.pro, src/proto/version.pro,
            src/proto/winclip.pro, src/proto/window.pro,
            src/proto/workshop.pro


*** ../vim-7.4.1132/src/Makefile	2016-01-19 13:07:08.754882644 +0100
--- src/Makefile	2016-01-19 13:12:09.611645218 +0100
***************
*** 1361,1370 ****
  NO_ATTR=
  #
  # Use this for cproto 3 patchlevel 6 or below (use "cproto -V" to check):
! # PROTO_FLAGS = -f4 -m__ARGS -d -E"$(CPP)" $(NO_ATTR)
  #
  # Use this for cproto 3 patchlevel 7 or above (use "cproto -V" to check):
! PROTO_FLAGS = -m -M__ARGS -d -E"$(CPP)" $(NO_ATTR)
  
  
  ################################################
--- 1361,1370 ----
  NO_ATTR=
  #
  # Use this for cproto 3 patchlevel 6 or below (use "cproto -V" to check):
! # PROTO_FLAGS = -f4 -d -E"$(CPP)" $(NO_ATTR)
  #
  # Use this for cproto 3 patchlevel 7 or above (use "cproto -V" to check):
! PROTO_FLAGS = -d -E"$(CPP)" $(NO_ATTR)
  
  
  ################################################
*** ../vim-7.4.1132/src/if_ruby.c	2016-01-09 14:57:10.504884946 +0100
--- src/if_ruby.c	2016-01-19 13:14:24.034198643 +0100
***************
*** 189,195 ****
  #endif
  
  #if defined(DYNAMIC_RUBY) || defined(PROTO)
! # ifdef PROTO
  #  define HINSTANCE int		/* for generating prototypes */
  # endif
  
--- 189,195 ----
  #endif
  
  #if defined(DYNAMIC_RUBY) || defined(PROTO)
! # if defined(PROTO) && !defined(HINSTANCE)
  #  define HINSTANCE int		/* for generating prototypes */
  # endif
  
*** ../vim-7.4.1132/src/os_win32.c	2016-01-17 22:15:10.603764137 +0100
--- src/os_win32.c	2016-01-19 13:16:03.413129150 +0100
***************
*** 101,106 ****
--- 101,107 ----
  typedef int COORD;
  typedef int DWORD;
  typedef int HANDLE;
+ typedef int LPHANDLE;
  typedef int HDC;
  typedef int HFONT;
  typedef int HICON;
*** ../vim-7.4.1132/src/proto/blowfish.pro	2014-08-10 13:34:59.060785459 +0200
--- src/proto/blowfish.pro	2016-01-19 13:12:55.619150119 +0100
***************
*** 1,6 ****
  /* blowfish.c */
! void crypt_blowfish_encode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
! void crypt_blowfish_decode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
! void crypt_blowfish_init __ARGS((cryptstate_T *state, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len));
! int blowfish_self_test __ARGS((void));
  /* vim: set ft=c : */
--- 1,6 ----
  /* blowfish.c */
! void crypt_blowfish_encode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
! void crypt_blowfish_decode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
! void crypt_blowfish_init(cryptstate_T *state, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len);
! int blowfish_self_test(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/buffer.pro	2013-08-10 13:37:06.000000000 +0200
--- src/proto/buffer.pro	2016-01-19 13:12:56.023145770 +0100
***************
*** 1,71 ****
  /* buffer.c */
! int open_buffer __ARGS((int read_stdin, exarg_T *eap, int flags));
! int buf_valid __ARGS((buf_T *buf));
! void close_buffer __ARGS((win_T *win, buf_T *buf, int action, int abort_if_last));
! void buf_clear_file __ARGS((buf_T *buf));
! void buf_freeall __ARGS((buf_T *buf, int flags));
! void goto_buffer __ARGS((exarg_T *eap, int start, int dir, int count));
! void handle_swap_exists __ARGS((buf_T *old_curbuf));
! char_u *do_bufdel __ARGS((int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit));
! int do_buffer __ARGS((int action, int start, int dir, int count, int forceit));
! void set_curbuf __ARGS((buf_T *buf, int action));
! void enter_buffer __ARGS((buf_T *buf));
! void do_autochdir __ARGS((void));
! buf_T *buflist_new __ARGS((char_u *ffname, char_u *sfname, linenr_T lnum, int flags));
! void free_buf_options __ARGS((buf_T *buf, int free_p_ff));
! int buflist_getfile __ARGS((int n, linenr_T lnum, int options, int forceit));
! void buflist_getfpos __ARGS((void));
! buf_T *buflist_findname_exp __ARGS((char_u *fname));
! buf_T *buflist_findname __ARGS((char_u *ffname));
! int buflist_findpat __ARGS((char_u *pattern, char_u *pattern_end, int unlisted, int diffmode, int curtab_only));
! int ExpandBufnames __ARGS((char_u *pat, int *num_file, char_u ***file, int options));
! buf_T *buflist_findnr __ARGS((int nr));
! char_u *buflist_nr2name __ARGS((int n, int fullname, int helptail));
! void get_winopts __ARGS((buf_T *buf));
! pos_T *buflist_findfpos __ARGS((buf_T *buf));
! linenr_T buflist_findlnum __ARGS((buf_T *buf));
! void buflist_list __ARGS((exarg_T *eap));
! int buflist_name_nr __ARGS((int fnum, char_u **fname, linenr_T *lnum));
! int setfname __ARGS((buf_T *buf, char_u *ffname, char_u *sfname, int message));
! void buf_set_name __ARGS((int fnum, char_u *name));
! void buf_name_changed __ARGS((buf_T *buf));
! buf_T *setaltfname __ARGS((char_u *ffname, char_u *sfname, linenr_T lnum));
! char_u *getaltfname __ARGS((int errmsg));
! int buflist_add __ARGS((char_u *fname, int flags));
! void buflist_slash_adjust __ARGS((void));
! void buflist_altfpos __ARGS((win_T *win));
! int otherfile __ARGS((char_u *ffname));
! void buf_setino __ARGS((buf_T *buf));
! void fileinfo __ARGS((int fullname, int shorthelp, int dont_truncate));
! void col_print __ARGS((char_u *buf, size_t buflen, int col, int vcol));
! void maketitle __ARGS((void));
! void resettitle __ARGS((void));
! void free_titles __ARGS((void));
! int build_stl_str_hl __ARGS((win_T *wp, char_u *out, size_t outlen, char_u *fmt, int use_sandbox, int fillchar, int maxwidth, struct stl_hlrec *hltab, struct stl_hlrec *tabtab));
! void get_rel_pos __ARGS((win_T *wp, char_u *buf, int buflen));
! char_u *fix_fname __ARGS((char_u *fname));
! void fname_expand __ARGS((buf_T *buf, char_u **ffname, char_u **sfname));
! char_u *alist_name __ARGS((aentry_T *aep));
! void do_arg_all __ARGS((int count, int forceit, int keep_tabs));
! void ex_buffer_all __ARGS((exarg_T *eap));
! void do_modelines __ARGS((int flags));
! int read_viminfo_bufferlist __ARGS((vir_T *virp, int writing));
! void write_viminfo_bufferlist __ARGS((FILE *fp));
! char_u *buf_spname __ARGS((buf_T *buf));
! int find_win_for_buf __ARGS((buf_T *buf, win_T **wp, tabpage_T **tp));
! void buf_addsign __ARGS((buf_T *buf, int id, linenr_T lnum, int typenr));
! linenr_T buf_change_sign_type __ARGS((buf_T *buf, int markId, int typenr));
! int buf_getsigntype __ARGS((buf_T *buf, linenr_T lnum, int type));
! linenr_T buf_delsign __ARGS((buf_T *buf, int id));
! int buf_findsign __ARGS((buf_T *buf, int id));
! int buf_findsign_id __ARGS((buf_T *buf, linenr_T lnum));
! int buf_findsigntype_id __ARGS((buf_T *buf, linenr_T lnum, int typenr));
! int buf_signcount __ARGS((buf_T *buf, linenr_T lnum));
! void buf_delete_signs __ARGS((buf_T *buf));
! void buf_delete_all_signs __ARGS((void));
! void sign_list_placed __ARGS((buf_T *rbuf));
! void sign_mark_adjust __ARGS((linenr_T line1, linenr_T line2, long amount, long amount_after));
! void set_buflisted __ARGS((int on));
! int buf_contents_changed __ARGS((buf_T *buf));
! void wipe_buffer __ARGS((buf_T *buf, int aucmd));
  /* vim: set ft=c : */
--- 1,71 ----
  /* buffer.c */
! int open_buffer(int read_stdin, exarg_T *eap, int flags);
! int buf_valid(buf_T *buf);
! void close_buffer(win_T *win, buf_T *buf, int action, int abort_if_last);
! void buf_clear_file(buf_T *buf);
! void buf_freeall(buf_T *buf, int flags);
! void goto_buffer(exarg_T *eap, int start, int dir, int count);
! void handle_swap_exists(buf_T *old_curbuf);
! char_u *do_bufdel(int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit);
! int do_buffer(int action, int start, int dir, int count, int forceit);
! void set_curbuf(buf_T *buf, int action);
! void enter_buffer(buf_T *buf);
! void do_autochdir(void);
! buf_T *buflist_new(char_u *ffname, char_u *sfname, linenr_T lnum, int flags);
! void free_buf_options(buf_T *buf, int free_p_ff);
! int buflist_getfile(int n, linenr_T lnum, int options, int forceit);
! void buflist_getfpos(void);
! buf_T *buflist_findname_exp(char_u *fname);
! buf_T *buflist_findname(char_u *ffname);
! int buflist_findpat(char_u *pattern, char_u *pattern_end, int unlisted, int diffmode, int curtab_only);
! int ExpandBufnames(char_u *pat, int *num_file, char_u ***file, int options);
! buf_T *buflist_findnr(int nr);
! char_u *buflist_nr2name(int n, int fullname, int helptail);
! void get_winopts(buf_T *buf);
! pos_T *buflist_findfpos(buf_T *buf);
! linenr_T buflist_findlnum(buf_T *buf);
! void buflist_list(exarg_T *eap);
! int buflist_name_nr(int fnum, char_u **fname, linenr_T *lnum);
! int setfname(buf_T *buf, char_u *ffname, char_u *sfname, int message);
! void buf_set_name(int fnum, char_u *name);
! void buf_name_changed(buf_T *buf);
! buf_T *setaltfname(char_u *ffname, char_u *sfname, linenr_T lnum);
! char_u *getaltfname(int errmsg);
! int buflist_add(char_u *fname, int flags);
! void buflist_slash_adjust(void);
! void buflist_altfpos(win_T *win);
! int otherfile(char_u *ffname);
! void buf_setino(buf_T *buf);
! void fileinfo(int fullname, int shorthelp, int dont_truncate);
! void col_print(char_u *buf, size_t buflen, int col, int vcol);
! void maketitle(void);
! void resettitle(void);
! void free_titles(void);
! int build_stl_str_hl(win_T *wp, char_u *out, size_t outlen, char_u *fmt, int use_sandbox, int fillchar, int maxwidth, struct stl_hlrec *hltab, struct stl_hlrec *tabtab);
! void get_rel_pos(win_T *wp, char_u *buf, int buflen);
! char_u *fix_fname(char_u *fname);
! void fname_expand(buf_T *buf, char_u **ffname, char_u **sfname);
! char_u *alist_name(aentry_T *aep);
! void do_arg_all(int count, int forceit, int keep_tabs);
! void ex_buffer_all(exarg_T *eap);
! void do_modelines(int flags);
! int read_viminfo_bufferlist(vir_T *virp, int writing);
! void write_viminfo_bufferlist(FILE *fp);
! char_u *buf_spname(buf_T *buf);
! int find_win_for_buf(buf_T *buf, win_T **wp, tabpage_T **tp);
! void buf_addsign(buf_T *buf, int id, linenr_T lnum, int typenr);
! linenr_T buf_change_sign_type(buf_T *buf, int markId, int typenr);
! int buf_getsigntype(buf_T *buf, linenr_T lnum, int type);
! linenr_T buf_delsign(buf_T *buf, int id);
! int buf_findsign(buf_T *buf, int id);
! int buf_findsign_id(buf_T *buf, linenr_T lnum);
! int buf_findsigntype_id(buf_T *buf, linenr_T lnum, int typenr);
! int buf_signcount(buf_T *buf, linenr_T lnum);
! void buf_delete_signs(buf_T *buf);
! void buf_delete_all_signs(void);
! void sign_list_placed(buf_T *rbuf);
! void sign_mark_adjust(linenr_T line1, linenr_T line2, long amount, long amount_after);
! void set_buflisted(int on);
! int buf_contents_changed(buf_T *buf);
! void wipe_buffer(buf_T *buf, int aucmd);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/charset.pro	2016-01-02 17:54:04.423793267 +0100
--- src/proto/charset.pro	2016-01-19 13:12:56.407141638 +0100
***************
*** 1,62 ****
  /* charset.c */
! int init_chartab __ARGS((void));
! int buf_init_chartab __ARGS((buf_T *buf, int global));
! void trans_characters __ARGS((char_u *buf, int bufsize));
! char_u *transstr __ARGS((char_u *s));
! char_u *str_foldcase __ARGS((char_u *str, int orglen, char_u *buf, int buflen));
! char_u *transchar __ARGS((int c));
! char_u *transchar_byte __ARGS((int c));
! void transchar_nonprint __ARGS((char_u *buf, int c));
! void transchar_hex __ARGS((char_u *buf, int c));
! int byte2cells __ARGS((int b));
! int char2cells __ARGS((int c));
! int ptr2cells __ARGS((char_u *p));
! int vim_strsize __ARGS((char_u *s));
! int vim_strnsize __ARGS((char_u *s, int len));
! int chartabsize __ARGS((char_u *p, colnr_T col));
! int linetabsize __ARGS((char_u *s));
! int linetabsize_col __ARGS((int startcol, char_u *s));
! int win_linetabsize __ARGS((win_T *wp, char_u *line, colnr_T len));
! int vim_isIDc __ARGS((int c));
! int vim_iswordc __ARGS((int c));
! int vim_iswordc_buf __ARGS((int c, buf_T *buf));
! int vim_iswordp __ARGS((char_u *p));
! int vim_iswordp_buf __ARGS((char_u *p, buf_T *buf));
! int vim_isfilec __ARGS((int c));
! int vim_isfilec_or_wc __ARGS((int c));
! int vim_isprintc __ARGS((int c));
! int vim_isprintc_strict __ARGS((int c));
! int lbr_chartabsize __ARGS((char_u *line, unsigned char *s, colnr_T col));
! int lbr_chartabsize_adv __ARGS((char_u *line, char_u **s, colnr_T col));
! int win_lbr_chartabsize __ARGS((win_T *wp, char_u *line, char_u *s, colnr_T col, int *headp));
! int in_win_border __ARGS((win_T *wp, colnr_T vcol));
! void getvcol __ARGS((win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end));
! colnr_T getvcol_nolist __ARGS((pos_T *posp));
! void getvvcol __ARGS((win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end));
! void getvcols __ARGS((win_T *wp, pos_T *pos1, pos_T *pos2, colnr_T *left, colnr_T *right));
! char_u *skipwhite __ARGS((char_u *q));
! char_u *skipdigits __ARGS((char_u *q));
! char_u *skipbin __ARGS((char_u *q));
! char_u *skiphex __ARGS((char_u *q));
! char_u *skiptobin __ARGS((char_u *q));
! char_u *skiptodigit __ARGS((char_u *q));
! char_u *skiptohex __ARGS((char_u *q));
! int vim_isdigit __ARGS((int c));
! int vim_isxdigit __ARGS((int c));
! int vim_isbdigit __ARGS((int c));
! int vim_islower __ARGS((int c));
! int vim_isupper __ARGS((int c));
! int vim_toupper __ARGS((int c));
! int vim_tolower __ARGS((int c));
! char_u *skiptowhite __ARGS((char_u *p));
! char_u *skiptowhite_esc __ARGS((char_u *p));
! long getdigits __ARGS((char_u **pp));
! int vim_isblankline __ARGS((char_u *lbuf));
! void vim_str2nr __ARGS((char_u *start, int *prep, int *len, int what, long *nptr, unsigned long *unptr, int maxlen));
! int hex2nr __ARGS((int c));
! int hexhex2nr __ARGS((char_u *p));
! int rem_backslash __ARGS((char_u *str));
! void backslash_halve __ARGS((char_u *p));
! char_u *backslash_halve_save __ARGS((char_u *p));
! void ebcdic2ascii __ARGS((char_u *buffer, int len));
  /* vim: set ft=c : */
--- 1,62 ----
  /* charset.c */
! int init_chartab(void);
! int buf_init_chartab(buf_T *buf, int global);
! void trans_characters(char_u *buf, int bufsize);
! char_u *transstr(char_u *s);
! char_u *str_foldcase(char_u *str, int orglen, char_u *buf, int buflen);
! char_u *transchar(int c);
! char_u *transchar_byte(int c);
! void transchar_nonprint(char_u *buf, int c);
! void transchar_hex(char_u *buf, int c);
! int byte2cells(int b);
! int char2cells(int c);
! int ptr2cells(char_u *p);
! int vim_strsize(char_u *s);
! int vim_strnsize(char_u *s, int len);
! int chartabsize(char_u *p, colnr_T col);
! int linetabsize(char_u *s);
! int linetabsize_col(int startcol, char_u *s);
! int win_linetabsize(win_T *wp, char_u *line, colnr_T len);
! int vim_isIDc(int c);
! int vim_iswordc(int c);
! int vim_iswordc_buf(int c, buf_T *buf);
! int vim_iswordp(char_u *p);
! int vim_iswordp_buf(char_u *p, buf_T *buf);
! int vim_isfilec(int c);
! int vim_isfilec_or_wc(int c);
! int vim_isprintc(int c);
! int vim_isprintc_strict(int c);
! int lbr_chartabsize(char_u *line, unsigned char *s, colnr_T col);
! int lbr_chartabsize_adv(char_u *line, char_u **s, colnr_T col);
! int win_lbr_chartabsize(win_T *wp, char_u *line, char_u *s, colnr_T col, int *headp);
! int in_win_border(win_T *wp, colnr_T vcol);
! void getvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end);
! colnr_T getvcol_nolist(pos_T *posp);
! void getvvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end);
! void getvcols(win_T *wp, pos_T *pos1, pos_T *pos2, colnr_T *left, colnr_T *right);
! char_u *skipwhite(char_u *q);
! char_u *skipdigits(char_u *q);
! char_u *skipbin(char_u *q);
! char_u *skiphex(char_u *q);
! char_u *skiptobin(char_u *q);
! char_u *skiptodigit(char_u *q);
! char_u *skiptohex(char_u *q);
! int vim_isdigit(int c);
! int vim_isxdigit(int c);
! int vim_isbdigit(int c);
! int vim_islower(int c);
! int vim_isupper(int c);
! int vim_toupper(int c);
! int vim_tolower(int c);
! char_u *skiptowhite(char_u *p);
! char_u *skiptowhite_esc(char_u *p);
! long getdigits(char_u **pp);
! int vim_isblankline(char_u *lbuf);
! void vim_str2nr(char_u *start, int *prep, int *len, int what, long *nptr, unsigned long *unptr, int maxlen);
! int hex2nr(int c);
! int hexhex2nr(char_u *p);
! int rem_backslash(char_u *str);
! void backslash_halve(char_u *p);
! char_u *backslash_halve_save(char_u *p);
! void ebcdic2ascii(char_u *buffer, int len);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/crypt.pro	2014-11-12 15:15:34.983882077 +0100
--- src/proto/crypt.pro	2016-01-19 13:12:56.795137463 +0100
***************
*** 1,26 ****
  /* crypt.c */
! int crypt_method_nr_from_name __ARGS((char_u *name));
! int crypt_method_nr_from_magic __ARGS((char *ptr, int len));
! int crypt_works_inplace __ARGS((cryptstate_T *state));
! int crypt_get_method_nr __ARGS((buf_T *buf));
! int crypt_whole_undofile __ARGS((int method_nr));
! int crypt_get_header_len __ARGS((int method_nr));
! void crypt_set_cm_option __ARGS((buf_T *buf, int method_nr));
! int crypt_self_test __ARGS((void));
! cryptstate_T *crypt_create __ARGS((int method_nr, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len));
! cryptstate_T *crypt_create_from_header __ARGS((int method_nr, char_u *key, char_u *header));
! cryptstate_T *crypt_create_from_file __ARGS((FILE *fp, char_u *key));
! cryptstate_T *crypt_create_for_writing __ARGS((int method_nr, char_u *key, char_u **header, int *header_len));
! void crypt_free_state __ARGS((cryptstate_T *state));
! long crypt_encode_alloc __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u **newptr));
! long crypt_decode_alloc __ARGS((cryptstate_T *state, char_u *ptr, long len, char_u **newptr));
! void crypt_encode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
! void crypt_decode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
! void crypt_encode_inplace __ARGS((cryptstate_T *state, char_u *buf, size_t len));
! void crypt_decode_inplace __ARGS((cryptstate_T *state, char_u *buf, size_t len));
! void crypt_free_key __ARGS((char_u *key));
! void crypt_check_method __ARGS((int method));
! void crypt_check_current_method __ARGS((void));
! char_u *crypt_get_key __ARGS((int store, int twice));
! void crypt_append_msg __ARGS((buf_T *buf));
  /* vim: set ft=c : */
--- 1,26 ----
  /* crypt.c */
! int crypt_method_nr_from_name(char_u *name);
! int crypt_method_nr_from_magic(char *ptr, int len);
! int crypt_works_inplace(cryptstate_T *state);
! int crypt_get_method_nr(buf_T *buf);
! int crypt_whole_undofile(int method_nr);
! int crypt_get_header_len(int method_nr);
! void crypt_set_cm_option(buf_T *buf, int method_nr);
! int crypt_self_test(void);
! cryptstate_T *crypt_create(int method_nr, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len);
! cryptstate_T *crypt_create_from_header(int method_nr, char_u *key, char_u *header);
! cryptstate_T *crypt_create_from_file(FILE *fp, char_u *key);
! cryptstate_T *crypt_create_for_writing(int method_nr, char_u *key, char_u **header, int *header_len);
! void crypt_free_state(cryptstate_T *state);
! long crypt_encode_alloc(cryptstate_T *state, char_u *from, size_t len, char_u **newptr);
! long crypt_decode_alloc(cryptstate_T *state, char_u *ptr, long len, char_u **newptr);
! void crypt_encode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
! void crypt_decode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
! void crypt_encode_inplace(cryptstate_T *state, char_u *buf, size_t len);
! void crypt_decode_inplace(cryptstate_T *state, char_u *buf, size_t len);
! void crypt_free_key(char_u *key);
! void crypt_check_method(int method);
! void crypt_check_current_method(void);
! char_u *crypt_get_key(int store, int twice);
! void crypt_append_msg(buf_T *buf);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/crypt_zip.pro	2014-08-10 13:34:59.060785459 +0200
--- src/proto/crypt_zip.pro	2016-01-19 13:12:57.175133374 +0100
***************
*** 1,5 ****
  /* crypt_zip.c */
! void crypt_zip_init __ARGS((cryptstate_T *state, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len));
! void crypt_zip_encode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
! void crypt_zip_decode __ARGS((cryptstate_T *state, char_u *from, size_t len, char_u *to));
  /* vim: set ft=c : */
--- 1,5 ----
  /* crypt_zip.c */
! void crypt_zip_init(cryptstate_T *state, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len);
! void crypt_zip_encode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
! void crypt_zip_decode(cryptstate_T *state, char_u *from, size_t len, char_u *to);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/diff.pro	2014-10-31 13:54:21.843214469 +0100
--- src/proto/diff.pro	2016-01-19 13:12:57.571129112 +0100
***************
*** 1,27 ****
  /* diff.c */
! void diff_buf_delete __ARGS((buf_T *buf));
! void diff_buf_adjust __ARGS((win_T *win));
! void diff_buf_add __ARGS((buf_T *buf));
! void diff_invalidate __ARGS((buf_T *buf));
! void diff_mark_adjust __ARGS((linenr_T line1, linenr_T line2, long amount, long amount_after));
! void ex_diffupdate __ARGS((exarg_T *eap));
! void ex_diffpatch __ARGS((exarg_T *eap));
! void ex_diffsplit __ARGS((exarg_T *eap));
! void ex_diffthis __ARGS((exarg_T *eap));
! void diff_win_options __ARGS((win_T *wp, int addbuf));
! void ex_diffoff __ARGS((exarg_T *eap));
! void diff_clear __ARGS((tabpage_T *tp));
! int diff_check __ARGS((win_T *wp, linenr_T lnum));
! int diff_check_fill __ARGS((win_T *wp, linenr_T lnum));
! void diff_set_topline __ARGS((win_T *fromwin, win_T *towin));
! int diffopt_changed __ARGS((void));
! int diffopt_horizontal __ARGS((void));
! int diff_find_change __ARGS((win_T *wp, linenr_T lnum, int *startp, int *endp));
! int diff_infold __ARGS((win_T *wp, linenr_T lnum));
! void nv_diffgetput __ARGS((int put, long count));
! void ex_diffgetput __ARGS((exarg_T *eap));
! int diff_mode_buf __ARGS((buf_T *buf));
! int diff_move_to __ARGS((int dir, long count));
! linenr_T diff_get_corresponding_line __ARGS((buf_T *buf1, linenr_T lnum1, buf_T *buf2, linenr_T lnum3));
! linenr_T diff_lnum_win __ARGS((linenr_T lnum, win_T *wp));
  /* vim: set ft=c : */
--- 1,27 ----
  /* diff.c */
! void diff_buf_delete(buf_T *buf);
! void diff_buf_adjust(win_T *win);
! void diff_buf_add(buf_T *buf);
! void diff_invalidate(buf_T *buf);
! void diff_mark_adjust(linenr_T line1, linenr_T line2, long amount, long amount_after);
! void ex_diffupdate(exarg_T *eap);
! void ex_diffpatch(exarg_T *eap);
! void ex_diffsplit(exarg_T *eap);
! void ex_diffthis(exarg_T *eap);
! void diff_win_options(win_T *wp, int addbuf);
! void ex_diffoff(exarg_T *eap);
! void diff_clear(tabpage_T *tp);
! int diff_check(win_T *wp, linenr_T lnum);
! int diff_check_fill(win_T *wp, linenr_T lnum);
! void diff_set_topline(win_T *fromwin, win_T *towin);
! int diffopt_changed(void);
! int diffopt_horizontal(void);
! int diff_find_change(win_T *wp, linenr_T lnum, int *startp, int *endp);
! int diff_infold(win_T *wp, linenr_T lnum);
! void nv_diffgetput(int put, long count);
! void ex_diffgetput(exarg_T *eap);
! int diff_mode_buf(buf_T *buf);
! int diff_move_to(int dir, long count);
! linenr_T diff_get_corresponding_line(buf_T *buf1, linenr_T lnum1, buf_T *buf2, linenr_T lnum3);
! linenr_T diff_lnum_win(linenr_T lnum, win_T *wp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/digraph.pro	2013-08-10 13:37:08.000000000 +0200
--- src/proto/digraph.pro	2016-01-19 13:12:57.955124981 +0100
***************
*** 1,9 ****
  /* digraph.c */
! int do_digraph __ARGS((int c));
! int get_digraph __ARGS((int cmdline));
! int getdigraph __ARGS((int char1, int char2, int meta_char));
! void putdigraph __ARGS((char_u *str));
! void listdigraphs __ARGS((void));
! char_u *keymap_init __ARGS((void));
! void ex_loadkeymap __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,9 ----
  /* digraph.c */
! int do_digraph(int c);
! int get_digraph(int cmdline);
! int getdigraph(int char1, int char2, int meta_char);
! void putdigraph(char_u *str);
! void listdigraphs(void);
! char_u *keymap_init(void);
! void ex_loadkeymap(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/edit.pro	2013-08-10 13:37:08.000000000 +0200
--- src/proto/edit.pro	2016-01-19 13:12:58.339120847 +0100
***************
*** 1,43 ****
  /* edit.c */
! int edit __ARGS((int cmdchar, int startln, long count));
! void edit_putchar __ARGS((int c, int highlight));
! void edit_unputchar __ARGS((void));
! void display_dollar __ARGS((colnr_T col));
! void change_indent __ARGS((int type, int amount, int round, int replaced, int call_changed_bytes));
! void truncate_spaces __ARGS((char_u *line));
! void backspace_until_column __ARGS((int col));
! int vim_is_ctrl_x_key __ARGS((int c));
! int ins_compl_add_infercase __ARGS((char_u *str, int len, int icase, char_u *fname, int dir, int flags));
! void set_completion __ARGS((colnr_T startcol, list_T *list));
! void ins_compl_show_pum __ARGS((void));
! char_u *find_word_start __ARGS((char_u *ptr));
! char_u *find_word_end __ARGS((char_u *ptr));
! int ins_compl_active __ARGS((void));
! int ins_compl_add_tv __ARGS((typval_T *tv, int dir));
! void ins_compl_check_keys __ARGS((int frequency));
! int get_literal __ARGS((void));
! void insertchar __ARGS((int c, int flags, int second_indent));
! void auto_format __ARGS((int trailblank, int prev_line));
! int comp_textwidth __ARGS((int ff));
! int stop_arrow __ARGS((void));
! void set_last_insert __ARGS((int c));
! void free_last_insert __ARGS((void));
! char_u *add_char2buf __ARGS((int c, char_u *s));
! void beginline __ARGS((int flags));
! int oneright __ARGS((void));
! int oneleft __ARGS((void));
! int cursor_up __ARGS((long n, int upd_topline));
! int cursor_down __ARGS((long n, int upd_topline));
! int stuff_inserted __ARGS((int c, long count, int no_esc));
! char_u *get_last_insert __ARGS((void));
! char_u *get_last_insert_save __ARGS((void));
! void replace_push __ARGS((int c));
! int replace_push_mb __ARGS((char_u *p));
! void fixthisline __ARGS((int (*get_the_indent)(void)));
! void fix_indent __ARGS((void));
! int in_cinkeys __ARGS((int keytyped, int when, int line_is_empty));
! int hkmap __ARGS((int c));
! void ins_scroll __ARGS((void));
! void ins_horscroll __ARGS((void));
! int ins_copychar __ARGS((linenr_T lnum));
  /* vim: set ft=c : */
--- 1,43 ----
  /* edit.c */
! int edit(int cmdchar, int startln, long count);
! void edit_putchar(int c, int highlight);
! void edit_unputchar(void);
! void display_dollar(colnr_T col);
! void change_indent(int type, int amount, int round, int replaced, int call_changed_bytes);
! void truncate_spaces(char_u *line);
! void backspace_until_column(int col);
! int vim_is_ctrl_x_key(int c);
! int ins_compl_add_infercase(char_u *str, int len, int icase, char_u *fname, int dir, int flags);
! void set_completion(colnr_T startcol, list_T *list);
! void ins_compl_show_pum(void);
! char_u *find_word_start(char_u *ptr);
! char_u *find_word_end(char_u *ptr);
! int ins_compl_active(void);
! int ins_compl_add_tv(typval_T *tv, int dir);
! void ins_compl_check_keys(int frequency);
! int get_literal(void);
! void insertchar(int c, int flags, int second_indent);
! void auto_format(int trailblank, int prev_line);
! int comp_textwidth(int ff);
! int stop_arrow(void);
! void set_last_insert(int c);
! void free_last_insert(void);
! char_u *add_char2buf(int c, char_u *s);
! void beginline(int flags);
! int oneright(void);
! int oneleft(void);
! int cursor_up(long n, int upd_topline);
! int cursor_down(long n, int upd_topline);
! int stuff_inserted(int c, long count, int no_esc);
! char_u *get_last_insert(void);
! char_u *get_last_insert_save(void);
! void replace_push(int c);
! int replace_push_mb(char_u *p);
! void fixthisline(int (*get_the_indent)(void));
! void fix_indent(void);
! int in_cinkeys(int keytyped, int when, int line_is_empty);
! int hkmap(int c);
! void ins_scroll(void);
! void ins_horscroll(void);
! int ins_copychar(linenr_T lnum);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/eval.pro	2015-07-17 17:38:00.567399623 +0200
--- src/proto/eval.pro	2016-01-19 13:12:58.807115812 +0100
***************
*** 1,139 ****
  /* eval.c */
! void eval_init __ARGS((void));
! void eval_clear __ARGS((void));
! char_u *func_name __ARGS((void *cookie));
! linenr_T *func_breakpoint __ARGS((void *cookie));
! int *func_dbg_tick __ARGS((void *cookie));
! int func_level __ARGS((void *cookie));
! int current_func_returned __ARGS((void));
! void set_internal_string_var __ARGS((char_u *name, char_u *value));
! int var_redir_start __ARGS((char_u *name, int append));
! void var_redir_str __ARGS((char_u *value, int value_len));
! void var_redir_stop __ARGS((void));
! int eval_charconvert __ARGS((char_u *enc_from, char_u *enc_to, char_u *fname_from, char_u *fname_to));
! int eval_printexpr __ARGS((char_u *fname, char_u *args));
! void eval_diff __ARGS((char_u *origfile, char_u *newfile, char_u *outfile));
! void eval_patch __ARGS((char_u *origfile, char_u *difffile, char_u *outfile));
! int eval_to_bool __ARGS((char_u *arg, int *error, char_u **nextcmd, int skip));
! char_u *eval_to_string_skip __ARGS((char_u *arg, char_u **nextcmd, int skip));
! int skip_expr __ARGS((char_u **pp));
! char_u *eval_to_string __ARGS((char_u *arg, char_u **nextcmd, int convert));
! char_u *eval_to_string_safe __ARGS((char_u *arg, char_u **nextcmd, int use_sandbox));
! int eval_to_number __ARGS((char_u *expr));
! list_T *eval_spell_expr __ARGS((char_u *badword, char_u *expr));
! int get_spellword __ARGS((list_T *list, char_u **pp));
! typval_T *eval_expr __ARGS((char_u *arg, char_u **nextcmd));
! int call_vim_function __ARGS((char_u *func, int argc, char_u **argv, int safe, int str_arg_only, typval_T *rettv));
! long call_func_retnr __ARGS((char_u *func, int argc, char_u **argv, int safe));
! void *call_func_retstr __ARGS((char_u *func, int argc, char_u **argv, int safe));
! void *call_func_retlist __ARGS((char_u *func, int argc, char_u **argv, int safe));
! void *save_funccal __ARGS((void));
! void restore_funccal __ARGS((void *vfc));
! void prof_child_enter __ARGS((proftime_T *tm));
! void prof_child_exit __ARGS((proftime_T *tm));
! int eval_foldexpr __ARGS((char_u *arg, int *cp));
! void ex_let __ARGS((exarg_T *eap));
! void list_add_watch __ARGS((list_T *l, listwatch_T *lw));
! void list_rem_watch __ARGS((list_T *l, listwatch_T *lwrem));
! void *eval_for_line __ARGS((char_u *arg, int *errp, char_u **nextcmdp, int skip));
! int next_for_item __ARGS((void *fi_void, char_u *arg));
! void free_for_info __ARGS((void *fi_void));
! void set_context_for_expression __ARGS((expand_T *xp, char_u *arg, cmdidx_T cmdidx));
! void ex_call __ARGS((exarg_T *eap));
! void ex_unlet __ARGS((exarg_T *eap));
! void ex_lockvar __ARGS((exarg_T *eap));
! int do_unlet __ARGS((char_u *name, int forceit));
! void del_menutrans_vars __ARGS((void));
! char_u *get_user_var_name __ARGS((expand_T *xp, int idx));
! list_T *list_alloc __ARGS((void));
! void list_unref __ARGS((list_T *l));
! void list_free __ARGS((list_T *l, int recurse));
! listitem_T *listitem_alloc __ARGS((void));
! void listitem_free __ARGS((listitem_T *item));
! void listitem_remove __ARGS((list_T *l, listitem_T *item));
! dictitem_T *dict_lookup __ARGS((hashitem_T *hi));
! listitem_T *list_find __ARGS((list_T *l, long n));
! char_u *list_find_str __ARGS((list_T *l, long idx));
! void list_append __ARGS((list_T *l, listitem_T *item));
! int list_append_tv __ARGS((list_T *l, typval_T *tv));
! int list_append_dict __ARGS((list_T *list, dict_T *dict));
! int list_append_string __ARGS((list_T *l, char_u *str, int len));
! int list_insert_tv __ARGS((list_T *l, typval_T *tv, listitem_T *item));
! void list_insert __ARGS((list_T *l, listitem_T *ni, listitem_T *item));
! void vimlist_remove __ARGS((list_T *l, listitem_T *item, listitem_T *item2));
! int garbage_collect __ARGS((void));
! int set_ref_in_ht __ARGS((hashtab_T *ht, int copyID, list_stack_T **list_stack));
! int set_ref_in_list __ARGS((list_T *l, int copyID, ht_stack_T **ht_stack));
! int set_ref_in_item __ARGS((typval_T *tv, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack));
! dict_T *dict_alloc __ARGS((void));
! void dict_unref __ARGS((dict_T *d));
! void dict_free __ARGS((dict_T *d, int recurse));
! dictitem_T *dictitem_alloc __ARGS((char_u *key));
! void dictitem_free __ARGS((dictitem_T *item));
! int dict_add __ARGS((dict_T *d, dictitem_T *item));
! int dict_add_nr_str __ARGS((dict_T *d, char *key, long nr, char_u *str));
! int dict_add_list __ARGS((dict_T *d, char *key, list_T *list));
! dictitem_T *dict_find __ARGS((dict_T *d, char_u *key, int len));
! char_u *get_dict_string __ARGS((dict_T *d, char_u *key, int save));
! long get_dict_number __ARGS((dict_T *d, char_u *key));
! char_u *get_function_name __ARGS((expand_T *xp, int idx));
! char_u *get_expr_name __ARGS((expand_T *xp, int idx));
! int func_call __ARGS((char_u *name, typval_T *args, dict_T *selfdict, typval_T *rettv));
! void dict_extend __ARGS((dict_T *d1, dict_T *d2, char_u *action));
! void mzscheme_call_vim __ARGS((char_u *name, typval_T *args, typval_T *rettv));
! float_T vim_round __ARGS((float_T f));
! long do_searchpair __ARGS((char_u *spat, char_u *mpat, char_u *epat, int dir, char_u *skip, int flags, pos_T *match_pos, linenr_T lnum_stop, long time_limit));
! void set_vim_var_nr __ARGS((int idx, long val));
! long get_vim_var_nr __ARGS((int idx));
! char_u *get_vim_var_str __ARGS((int idx));
! list_T *get_vim_var_list __ARGS((int idx));
! void set_vim_var_char __ARGS((int c));
! void set_vcount __ARGS((long count, long count1, int set_prevcount));
! void set_vim_var_string __ARGS((int idx, char_u *val, int len));
! void set_vim_var_list __ARGS((int idx, list_T *val));
! void set_vim_var_dict __ARGS((int idx, dict_T *val));
! void set_reg_var __ARGS((int c));
! char_u *v_exception __ARGS((char_u *oldval));
! char_u *v_throwpoint __ARGS((char_u *oldval));
! char_u *set_cmdarg __ARGS((exarg_T *eap, char_u *oldarg));
! void free_tv __ARGS((typval_T *varp));
! void clear_tv __ARGS((typval_T *varp));
! long get_tv_number_chk __ARGS((typval_T *varp, int *denote));
! char_u *get_tv_string_chk __ARGS((typval_T *varp));
! char_u *get_var_value __ARGS((char_u *name));
! void new_script_vars __ARGS((scid_T id));
! void init_var_dict __ARGS((dict_T *dict, dictitem_T *dict_var, int scope));
! void unref_var_dict __ARGS((dict_T *dict));
! void vars_clear __ARGS((hashtab_T *ht));
! void copy_tv __ARGS((typval_T *from, typval_T *to));
! void ex_echo __ARGS((exarg_T *eap));
! void ex_echohl __ARGS((exarg_T *eap));
! void ex_execute __ARGS((exarg_T *eap));
! void ex_function __ARGS((exarg_T *eap));
! void free_all_functions __ARGS((void));
! int translated_function_exists __ARGS((char_u *name));
! char_u *get_expanded_name __ARGS((char_u *name, int check));
! void func_dump_profile __ARGS((FILE *fd));
! char_u *get_user_func_name __ARGS((expand_T *xp, int idx));
! void ex_delfunction __ARGS((exarg_T *eap));
! void func_unref __ARGS((char_u *name));
! void func_ref __ARGS((char_u *name));
! void ex_return __ARGS((exarg_T *eap));
! int do_return __ARGS((exarg_T *eap, int reanimate, int is_cmd, void *rettv));
! void discard_pending_return __ARGS((void *rettv));
! char_u *get_return_cmd __ARGS((void *rettv));
! char_u *get_func_line __ARGS((int c, void *cookie, int indent));
! void func_line_start __ARGS((void *cookie));
! void func_line_exec __ARGS((void *cookie));
! void func_line_end __ARGS((void *cookie));
! int func_has_ended __ARGS((void *cookie));
! int func_has_abort __ARGS((void *cookie));
! int read_viminfo_varlist __ARGS((vir_T *virp, int writing));
! void write_viminfo_varlist __ARGS((FILE *fp));
! int store_session_globals __ARGS((FILE *fd));
! void last_set_msg __ARGS((scid_T scriptID));
! void ex_oldfiles __ARGS((exarg_T *eap));
! void reset_v_option_vars __ARGS((void));
! int modify_fname __ARGS((char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen));
! char_u *do_string_sub __ARGS((char_u *str, char_u *pat, char_u *sub, char_u *flags));
  /* vim: set ft=c : */
--- 1,139 ----
  /* eval.c */
! void eval_init(void);
! void eval_clear(void);
! char_u *func_name(void *cookie);
! linenr_T *func_breakpoint(void *cookie);
! int *func_dbg_tick(void *cookie);
! int func_level(void *cookie);
! int current_func_returned(void);
! void set_internal_string_var(char_u *name, char_u *value);
! int var_redir_start(char_u *name, int append);
! void var_redir_str(char_u *value, int value_len);
! void var_redir_stop(void);
! int eval_charconvert(char_u *enc_from, char_u *enc_to, char_u *fname_from, char_u *fname_to);
! int eval_printexpr(char_u *fname, char_u *args);
! void eval_diff(char_u *origfile, char_u *newfile, char_u *outfile);
! void eval_patch(char_u *origfile, char_u *difffile, char_u *outfile);
! int eval_to_bool(char_u *arg, int *error, char_u **nextcmd, int skip);
! char_u *eval_to_string_skip(char_u *arg, char_u **nextcmd, int skip);
! int skip_expr(char_u **pp);
! char_u *eval_to_string(char_u *arg, char_u **nextcmd, int convert);
! char_u *eval_to_string_safe(char_u *arg, char_u **nextcmd, int use_sandbox);
! int eval_to_number(char_u *expr);
! list_T *eval_spell_expr(char_u *badword, char_u *expr);
! int get_spellword(list_T *list, char_u **pp);
! typval_T *eval_expr(char_u *arg, char_u **nextcmd);
! int call_vim_function(char_u *func, int argc, char_u **argv, int safe, int str_arg_only, typval_T *rettv);
! long call_func_retnr(char_u *func, int argc, char_u **argv, int safe);
! void *call_func_retstr(char_u *func, int argc, char_u **argv, int safe);
! void *call_func_retlist(char_u *func, int argc, char_u **argv, int safe);
! void *save_funccal(void);
! void restore_funccal(void *vfc);
! void prof_child_enter(proftime_T *tm);
! void prof_child_exit(proftime_T *tm);
! int eval_foldexpr(char_u *arg, int *cp);
! void ex_let(exarg_T *eap);
! void list_add_watch(list_T *l, listwatch_T *lw);
! void list_rem_watch(list_T *l, listwatch_T *lwrem);
! void *eval_for_line(char_u *arg, int *errp, char_u **nextcmdp, int skip);
! int next_for_item(void *fi_void, char_u *arg);
! void free_for_info(void *fi_void);
! void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx);
! void ex_call(exarg_T *eap);
! void ex_unlet(exarg_T *eap);
! void ex_lockvar(exarg_T *eap);
! int do_unlet(char_u *name, int forceit);
! void del_menutrans_vars(void);
! char_u *get_user_var_name(expand_T *xp, int idx);
! list_T *list_alloc(void);
! void list_unref(list_T *l);
! void list_free(list_T *l, int recurse);
! listitem_T *listitem_alloc(void);
! void listitem_free(listitem_T *item);
! void listitem_remove(list_T *l, listitem_T *item);
! dictitem_T *dict_lookup(hashitem_T *hi);
! listitem_T *list_find(list_T *l, long n);
! char_u *list_find_str(list_T *l, long idx);
! void list_append(list_T *l, listitem_T *item);
! int list_append_tv(list_T *l, typval_T *tv);
! int list_append_dict(list_T *list, dict_T *dict);
! int list_append_string(list_T *l, char_u *str, int len);
! int list_insert_tv(list_T *l, typval_T *tv, listitem_T *item);
! void list_insert(list_T *l, listitem_T *ni, listitem_T *item);
! void vimlist_remove(list_T *l, listitem_T *item, listitem_T *item2);
! int garbage_collect(void);
! int set_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack);
! int set_ref_in_list(list_T *l, int copyID, ht_stack_T **ht_stack);
! int set_ref_in_item(typval_T *tv, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack);
! dict_T *dict_alloc(void);
! void dict_unref(dict_T *d);
! void dict_free(dict_T *d, int recurse);
! dictitem_T *dictitem_alloc(char_u *key);
! void dictitem_free(dictitem_T *item);
! int dict_add(dict_T *d, dictitem_T *item);
! int dict_add_nr_str(dict_T *d, char *key, long nr, char_u *str);
! int dict_add_list(dict_T *d, char *key, list_T *list);
! dictitem_T *dict_find(dict_T *d, char_u *key, int len);
! char_u *get_dict_string(dict_T *d, char_u *key, int save);
! long get_dict_number(dict_T *d, char_u *key);
! char_u *get_function_name(expand_T *xp, int idx);
! char_u *get_expr_name(expand_T *xp, int idx);
! int func_call(char_u *name, typval_T *args, dict_T *selfdict, typval_T *rettv);
! void dict_extend(dict_T *d1, dict_T *d2, char_u *action);
! void mzscheme_call_vim(char_u *name, typval_T *args, typval_T *rettv);
! float_T vim_round(float_T f);
! long do_searchpair(char_u *spat, char_u *mpat, char_u *epat, int dir, char_u *skip, int flags, pos_T *match_pos, linenr_T lnum_stop, long time_limit);
! void set_vim_var_nr(int idx, long val);
! long get_vim_var_nr(int idx);
! char_u *get_vim_var_str(int idx);
! list_T *get_vim_var_list(int idx);
! void set_vim_var_char(int c);
! void set_vcount(long count, long count1, int set_prevcount);
! void set_vim_var_string(int idx, char_u *val, int len);
! void set_vim_var_list(int idx, list_T *val);
! void set_vim_var_dict(int idx, dict_T *val);
! void set_reg_var(int c);
! char_u *v_exception(char_u *oldval);
! char_u *v_throwpoint(char_u *oldval);
! char_u *set_cmdarg(exarg_T *eap, char_u *oldarg);
! void free_tv(typval_T *varp);
! void clear_tv(typval_T *varp);
! long get_tv_number_chk(typval_T *varp, int *denote);
! char_u *get_tv_string_chk(typval_T *varp);
! char_u *get_var_value(char_u *name);
! void new_script_vars(scid_T id);
! void init_var_dict(dict_T *dict, dictitem_T *dict_var, int scope);
! void unref_var_dict(dict_T *dict);
! void vars_clear(hashtab_T *ht);
! void copy_tv(typval_T *from, typval_T *to);
! void ex_echo(exarg_T *eap);
! void ex_echohl(exarg_T *eap);
! void ex_execute(exarg_T *eap);
! void ex_function(exarg_T *eap);
! void free_all_functions(void);
! int translated_function_exists(char_u *name);
! char_u *get_expanded_name(char_u *name, int check);
! void func_dump_profile(FILE *fd);
! char_u *get_user_func_name(expand_T *xp, int idx);
! void ex_delfunction(exarg_T *eap);
! void func_unref(char_u *name);
! void func_ref(char_u *name);
! void ex_return(exarg_T *eap);
! int do_return(exarg_T *eap, int reanimate, int is_cmd, void *rettv);
! void discard_pending_return(void *rettv);
! char_u *get_return_cmd(void *rettv);
! char_u *get_func_line(int c, void *cookie, int indent);
! void func_line_start(void *cookie);
! void func_line_exec(void *cookie);
! void func_line_end(void *cookie);
! int func_has_ended(void *cookie);
! int func_has_abort(void *cookie);
! int read_viminfo_varlist(vir_T *virp, int writing);
! void write_viminfo_varlist(FILE *fp);
! int store_session_globals(FILE *fd);
! void last_set_msg(scid_T scriptID);
! void ex_oldfiles(exarg_T *eap);
! void reset_v_option_vars(void);
! int modify_fname(char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen);
! char_u *do_string_sub(char_u *str, char_u *pat, char_u *sub, char_u *flags);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ex_cmds2.pro	2016-01-02 22:25:40.674710064 +0100
--- src/proto/ex_cmds2.pro	2016-01-19 13:12:59.615107116 +0100
***************
*** 1,90 ****
  /* ex_cmds2.c */
! void do_debug __ARGS((char_u *cmd));
! void ex_debug __ARGS((exarg_T *eap));
! void dbg_check_breakpoint __ARGS((exarg_T *eap));
! int dbg_check_skipped __ARGS((exarg_T *eap));
! void ex_breakadd __ARGS((exarg_T *eap));
! void ex_debuggreedy __ARGS((exarg_T *eap));
! void ex_breakdel __ARGS((exarg_T *eap));
! void ex_breaklist __ARGS((exarg_T *eap));
! linenr_T dbg_find_breakpoint __ARGS((int file, char_u *fname, linenr_T after));
! int has_profiling __ARGS((int file, char_u *fname, int *fp));
! void dbg_breakpoint __ARGS((char_u *name, linenr_T lnum));
! void profile_start __ARGS((proftime_T *tm));
! void profile_end __ARGS((proftime_T *tm));
! void profile_sub __ARGS((proftime_T *tm, proftime_T *tm2));
! char *profile_msg __ARGS((proftime_T *tm));
! void profile_setlimit __ARGS((long msec, proftime_T *tm));
! int profile_passed_limit __ARGS((proftime_T *tm));
! void profile_zero __ARGS((proftime_T *tm));
! void profile_divide __ARGS((proftime_T *tm, int count, proftime_T *tm2));
! void profile_add __ARGS((proftime_T *tm, proftime_T *tm2));
! void profile_self __ARGS((proftime_T *self, proftime_T *total, proftime_T *children));
! void profile_get_wait __ARGS((proftime_T *tm));
! void profile_sub_wait __ARGS((proftime_T *tm, proftime_T *tma));
! int profile_equal __ARGS((proftime_T *tm1, proftime_T *tm2));
! int profile_cmp __ARGS((const proftime_T *tm1, const proftime_T *tm2));
! void ex_profile __ARGS((exarg_T *eap));
! char_u *get_profile_name __ARGS((expand_T *xp, int idx));
! void set_context_in_profile_cmd __ARGS((expand_T *xp, char_u *arg));
! void profile_dump __ARGS((void));
! void script_prof_save __ARGS((proftime_T *tm));
! void script_prof_restore __ARGS((proftime_T *tm));
! void prof_inchar_enter __ARGS((void));
! void prof_inchar_exit __ARGS((void));
! int prof_def_func __ARGS((void));
! int autowrite __ARGS((buf_T *buf, int forceit));
! void autowrite_all __ARGS((void));
! int check_changed __ARGS((buf_T *buf, int flags));
! void browse_save_fname __ARGS((buf_T *buf));
! void dialog_changed __ARGS((buf_T *buf, int checkall));
! int can_abandon __ARGS((buf_T *buf, int forceit));
! int check_changed_any __ARGS((int hidden, int unload));
! int check_fname __ARGS((void));
! int buf_write_all __ARGS((buf_T *buf, int forceit));
! int get_arglist __ARGS((garray_T *gap, char_u *str));
! int get_arglist_exp __ARGS((char_u *str, int *fcountp, char_u ***fnamesp, int wig));
! void set_arglist __ARGS((char_u *str));
! void check_arg_idx __ARGS((win_T *win));
! void ex_args __ARGS((exarg_T *eap));
! void ex_previous __ARGS((exarg_T *eap));
! void ex_rewind __ARGS((exarg_T *eap));
! void ex_last __ARGS((exarg_T *eap));
! void ex_argument __ARGS((exarg_T *eap));
! void do_argfile __ARGS((exarg_T *eap, int argn));
! void ex_next __ARGS((exarg_T *eap));
! void ex_argedit __ARGS((exarg_T *eap));
! void ex_argadd __ARGS((exarg_T *eap));
! void ex_argdelete __ARGS((exarg_T *eap));
! void ex_listdo __ARGS((exarg_T *eap));
! void ex_compiler __ARGS((exarg_T *eap));
! void ex_runtime __ARGS((exarg_T *eap));
! int source_runtime __ARGS((char_u *name, int all));
! int do_in_runtimepath __ARGS((char_u *name, int all, void (*callback)(char_u *fname, void *ck), void *cookie));
! void ex_options __ARGS((exarg_T *eap));
! void ex_source __ARGS((exarg_T *eap));
! linenr_T *source_breakpoint __ARGS((void *cookie));
! int *source_dbg_tick __ARGS((void *cookie));
! int source_level __ARGS((void *cookie));
! int do_source __ARGS((char_u *fname, int check_other, int is_vimrc));
! void ex_scriptnames __ARGS((exarg_T *eap));
! void scriptnames_slash_adjust __ARGS((void));
! char_u *get_scriptname __ARGS((scid_T id));
! void free_scriptnames __ARGS((void));
! char *fgets_cr __ARGS((char *s, int n, FILE *stream));
! char_u *getsourceline __ARGS((int c, void *cookie, int indent));
! void script_line_start __ARGS((void));
! void script_line_exec __ARGS((void));
! void script_line_end __ARGS((void));
! void ex_scriptencoding __ARGS((exarg_T *eap));
! void ex_finish __ARGS((exarg_T *eap));
! void do_finish __ARGS((exarg_T *eap, int reanimate));
! int source_finished __ARGS((char_u *(*fgetline)(int, void *, int), void *cookie));
! void ex_checktime __ARGS((exarg_T *eap));
! char_u *get_mess_lang __ARGS((void));
! void set_lang_var __ARGS((void));
! void ex_language __ARGS((exarg_T *eap));
! void free_locales __ARGS((void));
! char_u *get_lang_arg __ARGS((expand_T *xp, int idx));
! char_u *get_locales __ARGS((expand_T *xp, int idx));
  /* vim: set ft=c : */
--- 1,90 ----
  /* ex_cmds2.c */
! void do_debug(char_u *cmd);
! void ex_debug(exarg_T *eap);
! void dbg_check_breakpoint(exarg_T *eap);
! int dbg_check_skipped(exarg_T *eap);
! void ex_breakadd(exarg_T *eap);
! void ex_debuggreedy(exarg_T *eap);
! void ex_breakdel(exarg_T *eap);
! void ex_breaklist(exarg_T *eap);
! linenr_T dbg_find_breakpoint(int file, char_u *fname, linenr_T after);
! int has_profiling(int file, char_u *fname, int *fp);
! void dbg_breakpoint(char_u *name, linenr_T lnum);
! void profile_start(proftime_T *tm);
! void profile_end(proftime_T *tm);
! void profile_sub(proftime_T *tm, proftime_T *tm2);
! char *profile_msg(proftime_T *tm);
! void profile_setlimit(long msec, proftime_T *tm);
! int profile_passed_limit(proftime_T *tm);
! void profile_zero(proftime_T *tm);
! void profile_divide(proftime_T *tm, int count, proftime_T *tm2);
! void profile_add(proftime_T *tm, proftime_T *tm2);
! void profile_self(proftime_T *self, proftime_T *total, proftime_T *children);
! void profile_get_wait(proftime_T *tm);
! void profile_sub_wait(proftime_T *tm, proftime_T *tma);
! int profile_equal(proftime_T *tm1, proftime_T *tm2);
! int profile_cmp(const proftime_T *tm1, const proftime_T *tm2);
! void ex_profile(exarg_T *eap);
! char_u *get_profile_name(expand_T *xp, int idx);
! void set_context_in_profile_cmd(expand_T *xp, char_u *arg);
! void profile_dump(void);
! void script_prof_save(proftime_T *tm);
! void script_prof_restore(proftime_T *tm);
! void prof_inchar_enter(void);
! void prof_inchar_exit(void);
! int prof_def_func(void);
! int autowrite(buf_T *buf, int forceit);
! void autowrite_all(void);
! int check_changed(buf_T *buf, int flags);
! void browse_save_fname(buf_T *buf);
! void dialog_changed(buf_T *buf, int checkall);
! int can_abandon(buf_T *buf, int forceit);
! int check_changed_any(int hidden, int unload);
! int check_fname(void);
! int buf_write_all(buf_T *buf, int forceit);
! int get_arglist(garray_T *gap, char_u *str);
! int get_arglist_exp(char_u *str, int *fcountp, char_u ***fnamesp, int wig);
! void set_arglist(char_u *str);
! void check_arg_idx(win_T *win);
! void ex_args(exarg_T *eap);
! void ex_previous(exarg_T *eap);
! void ex_rewind(exarg_T *eap);
! void ex_last(exarg_T *eap);
! void ex_argument(exarg_T *eap);
! void do_argfile(exarg_T *eap, int argn);
! void ex_next(exarg_T *eap);
! void ex_argedit(exarg_T *eap);
! void ex_argadd(exarg_T *eap);
! void ex_argdelete(exarg_T *eap);
! void ex_listdo(exarg_T *eap);
! void ex_compiler(exarg_T *eap);
! void ex_runtime(exarg_T *eap);
! int source_runtime(char_u *name, int all);
! int do_in_runtimepath(char_u *name, int all, void (*callback)(char_u *fname, void *ck), void *cookie);
! void ex_options(exarg_T *eap);
! void ex_source(exarg_T *eap);
! linenr_T *source_breakpoint(void *cookie);
! int *source_dbg_tick(void *cookie);
! int source_level(void *cookie);
! int do_source(char_u *fname, int check_other, int is_vimrc);
! void ex_scriptnames(exarg_T *eap);
! void scriptnames_slash_adjust(void);
! char_u *get_scriptname(scid_T id);
! void free_scriptnames(void);
! char *fgets_cr(char *s, int n, FILE *stream);
! char_u *getsourceline(int c, void *cookie, int indent);
! void script_line_start(void);
! void script_line_exec(void);
! void script_line_end(void);
! void ex_scriptencoding(exarg_T *eap);
! void ex_finish(exarg_T *eap);
! void do_finish(exarg_T *eap, int reanimate);
! int source_finished(char_u *(*fgetline)(int, void *, int), void *cookie);
! void ex_checktime(exarg_T *eap);
! char_u *get_mess_lang(void);
! void set_lang_var(void);
! void ex_language(exarg_T *eap);
! void free_locales(void);
! char_u *get_lang_arg(expand_T *xp, int idx);
! char_u *get_locales(expand_T *xp, int idx);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ex_cmds.pro	2015-12-31 16:10:18.522599661 +0100
--- src/proto/ex_cmds.pro	2016-01-19 13:12:59.211111465 +0100
***************
*** 1,66 ****
  /* ex_cmds.c */
! void do_ascii __ARGS((exarg_T *eap));
! void ex_align __ARGS((exarg_T *eap));
! void ex_sort __ARGS((exarg_T *eap));
! void ex_retab __ARGS((exarg_T *eap));
! int do_move __ARGS((linenr_T line1, linenr_T line2, linenr_T dest));
! void ex_copy __ARGS((linenr_T line1, linenr_T line2, linenr_T n));
! void free_prev_shellcmd __ARGS((void));
! void do_bang __ARGS((int addr_count, exarg_T *eap, int forceit, int do_in, int do_out));
! void do_shell __ARGS((char_u *cmd, int flags));
! char_u *make_filter_cmd __ARGS((char_u *cmd, char_u *itmp, char_u *otmp));
! void append_redir __ARGS((char_u *buf, int buflen, char_u *opt, char_u *fname));
! int viminfo_error __ARGS((char *errnum, char *message, char_u *line));
! int read_viminfo __ARGS((char_u *file, int flags));
! void write_viminfo __ARGS((char_u *file, int forceit));
! int viminfo_readline __ARGS((vir_T *virp));
! char_u *viminfo_readstring __ARGS((vir_T *virp, int off, int convert));
! void viminfo_writestring __ARGS((FILE *fd, char_u *p));
! void do_fixdel __ARGS((exarg_T *eap));
! void print_line_no_prefix __ARGS((linenr_T lnum, int use_number, int list));
! void print_line __ARGS((linenr_T lnum, int use_number, int list));
! int rename_buffer __ARGS((char_u *new_fname));
! void ex_file __ARGS((exarg_T *eap));
! void ex_update __ARGS((exarg_T *eap));
! void ex_write __ARGS((exarg_T *eap));
! int do_write __ARGS((exarg_T *eap));
! int check_overwrite __ARGS((exarg_T *eap, buf_T *buf, char_u *fname, char_u *ffname, int other));
! void ex_wnext __ARGS((exarg_T *eap));
! void do_wqall __ARGS((exarg_T *eap));
! int not_writing __ARGS((void));
! int getfile __ARGS((int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_T lnum, int forceit));
! int do_ecmd __ARGS((int fnum, char_u *ffname, char_u *sfname, exarg_T *eap, linenr_T newlnum, int flags, win_T *oldwin));
! void ex_append __ARGS((exarg_T *eap));
! void ex_change __ARGS((exarg_T *eap));
! void ex_z __ARGS((exarg_T *eap));
! int check_restricted __ARGS((void));
! int check_secure __ARGS((void));
! void do_sub __ARGS((exarg_T *eap));
! int do_sub_msg __ARGS((int count_only));
! void ex_global __ARGS((exarg_T *eap));
! void global_exe __ARGS((char_u *cmd));
! int read_viminfo_sub_string __ARGS((vir_T *virp, int force));
! void write_viminfo_sub_string __ARGS((FILE *fp));
! void free_old_sub __ARGS((void));
! int prepare_tagpreview __ARGS((int undo_sync));
! void ex_help __ARGS((exarg_T *eap));
! void ex_helpclose __ARGS((exarg_T *eap));
! char_u *check_help_lang __ARGS((char_u *arg));
! int help_heuristic __ARGS((char_u *matched_string, int offset, int wrong_case));
! int find_help_tags __ARGS((char_u *arg, int *num_matches, char_u ***matches, int keep_lang));
! void fix_help_buffer __ARGS((void));
! void ex_exusage __ARGS((exarg_T *eap));
! void ex_viusage __ARGS((exarg_T *eap));
! void ex_helptags __ARGS((exarg_T *eap));
! void ex_sign __ARGS((exarg_T *eap));
! void sign_gui_started __ARGS((void));
! int sign_get_attr __ARGS((int typenr, int line));
! char_u *sign_get_text __ARGS((int typenr));
! void *sign_get_image __ARGS((int typenr));
! char_u *sign_typenr2name __ARGS((int typenr));
! void free_signs __ARGS((void));
! char_u *get_sign_name __ARGS((expand_T *xp, int idx));
! void set_context_in_sign_cmd __ARGS((expand_T *xp, char_u *arg));
! void ex_smile __ARGS((exarg_T *eap));
! void ex_drop __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,66 ----
  /* ex_cmds.c */
! void do_ascii(exarg_T *eap);
! void ex_align(exarg_T *eap);
! void ex_sort(exarg_T *eap);
! void ex_retab(exarg_T *eap);
! int do_move(linenr_T line1, linenr_T line2, linenr_T dest);
! void ex_copy(linenr_T line1, linenr_T line2, linenr_T n);
! void free_prev_shellcmd(void);
! void do_bang(int addr_count, exarg_T *eap, int forceit, int do_in, int do_out);
! void do_shell(char_u *cmd, int flags);
! char_u *make_filter_cmd(char_u *cmd, char_u *itmp, char_u *otmp);
! void append_redir(char_u *buf, int buflen, char_u *opt, char_u *fname);
! int viminfo_error(char *errnum, char *message, char_u *line);
! int read_viminfo(char_u *file, int flags);
! void write_viminfo(char_u *file, int forceit);
! int viminfo_readline(vir_T *virp);
! char_u *viminfo_readstring(vir_T *virp, int off, int convert);
! void viminfo_writestring(FILE *fd, char_u *p);
! void do_fixdel(exarg_T *eap);
! void print_line_no_prefix(linenr_T lnum, int use_number, int list);
! void print_line(linenr_T lnum, int use_number, int list);
! int rename_buffer(char_u *new_fname);
! void ex_file(exarg_T *eap);
! void ex_update(exarg_T *eap);
! void ex_write(exarg_T *eap);
! int do_write(exarg_T *eap);
! int check_overwrite(exarg_T *eap, buf_T *buf, char_u *fname, char_u *ffname, int other);
! void ex_wnext(exarg_T *eap);
! void do_wqall(exarg_T *eap);
! int not_writing(void);
! int getfile(int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_T lnum, int forceit);
! int do_ecmd(int fnum, char_u *ffname, char_u *sfname, exarg_T *eap, linenr_T newlnum, int flags, win_T *oldwin);
! void ex_append(exarg_T *eap);
! void ex_change(exarg_T *eap);
! void ex_z(exarg_T *eap);
! int check_restricted(void);
! int check_secure(void);
! void do_sub(exarg_T *eap);
! int do_sub_msg(int count_only);
! void ex_global(exarg_T *eap);
! void global_exe(char_u *cmd);
! int read_viminfo_sub_string(vir_T *virp, int force);
! void write_viminfo_sub_string(FILE *fp);
! void free_old_sub(void);
! int prepare_tagpreview(int undo_sync);
! void ex_help(exarg_T *eap);
! void ex_helpclose(exarg_T *eap);
! char_u *check_help_lang(char_u *arg);
! int help_heuristic(char_u *matched_string, int offset, int wrong_case);
! int find_help_tags(char_u *arg, int *num_matches, char_u ***matches, int keep_lang);
! void fix_help_buffer(void);
! void ex_exusage(exarg_T *eap);
! void ex_viusage(exarg_T *eap);
! void ex_helptags(exarg_T *eap);
! void ex_sign(exarg_T *eap);
! void sign_gui_started(void);
! int sign_get_attr(int typenr, int line);
! char_u *sign_get_text(int typenr);
! void *sign_get_image(int typenr);
! char_u *sign_typenr2name(int typenr);
! void free_signs(void);
! char_u *get_sign_name(expand_T *xp, int idx);
! void set_context_in_sign_cmd(expand_T *xp, char_u *arg);
! void ex_smile(exarg_T *eap);
! void ex_drop(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ex_docmd.pro	2014-12-08 04:16:26.269702835 +0100
--- src/proto/ex_docmd.pro	2016-01-19 13:12:59.991103071 +0100
***************
*** 1,60 ****
  /* ex_docmd.c */
! void do_exmode __ARGS((int improved));
! int do_cmdline_cmd __ARGS((char_u *cmd));
! int do_cmdline __ARGS((char_u *cmdline, char_u *(*fgetline)(int, void *, int), void *cookie, int flags));
! int getline_equal __ARGS((char_u *(*fgetline)(int, void *, int), void *cookie, char_u *(*func)(int, void *, int)));
! void *getline_cookie __ARGS((char_u *(*fgetline)(int, void *, int), void *cookie));
! int checkforcmd __ARGS((char_u **pp, char *cmd, int len));
! int modifier_len __ARGS((char_u *cmd));
! int cmd_exists __ARGS((char_u *name));
! char_u *set_one_cmd_context __ARGS((expand_T *xp, char_u *buff));
! char_u *skip_range __ARGS((char_u *cmd, int *ctx));
! void ex_ni __ARGS((exarg_T *eap));
! int expand_filename __ARGS((exarg_T *eap, char_u **cmdlinep, char_u **errormsgp));
! void separate_nextcmd __ARGS((exarg_T *eap));
! int ends_excmd __ARGS((int c));
! char_u *find_nextcmd __ARGS((char_u *p));
! char_u *check_nextcmd __ARGS((char_u *p));
! char_u *get_command_name __ARGS((expand_T *xp, int idx));
! void ex_comclear __ARGS((exarg_T *eap));
! void uc_clear __ARGS((garray_T *gap));
! char_u *get_user_commands __ARGS((expand_T *xp, int idx));
! char_u *get_user_cmd_addr_type __ARGS((expand_T *xp, int idx));
! char_u *get_user_cmd_flags __ARGS((expand_T *xp, int idx));
! char_u *get_user_cmd_nargs __ARGS((expand_T *xp, int idx));
! char_u *get_user_cmd_complete __ARGS((expand_T *xp, int idx));
! int parse_addr_type_arg __ARGS((char_u *value, int vallen, long *argt, int *addr_type_arg));
! int parse_compl_arg __ARGS((char_u *value, int vallen, int *complp, long *argt, char_u **compl_arg));
! void not_exiting __ARGS((void));
! void tabpage_close __ARGS((int forceit));
! void tabpage_close_other __ARGS((tabpage_T *tp, int forceit));
! void ex_all __ARGS((exarg_T *eap));
! void handle_drop __ARGS((int filec, char_u **filev, int split));
! void alist_clear __ARGS((alist_T *al));
! void alist_init __ARGS((alist_T *al));
! void alist_unlink __ARGS((alist_T *al));
! void alist_new __ARGS((void));
! void alist_expand __ARGS((int *fnum_list, int fnum_len));
! void alist_set __ARGS((alist_T *al, int count, char_u **files, int use_curbuf, int *fnum_list, int fnum_len));
! void alist_add __ARGS((alist_T *al, char_u *fname, int set_fnum));
! void alist_slash_adjust __ARGS((void));
! void ex_splitview __ARGS((exarg_T *eap));
! void tabpage_new __ARGS((void));
! void do_exedit __ARGS((exarg_T *eap, win_T *old_curwin));
! void free_cd_dir __ARGS((void));
! void post_chdir __ARGS((int local));
! void ex_cd __ARGS((exarg_T *eap));
! void do_sleep __ARGS((long msec));
! void ex_may_print __ARGS((exarg_T *eap));
! int vim_mkdir_emsg __ARGS((char_u *name, int prot));
! FILE *open_exfile __ARGS((char_u *fname, int forceit, char *mode));
! void update_topline_cursor __ARGS((void));
! void exec_normal_cmd __ARGS((char_u *cmd, int remap, int silent));
! int find_cmdline_var __ARGS((char_u *src, int *usedlen));
! char_u *eval_vars __ARGS((char_u *src, char_u *srcstart, int *usedlen, linenr_T *lnump, char_u **errormsg, int *escaped));
! char_u *expand_sfile __ARGS((char_u *arg));
! int put_eol __ARGS((FILE *fd));
! int put_line __ARGS((FILE *fd, char *s));
! void dialog_msg __ARGS((char_u *buff, char *format, char_u *fname));
! char_u *get_behave_arg __ARGS((expand_T *xp, int idx));
  /* vim: set ft=c : */
--- 1,60 ----
  /* ex_docmd.c */
! void do_exmode(int improved);
! int do_cmdline_cmd(char_u *cmd);
! int do_cmdline(char_u *cmdline, char_u *(*fgetline)(int, void *, int), void *cookie, int flags);
! int getline_equal(char_u *(*fgetline)(int, void *, int), void *cookie, char_u *(*func)(int, void *, int));
! void *getline_cookie(char_u *(*fgetline)(int, void *, int), void *cookie);
! int checkforcmd(char_u **pp, char *cmd, int len);
! int modifier_len(char_u *cmd);
! int cmd_exists(char_u *name);
! char_u *set_one_cmd_context(expand_T *xp, char_u *buff);
! char_u *skip_range(char_u *cmd, int *ctx);
! void ex_ni(exarg_T *eap);
! int expand_filename(exarg_T *eap, char_u **cmdlinep, char_u **errormsgp);
! void separate_nextcmd(exarg_T *eap);
! int ends_excmd(int c);
! char_u *find_nextcmd(char_u *p);
! char_u *check_nextcmd(char_u *p);
! char_u *get_command_name(expand_T *xp, int idx);
! void ex_comclear(exarg_T *eap);
! void uc_clear(garray_T *gap);
! char_u *get_user_commands(expand_T *xp, int idx);
! char_u *get_user_cmd_addr_type(expand_T *xp, int idx);
! char_u *get_user_cmd_flags(expand_T *xp, int idx);
! char_u *get_user_cmd_nargs(expand_T *xp, int idx);
! char_u *get_user_cmd_complete(expand_T *xp, int idx);
! int parse_addr_type_arg(char_u *value, int vallen, long *argt, int *addr_type_arg);
! int parse_compl_arg(char_u *value, int vallen, int *complp, long *argt, char_u **compl_arg);
! void not_exiting(void);
! void tabpage_close(int forceit);
! void tabpage_close_other(tabpage_T *tp, int forceit);
! void ex_all(exarg_T *eap);
! void handle_drop(int filec, char_u **filev, int split);
! void alist_clear(alist_T *al);
! void alist_init(alist_T *al);
! void alist_unlink(alist_T *al);
! void alist_new(void);
! void alist_expand(int *fnum_list, int fnum_len);
! void alist_set(alist_T *al, int count, char_u **files, int use_curbuf, int *fnum_list, int fnum_len);
! void alist_add(alist_T *al, char_u *fname, int set_fnum);
! void alist_slash_adjust(void);
! void ex_splitview(exarg_T *eap);
! void tabpage_new(void);
! void do_exedit(exarg_T *eap, win_T *old_curwin);
! void free_cd_dir(void);
! void post_chdir(int local);
! void ex_cd(exarg_T *eap);
! void do_sleep(long msec);
! void ex_may_print(exarg_T *eap);
! int vim_mkdir_emsg(char_u *name, int prot);
! FILE *open_exfile(char_u *fname, int forceit, char *mode);
! void update_topline_cursor(void);
! void exec_normal_cmd(char_u *cmd, int remap, int silent);
! int find_cmdline_var(char_u *src, int *usedlen);
! char_u *eval_vars(char_u *src, char_u *srcstart, int *usedlen, linenr_T *lnump, char_u **errormsg, int *escaped);
! char_u *expand_sfile(char_u *arg);
! int put_eol(FILE *fd);
! int put_line(FILE *fd, char *s);
! void dialog_msg(char_u *buff, char *format, char_u *fname);
! char_u *get_behave_arg(expand_T *xp, int idx);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ex_eval.pro	2013-11-28 17:04:38.000000000 +0100
--- src/proto/ex_eval.pro	2016-01-19 13:13:00.367099025 +0100
***************
*** 1,34 ****
  /* ex_eval.c */
! int aborting __ARGS((void));
! void update_force_abort __ARGS((void));
! int should_abort __ARGS((int retcode));
! int aborted_in_try __ARGS((void));
! int cause_errthrow __ARGS((char_u *mesg, int severe, int *ignore));
! void free_global_msglist __ARGS((void));
! void do_errthrow __ARGS((struct condstack *cstack, char_u *cmdname));
! int do_intthrow __ARGS((struct condstack *cstack));
! char_u *get_exception_string __ARGS((void *value, int type, char_u *cmdname, int *should_free));
! void discard_current_exception __ARGS((void));
! void report_make_pending __ARGS((int pending, void *value));
! void report_resume_pending __ARGS((int pending, void *value));
! void report_discard_pending __ARGS((int pending, void *value));
! void ex_if __ARGS((exarg_T *eap));
! void ex_endif __ARGS((exarg_T *eap));
! void ex_else __ARGS((exarg_T *eap));
! void ex_while __ARGS((exarg_T *eap));
! void ex_continue __ARGS((exarg_T *eap));
! void ex_break __ARGS((exarg_T *eap));
! void ex_endwhile __ARGS((exarg_T *eap));
! void ex_throw __ARGS((exarg_T *eap));
! void do_throw __ARGS((struct condstack *cstack));
! void ex_try __ARGS((exarg_T *eap));
! void ex_catch __ARGS((exarg_T *eap));
! void ex_finally __ARGS((exarg_T *eap));
! void ex_endtry __ARGS((exarg_T *eap));
! void enter_cleanup __ARGS((cleanup_T *csp));
! void leave_cleanup __ARGS((cleanup_T *csp));
! int cleanup_conditionals __ARGS((struct condstack *cstack, int searched_cond, int inclusive));
! void rewind_conditionals __ARGS((struct condstack *cstack, int idx, int cond_type, int *cond_level));
! void ex_endfunction __ARGS((exarg_T *eap));
! int has_loop_cmd __ARGS((char_u *p));
  /* vim: set ft=c : */
--- 1,34 ----
  /* ex_eval.c */
! int aborting(void);
! void update_force_abort(void);
! int should_abort(int retcode);
! int aborted_in_try(void);
! int cause_errthrow(char_u *mesg, int severe, int *ignore);
! void free_global_msglist(void);
! void do_errthrow(struct condstack *cstack, char_u *cmdname);
! int do_intthrow(struct condstack *cstack);
! char_u *get_exception_string(void *value, int type, char_u *cmdname, int *should_free);
! void discard_current_exception(void);
! void report_make_pending(int pending, void *value);
! void report_resume_pending(int pending, void *value);
! void report_discard_pending(int pending, void *value);
! void ex_if(exarg_T *eap);
! void ex_endif(exarg_T *eap);
! void ex_else(exarg_T *eap);
! void ex_while(exarg_T *eap);
! void ex_continue(exarg_T *eap);
! void ex_break(exarg_T *eap);
! void ex_endwhile(exarg_T *eap);
! void ex_throw(exarg_T *eap);
! void do_throw(struct condstack *cstack);
! void ex_try(exarg_T *eap);
! void ex_catch(exarg_T *eap);
! void ex_finally(exarg_T *eap);
! void ex_endtry(exarg_T *eap);
! void enter_cleanup(cleanup_T *csp);
! void leave_cleanup(cleanup_T *csp);
! int cleanup_conditionals(struct condstack *cstack, int searched_cond, int inclusive);
! void rewind_conditionals(struct condstack *cstack, int idx, int cond_type, int *cond_level);
! void ex_endfunction(exarg_T *eap);
! int has_loop_cmd(char_u *p);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ex_getln.pro	2014-05-07 18:35:25.669216052 +0200
--- src/proto/ex_getln.pro	2016-01-19 13:13:00.755094848 +0100
***************
*** 1,58 ****
  /* ex_getln.c */
! char_u *getcmdline __ARGS((int firstc, long count, int indent));
! char_u *getcmdline_prompt __ARGS((int firstc, char_u *prompt, int attr, int xp_context, char_u *xp_arg));
! int text_locked __ARGS((void));
! void text_locked_msg __ARGS((void));
! int curbuf_locked __ARGS((void));
! int allbuf_locked __ARGS((void));
! char_u *getexline __ARGS((int c, void *cookie, int indent));
! char_u *getexmodeline __ARGS((int promptc, void *cookie, int indent));
! int cmdline_overstrike __ARGS((void));
! int cmdline_at_end __ARGS((void));
! colnr_T cmdline_getvcol_cursor __ARGS((void));
! void free_cmdline_buf __ARGS((void));
! void putcmdline __ARGS((int c, int shift));
! void unputcmdline __ARGS((void));
! int put_on_cmdline __ARGS((char_u *str, int len, int redraw));
! char_u *save_cmdline_alloc __ARGS((void));
! void restore_cmdline_alloc __ARGS((char_u *p));
! void cmdline_paste_str __ARGS((char_u *s, int literally));
! void redrawcmdline __ARGS((void));
! void redrawcmd __ARGS((void));
! void compute_cmdrow __ARGS((void));
! void gotocmdline __ARGS((int clr));
! char_u *ExpandOne __ARGS((expand_T *xp, char_u *str, char_u *orig, int options, int mode));
! void ExpandInit __ARGS((expand_T *xp));
! void ExpandCleanup __ARGS((expand_T *xp));
! void ExpandEscape __ARGS((expand_T *xp, char_u *str, int numfiles, char_u **files, int options));
! char_u *vim_strsave_fnameescape __ARGS((char_u *fname, int shell));
! void tilde_replace __ARGS((char_u *orig_pat, int num_files, char_u **files));
! char_u *sm_gettail __ARGS((char_u *s));
! char_u *addstar __ARGS((char_u *fname, int len, int context));
! void set_cmd_context __ARGS((expand_T *xp, char_u *str, int len, int col));
! int expand_cmdline __ARGS((expand_T *xp, char_u *str, int col, int *matchcount, char_u ***matches));
! int ExpandGeneric __ARGS((expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file, char_u *((*func)(expand_T *, int)), int escaped));
! void globpath __ARGS((char_u *path, char_u *file, garray_T *ga, int expand_options));
! void init_history __ARGS((void));
! int get_histtype __ARGS((char_u *name));
! void add_to_history __ARGS((int histype, char_u *new_entry, int in_map, int sep));
! int get_history_idx __ARGS((int histype));
! char_u *get_cmdline_str __ARGS((void));
! int get_cmdline_pos __ARGS((void));
! int set_cmdline_pos __ARGS((int pos));
! int get_cmdline_type __ARGS((void));
! char_u *get_history_entry __ARGS((int histype, int idx));
! int clr_history __ARGS((int histype));
! int del_history_entry __ARGS((int histype, char_u *str));
! int del_history_idx __ARGS((int histype, int idx));
! void remove_key_from_history __ARGS((void));
! int get_list_range __ARGS((char_u **str, int *num1, int *num2));
! void ex_history __ARGS((exarg_T *eap));
! void prepare_viminfo_history __ARGS((int asklen, int writing));
! int read_viminfo_history __ARGS((vir_T *virp, int writing));
! void finish_viminfo_history __ARGS((void));
! void write_viminfo_history __ARGS((FILE *fp, int merge));
! void cmd_pchar __ARGS((int c, int offset));
! int cmd_gchar __ARGS((int offset));
! char_u *script_get __ARGS((exarg_T *eap, char_u *cmd));
  /* vim: set ft=c : */
--- 1,58 ----
  /* ex_getln.c */
! char_u *getcmdline(int firstc, long count, int indent);
! char_u *getcmdline_prompt(int firstc, char_u *prompt, int attr, int xp_context, char_u *xp_arg);
! int text_locked(void);
! void text_locked_msg(void);
! int curbuf_locked(void);
! int allbuf_locked(void);
! char_u *getexline(int c, void *cookie, int indent);
! char_u *getexmodeline(int promptc, void *cookie, int indent);
! int cmdline_overstrike(void);
! int cmdline_at_end(void);
! colnr_T cmdline_getvcol_cursor(void);
! void free_cmdline_buf(void);
! void putcmdline(int c, int shift);
! void unputcmdline(void);
! int put_on_cmdline(char_u *str, int len, int redraw);
! char_u *save_cmdline_alloc(void);
! void restore_cmdline_alloc(char_u *p);
! void cmdline_paste_str(char_u *s, int literally);
! void redrawcmdline(void);
! void redrawcmd(void);
! void compute_cmdrow(void);
! void gotocmdline(int clr);
! char_u *ExpandOne(expand_T *xp, char_u *str, char_u *orig, int options, int mode);
! void ExpandInit(expand_T *xp);
! void ExpandCleanup(expand_T *xp);
! void ExpandEscape(expand_T *xp, char_u *str, int numfiles, char_u **files, int options);
! char_u *vim_strsave_fnameescape(char_u *fname, int shell);
! void tilde_replace(char_u *orig_pat, int num_files, char_u **files);
! char_u *sm_gettail(char_u *s);
! char_u *addstar(char_u *fname, int len, int context);
! void set_cmd_context(expand_T *xp, char_u *str, int len, int col);
! int expand_cmdline(expand_T *xp, char_u *str, int col, int *matchcount, char_u ***matches);
! int ExpandGeneric(expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file, char_u *((*func)(expand_T *, int)), int escaped);
! void globpath(char_u *path, char_u *file, garray_T *ga, int expand_options);
! void init_history(void);
! int get_histtype(char_u *name);
! void add_to_history(int histype, char_u *new_entry, int in_map, int sep);
! int get_history_idx(int histype);
! char_u *get_cmdline_str(void);
! int get_cmdline_pos(void);
! int set_cmdline_pos(int pos);
! int get_cmdline_type(void);
! char_u *get_history_entry(int histype, int idx);
! int clr_history(int histype);
! int del_history_entry(int histype, char_u *str);
! int del_history_idx(int histype, int idx);
! void remove_key_from_history(void);
! int get_list_range(char_u **str, int *num1, int *num2);
! void ex_history(exarg_T *eap);
! void prepare_viminfo_history(int asklen, int writing);
! int read_viminfo_history(vir_T *virp, int writing);
! void finish_viminfo_history(void);
! void write_viminfo_history(FILE *fp, int merge);
! void cmd_pchar(int c, int offset);
! int cmd_gchar(int offset);
! char_u *script_get(exarg_T *eap, char_u *cmd);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/fileio.pro	2016-01-16 21:26:30.501956438 +0100
--- src/proto/fileio.pro	2016-01-19 13:13:01.151090587 +0100
***************
*** 1,67 ****
  /* fileio.c */
! void filemess __ARGS((buf_T *buf, char_u *name, char_u *s, int attr));
! int readfile __ARGS((char_u *fname, char_u *sfname, linenr_T from, linenr_T lines_to_skip, linenr_T lines_to_read, exarg_T *eap, int flags));
! int prep_exarg __ARGS((exarg_T *eap, buf_T *buf));
! void set_file_options __ARGS((int set_options, exarg_T *eap));
! void set_forced_fenc __ARGS((exarg_T *eap));
! int check_file_readonly __ARGS((char_u *fname, int perm));
! int buf_write __ARGS((buf_T *buf, char_u *fname, char_u *sfname, linenr_T start, linenr_T end, exarg_T *eap, int append, int forceit, int reset_changed, int filtering));
! void msg_add_fname __ARGS((buf_T *buf, char_u *fname));
! void msg_add_lines __ARGS((int insert_space, long lnum, off_t nchars));
! char_u *shorten_fname1 __ARGS((char_u *full_path));
! char_u *shorten_fname __ARGS((char_u *full_path, char_u *dir_name));
! void shorten_fnames __ARGS((int force));
! void shorten_filenames __ARGS((char_u **fnames, int count));
! char_u *modname __ARGS((char_u *fname, char_u *ext, int prepend_dot));
! char_u *buf_modname __ARGS((int shortname, char_u *fname, char_u *ext, int prepend_dot));
! int vim_fgets __ARGS((char_u *buf, int size, FILE *fp));
! int tag_fgets __ARGS((char_u *buf, int size, FILE *fp));
! int vim_rename __ARGS((char_u *from, char_u *to));
! int check_timestamps __ARGS((int focus));
! int buf_check_timestamp __ARGS((buf_T *buf, int focus));
! void buf_reload __ARGS((buf_T *buf, int orig_mode));
! void buf_store_time __ARGS((buf_T *buf, struct stat *st, char_u *fname));
! void write_lnum_adjust __ARGS((linenr_T offset));
! int delete_recursive __ARGS((char_u *name));
! void vim_deltempdir __ARGS((void));
! char_u *vim_tempname __ARGS((int extra_char, int keep));
! void forward_slash __ARGS((char_u *fname));
! void aubuflocal_remove __ARGS((buf_T *buf));
! int au_has_group __ARGS((char_u *name));
! void do_augroup __ARGS((char_u *arg, int del_group));
! void free_all_autocmds __ARGS((void));
! int check_ei __ARGS((void));
! char_u *au_event_disable __ARGS((char *what));
! void au_event_restore __ARGS((char_u *old_ei));
! void do_autocmd __ARGS((char_u *arg, int forceit));
! int do_doautocmd __ARGS((char_u *arg, int do_msg));
! void ex_doautoall __ARGS((exarg_T *eap));
! int check_nomodeline __ARGS((char_u **argp));
! void aucmd_prepbuf __ARGS((aco_save_T *aco, buf_T *buf));
! void aucmd_restbuf __ARGS((aco_save_T *aco));
! int apply_autocmds __ARGS((event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf));
! int apply_autocmds_retval __ARGS((event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, int *retval));
! int has_cursorhold __ARGS((void));
! int trigger_cursorhold __ARGS((void));
! int has_cursormoved __ARGS((void));
! int has_cursormovedI __ARGS((void));
! int has_textchanged __ARGS((void));
! int has_textchangedI __ARGS((void));
! int has_insertcharpre __ARGS((void));
! int has_cmdundefined __ARGS((void));
! int has_funcundefined __ARGS((void));
! void block_autocmds __ARGS((void));
! void unblock_autocmds __ARGS((void));
! int is_autocmd_blocked __ARGS((void));
! char_u *getnextac __ARGS((int c, void *cookie, int indent));
! int has_autocmd __ARGS((event_T event, char_u *sfname, buf_T *buf));
! char_u *get_augroup_name __ARGS((expand_T *xp, int idx));
! char_u *set_context_in_autocmd __ARGS((expand_T *xp, char_u *arg, int doautocmd));
! char_u *get_event_name __ARGS((expand_T *xp, int idx));
! int autocmd_supported __ARGS((char_u *name));
! int au_exists __ARGS((char_u *arg));
! int match_file_list __ARGS((char_u *list, char_u *sfname, char_u *ffname));
! char_u *file_pat_to_reg_pat __ARGS((char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash));
! long read_eintr __ARGS((int fd, void *buf, size_t bufsize));
! long write_eintr __ARGS((int fd, void *buf, size_t bufsize));
  /* vim: set ft=c : */
--- 1,67 ----
  /* fileio.c */
! void filemess(buf_T *buf, char_u *name, char_u *s, int attr);
! int readfile(char_u *fname, char_u *sfname, linenr_T from, linenr_T lines_to_skip, linenr_T lines_to_read, exarg_T *eap, int flags);
! int prep_exarg(exarg_T *eap, buf_T *buf);
! void set_file_options(int set_options, exarg_T *eap);
! void set_forced_fenc(exarg_T *eap);
! int check_file_readonly(char_u *fname, int perm);
! int buf_write(buf_T *buf, char_u *fname, char_u *sfname, linenr_T start, linenr_T end, exarg_T *eap, int append, int forceit, int reset_changed, int filtering);
! void msg_add_fname(buf_T *buf, char_u *fname);
! void msg_add_lines(int insert_space, long lnum, off_t nchars);
! char_u *shorten_fname1(char_u *full_path);
! char_u *shorten_fname(char_u *full_path, char_u *dir_name);
! void shorten_fnames(int force);
! void shorten_filenames(char_u **fnames, int count);
! char_u *modname(char_u *fname, char_u *ext, int prepend_dot);
! char_u *buf_modname(int shortname, char_u *fname, char_u *ext, int prepend_dot);
! int vim_fgets(char_u *buf, int size, FILE *fp);
! int tag_fgets(char_u *buf, int size, FILE *fp);
! int vim_rename(char_u *from, char_u *to);
! int check_timestamps(int focus);
! int buf_check_timestamp(buf_T *buf, int focus);
! void buf_reload(buf_T *buf, int orig_mode);
! void buf_store_time(buf_T *buf, struct stat *st, char_u *fname);
! void write_lnum_adjust(linenr_T offset);
! int delete_recursive(char_u *name);
! void vim_deltempdir(void);
! char_u *vim_tempname(int extra_char, int keep);
! void forward_slash(char_u *fname);
! void aubuflocal_remove(buf_T *buf);
! int au_has_group(char_u *name);
! void do_augroup(char_u *arg, int del_group);
! void free_all_autocmds(void);
! int check_ei(void);
! char_u *au_event_disable(char *what);
! void au_event_restore(char_u *old_ei);
! void do_autocmd(char_u *arg, int forceit);
! int do_doautocmd(char_u *arg, int do_msg);
! void ex_doautoall(exarg_T *eap);
! int check_nomodeline(char_u **argp);
! void aucmd_prepbuf(aco_save_T *aco, buf_T *buf);
! void aucmd_restbuf(aco_save_T *aco);
! int apply_autocmds(event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf);
! int apply_autocmds_retval(event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, int *retval);
! int has_cursorhold(void);
! int trigger_cursorhold(void);
! int has_cursormoved(void);
! int has_cursormovedI(void);
! int has_textchanged(void);
! int has_textchangedI(void);
! int has_insertcharpre(void);
! int has_cmdundefined(void);
! int has_funcundefined(void);
! void block_autocmds(void);
! void unblock_autocmds(void);
! int is_autocmd_blocked(void);
! char_u *getnextac(int c, void *cookie, int indent);
! int has_autocmd(event_T event, char_u *sfname, buf_T *buf);
! char_u *get_augroup_name(expand_T *xp, int idx);
! char_u *set_context_in_autocmd(expand_T *xp, char_u *arg, int doautocmd);
! char_u *get_event_name(expand_T *xp, int idx);
! int autocmd_supported(char_u *name);
! int au_exists(char_u *arg);
! int match_file_list(char_u *list, char_u *sfname, char_u *ffname);
! char_u *file_pat_to_reg_pat(char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash);
! long read_eintr(int fd, void *buf, size_t bufsize);
! long write_eintr(int fd, void *buf, size_t bufsize);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/fold.pro	2013-08-10 13:37:12.000000000 +0200
--- src/proto/fold.pro	2016-01-19 13:13:01.559086196 +0100
***************
*** 1,41 ****
  /* fold.c */
! void copyFoldingState __ARGS((win_T *wp_from, win_T *wp_to));
! int hasAnyFolding __ARGS((win_T *win));
! int hasFolding __ARGS((linenr_T lnum, linenr_T *firstp, linenr_T *lastp));
! int hasFoldingWin __ARGS((win_T *win, linenr_T lnum, linenr_T *firstp, linenr_T *lastp, int cache, foldinfo_T *infop));
! int foldLevel __ARGS((linenr_T lnum));
! int lineFolded __ARGS((win_T *win, linenr_T lnum));
! long foldedCount __ARGS((win_T *win, linenr_T lnum, foldinfo_T *infop));
! int foldmethodIsManual __ARGS((win_T *wp));
! int foldmethodIsIndent __ARGS((win_T *wp));
! int foldmethodIsExpr __ARGS((win_T *wp));
! int foldmethodIsMarker __ARGS((win_T *wp));
! int foldmethodIsSyntax __ARGS((win_T *wp));
! int foldmethodIsDiff __ARGS((win_T *wp));
! void closeFold __ARGS((linenr_T lnum, long count));
! void closeFoldRecurse __ARGS((linenr_T lnum));
! void opFoldRange __ARGS((linenr_T first, linenr_T last, int opening, int recurse, int had_visual));
! void openFold __ARGS((linenr_T lnum, long count));
! void openFoldRecurse __ARGS((linenr_T lnum));
! void foldOpenCursor __ARGS((void));
! void newFoldLevel __ARGS((void));
! void foldCheckClose __ARGS((void));
! int foldManualAllowed __ARGS((int create));
! void foldCreate __ARGS((linenr_T start, linenr_T end));
! void deleteFold __ARGS((linenr_T start, linenr_T end, int recursive, int had_visual));
! void clearFolding __ARGS((win_T *win));
! void foldUpdate __ARGS((win_T *wp, linenr_T top, linenr_T bot));
! void foldUpdateAll __ARGS((win_T *win));
! int foldMoveTo __ARGS((int updown, int dir, long count));
! void foldInitWin __ARGS((win_T *new_win));
! int find_wl_entry __ARGS((win_T *win, linenr_T lnum));
! void foldAdjustVisual __ARGS((void));
! void foldAdjustCursor __ARGS((void));
! void cloneFoldGrowArray __ARGS((garray_T *from, garray_T *to));
! void deleteFoldRecurse __ARGS((garray_T *gap));
! void foldMarkAdjust __ARGS((win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after));
! int getDeepestNesting __ARGS((void));
! char_u *get_foldtext __ARGS((win_T *wp, linenr_T lnum, linenr_T lnume, foldinfo_T *foldinfo, char_u *buf));
! void foldtext_cleanup __ARGS((char_u *str));
! int put_folds __ARGS((FILE *fd, win_T *wp));
  /* vim: set ft=c : */
--- 1,41 ----
  /* fold.c */
! void copyFoldingState(win_T *wp_from, win_T *wp_to);
! int hasAnyFolding(win_T *win);
! int hasFolding(linenr_T lnum, linenr_T *firstp, linenr_T *lastp);
! int hasFoldingWin(win_T *win, linenr_T lnum, linenr_T *firstp, linenr_T *lastp, int cache, foldinfo_T *infop);
! int foldLevel(linenr_T lnum);
! int lineFolded(win_T *win, linenr_T lnum);
! long foldedCount(win_T *win, linenr_T lnum, foldinfo_T *infop);
! int foldmethodIsManual(win_T *wp);
! int foldmethodIsIndent(win_T *wp);
! int foldmethodIsExpr(win_T *wp);
! int foldmethodIsMarker(win_T *wp);
! int foldmethodIsSyntax(win_T *wp);
! int foldmethodIsDiff(win_T *wp);
! void closeFold(linenr_T lnum, long count);
! void closeFoldRecurse(linenr_T lnum);
! void opFoldRange(linenr_T first, linenr_T last, int opening, int recurse, int had_visual);
! void openFold(linenr_T lnum, long count);
! void openFoldRecurse(linenr_T lnum);
! void foldOpenCursor(void);
! void newFoldLevel(void);
! void foldCheckClose(void);
! int foldManualAllowed(int create);
! void foldCreate(linenr_T start, linenr_T end);
! void deleteFold(linenr_T start, linenr_T end, int recursive, int had_visual);
! void clearFolding(win_T *win);
! void foldUpdate(win_T *wp, linenr_T top, linenr_T bot);
! void foldUpdateAll(win_T *win);
! int foldMoveTo(int updown, int dir, long count);
! void foldInitWin(win_T *new_win);
! int find_wl_entry(win_T *win, linenr_T lnum);
! void foldAdjustVisual(void);
! void foldAdjustCursor(void);
! void cloneFoldGrowArray(garray_T *from, garray_T *to);
! void deleteFoldRecurse(garray_T *gap);
! void foldMarkAdjust(win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after);
! int getDeepestNesting(void);
! char_u *get_foldtext(win_T *wp, linenr_T lnum, linenr_T lnume, foldinfo_T *foldinfo, char_u *buf);
! void foldtext_cleanup(char_u *str);
! int put_folds(FILE *fd, win_T *wp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/getchar.pro	2014-07-30 16:00:45.539553496 +0200
--- src/proto/getchar.pro	2016-01-19 13:13:01.947082022 +0100
***************
*** 1,71 ****
  /* getchar.c */
! void free_buff __ARGS((buffheader_T *buf));
! char_u *get_recorded __ARGS((void));
! char_u *get_inserted __ARGS((void));
! int stuff_empty __ARGS((void));
! int readbuf1_empty __ARGS((void));
! void typeahead_noflush __ARGS((int c));
! void flush_buffers __ARGS((int flush_typeahead));
! void ResetRedobuff __ARGS((void));
! void CancelRedo __ARGS((void));
! void saveRedobuff __ARGS((void));
! void restoreRedobuff __ARGS((void));
! void AppendToRedobuff __ARGS((char_u *s));
! void AppendToRedobuffLit __ARGS((char_u *str, int len));
! void AppendCharToRedobuff __ARGS((int c));
! void AppendNumberToRedobuff __ARGS((long n));
! void stuffReadbuff __ARGS((char_u *s));
! void stuffRedoReadbuff __ARGS((char_u *s));
! void stuffReadbuffLen __ARGS((char_u *s, long len));
! void stuffReadbuffSpec __ARGS((char_u *s));
! void stuffcharReadbuff __ARGS((int c));
! void stuffnumReadbuff __ARGS((long n));
! int start_redo __ARGS((long count, int old_redo));
! int start_redo_ins __ARGS((void));
! void stop_redo_ins __ARGS((void));
! int ins_typebuf __ARGS((char_u *str, int noremap, int offset, int nottyped, int silent));
! void ins_char_typebuf __ARGS((int c));
! int typebuf_changed __ARGS((int tb_change_cnt));
! int typebuf_typed __ARGS((void));
! int typebuf_maplen __ARGS((void));
! void del_typebuf __ARGS((int len, int offset));
! int alloc_typebuf __ARGS((void));
! void free_typebuf __ARGS((void));
! int save_typebuf __ARGS((void));
! void save_typeahead __ARGS((tasave_T *tp));
! void restore_typeahead __ARGS((tasave_T *tp));
! void openscript __ARGS((char_u *name, int directly));
! void close_all_scripts __ARGS((void));
! int using_script __ARGS((void));
! void before_blocking __ARGS((void));
! void updatescript __ARGS((int c));
! int vgetc __ARGS((void));
! int safe_vgetc __ARGS((void));
! int plain_vgetc __ARGS((void));
! int vpeekc __ARGS((void));
! int vpeekc_nomap __ARGS((void));
! int vpeekc_any __ARGS((void));
! int char_avail __ARGS((void));
! void vungetc __ARGS((int c));
! int inchar __ARGS((char_u *buf, int maxlen, long wait_time, int tb_change_cnt));
! int fix_input_buffer __ARGS((char_u *buf, int len, int script));
! int input_available __ARGS((void));
! int do_map __ARGS((int maptype, char_u *arg, int mode, int abbrev));
! int get_map_mode __ARGS((char_u **cmdp, int forceit));
! void map_clear __ARGS((char_u *cmdp, char_u *arg, int forceit, int abbr));
! void map_clear_int __ARGS((buf_T *buf, int mode, int local, int abbr));
! char_u *map_mode_to_chars __ARGS((int mode));
! int map_to_exists __ARGS((char_u *str, char_u *modechars, int abbr));
! int map_to_exists_mode __ARGS((char_u *rhs, int mode, int abbr));
! char_u *set_context_in_map_cmd __ARGS((expand_T *xp, char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, cmdidx_T cmdidx));
! int ExpandMappings __ARGS((regmatch_T *regmatch, int *num_file, char_u ***file));
! int check_abbr __ARGS((int c, char_u *ptr, int col, int mincol));
! char_u *vim_strsave_escape_csi __ARGS((char_u *p));
! void vim_unescape_csi __ARGS((char_u *p));
! int makemap __ARGS((FILE *fd, buf_T *buf));
! int put_escstr __ARGS((FILE *fd, char_u *strstart, int what));
! void check_map_keycodes __ARGS((void));
! char_u *check_map __ARGS((char_u *keys, int mode, int exact, int ign_mod, int abbr, mapblock_T **mp_ptr, int *local_ptr));
! void init_mappings __ARGS((void));
! void add_map __ARGS((char_u *map, int mode));
  /* vim: set ft=c : */
--- 1,71 ----
  /* getchar.c */
! void free_buff(buffheader_T *buf);
! char_u *get_recorded(void);
! char_u *get_inserted(void);
! int stuff_empty(void);
! int readbuf1_empty(void);
! void typeahead_noflush(int c);
! void flush_buffers(int flush_typeahead);
! void ResetRedobuff(void);
! void CancelRedo(void);
! void saveRedobuff(void);
! void restoreRedobuff(void);
! void AppendToRedobuff(char_u *s);
! void AppendToRedobuffLit(char_u *str, int len);
! void AppendCharToRedobuff(int c);
! void AppendNumberToRedobuff(long n);
! void stuffReadbuff(char_u *s);
! void stuffRedoReadbuff(char_u *s);
! void stuffReadbuffLen(char_u *s, long len);
! void stuffReadbuffSpec(char_u *s);
! void stuffcharReadbuff(int c);
! void stuffnumReadbuff(long n);
! int start_redo(long count, int old_redo);
! int start_redo_ins(void);
! void stop_redo_ins(void);
! int ins_typebuf(char_u *str, int noremap, int offset, int nottyped, int silent);
! void ins_char_typebuf(int c);
! int typebuf_changed(int tb_change_cnt);
! int typebuf_typed(void);
! int typebuf_maplen(void);
! void del_typebuf(int len, int offset);
! int alloc_typebuf(void);
! void free_typebuf(void);
! int save_typebuf(void);
! void save_typeahead(tasave_T *tp);
! void restore_typeahead(tasave_T *tp);
! void openscript(char_u *name, int directly);
! void close_all_scripts(void);
! int using_script(void);
! void before_blocking(void);
! void updatescript(int c);
! int vgetc(void);
! int safe_vgetc(void);
! int plain_vgetc(void);
! int vpeekc(void);
! int vpeekc_nomap(void);
! int vpeekc_any(void);
! int char_avail(void);
! void vungetc(int c);
! int inchar(char_u *buf, int maxlen, long wait_time, int tb_change_cnt);
! int fix_input_buffer(char_u *buf, int len, int script);
! int input_available(void);
! int do_map(int maptype, char_u *arg, int mode, int abbrev);
! int get_map_mode(char_u **cmdp, int forceit);
! void map_clear(char_u *cmdp, char_u *arg, int forceit, int abbr);
! void map_clear_int(buf_T *buf, int mode, int local, int abbr);
! char_u *map_mode_to_chars(int mode);
! int map_to_exists(char_u *str, char_u *modechars, int abbr);
! int map_to_exists_mode(char_u *rhs, int mode, int abbr);
! char_u *set_context_in_map_cmd(expand_T *xp, char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, cmdidx_T cmdidx);
! int ExpandMappings(regmatch_T *regmatch, int *num_file, char_u ***file);
! int check_abbr(int c, char_u *ptr, int col, int mincol);
! char_u *vim_strsave_escape_csi(char_u *p);
! void vim_unescape_csi(char_u *p);
! int makemap(FILE *fd, buf_T *buf);
! int put_escstr(FILE *fd, char_u *strstart, int what);
! void check_map_keycodes(void);
! char_u *check_map(char_u *keys, int mode, int exact, int ign_mod, int abbr, mapblock_T **mp_ptr, int *local_ptr);
! void init_mappings(void);
! void add_map(char_u *map, int mode);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_athena.pro	2013-08-10 13:37:34.000000000 +0200
--- src/proto/gui_athena.pro	2016-01-19 13:13:19.806889825 +0100
***************
*** 1,31 ****
  /* gui_athena.c */
! void gui_x11_create_widgets __ARGS((void));
! void gui_x11_destroy_widgets __ARGS((void));
! void gui_mch_set_toolbar_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! void gui_x11_set_back_color __ARGS((void));
! void gui_mch_enable_menu __ARGS((int flag));
! void gui_mch_set_menu_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_new_menu_font __ARGS((void));
! void gui_mch_new_tooltip_font __ARGS((void));
! void gui_mch_new_tooltip_colors __ARGS((void));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_show_toolbar __ARGS((int showit));
! int gui_mch_compute_toolbar_height __ARGS((void));
! void gui_mch_get_toolbar_colors __ARGS((Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp));
! void gui_mch_toggle_tearoffs __ARGS((int enable));
! void gui_mch_new_menu_colors __ARGS((void));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_mch_def_colors __ARGS((void));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, long val, long size, long max));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! void gui_mch_set_scrollbar_colors __ARGS((scrollbar_T *sb));
! Window gui_x11_get_wid __ARGS((void));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd));
  /* vim: set ft=c : */
--- 1,31 ----
  /* gui_athena.c */
! void gui_x11_create_widgets(void);
! void gui_x11_destroy_widgets(void);
! void gui_mch_set_toolbar_pos(int x, int y, int w, int h);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! void gui_x11_set_back_color(void);
! void gui_mch_enable_menu(int flag);
! void gui_mch_set_menu_pos(int x, int y, int w, int h);
! void gui_mch_add_menu(vimmenu_T *menu, int idx);
! void gui_mch_new_menu_font(void);
! void gui_mch_new_tooltip_font(void);
! void gui_mch_new_tooltip_colors(void);
! void gui_mch_add_menu_item(vimmenu_T *menu, int idx);
! void gui_mch_show_toolbar(int showit);
! int gui_mch_compute_toolbar_height(void);
! void gui_mch_get_toolbar_colors(Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp);
! void gui_mch_toggle_tearoffs(int enable);
! void gui_mch_new_menu_colors(void);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_mch_def_colors(void);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! void gui_mch_set_scrollbar_colors(scrollbar_T *sb);
! Window gui_x11_get_wid(void);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_beval.pro	2013-08-10 13:37:30.000000000 +0200
--- src/proto/gui_beval.pro	2016-01-19 13:13:17.014919870 +0100
***************
*** 1,11 ****
  /* gui_beval.c */
! void general_beval_cb __ARGS((BalloonEval *beval, int state));
! BalloonEval *gui_mch_create_beval_area __ARGS((void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData));
! void gui_mch_destroy_beval_area __ARGS((BalloonEval *beval));
! void gui_mch_enable_beval_area __ARGS((BalloonEval *beval));
! void gui_mch_disable_beval_area __ARGS((BalloonEval *beval));
! BalloonEval *gui_mch_currently_showing_beval __ARGS((void));
! int get_beval_info __ARGS((BalloonEval *beval, int getword, win_T **winp, linenr_T *lnump, char_u **textp, int *colp));
! void gui_mch_post_balloon __ARGS((BalloonEval *beval, char_u *mesg));
! void gui_mch_unpost_balloon __ARGS((BalloonEval *beval));
  /* vim: set ft=c : */
--- 1,11 ----
  /* gui_beval.c */
! void general_beval_cb(BalloonEval *beval, int state);
! BalloonEval *gui_mch_create_beval_area(void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData);
! void gui_mch_destroy_beval_area(BalloonEval *beval);
! void gui_mch_enable_beval_area(BalloonEval *beval);
! void gui_mch_disable_beval_area(BalloonEval *beval);
! BalloonEval *gui_mch_currently_showing_beval(void);
! int get_beval_info(BalloonEval *beval, int getword, win_T **winp, linenr_T *lnump, char_u **textp, int *colp);
! void gui_mch_post_balloon(BalloonEval *beval, char_u *mesg);
! void gui_mch_unpost_balloon(BalloonEval *beval);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_gtk.pro	2013-08-10 13:37:32.000000000 +0200
--- src/proto/gui_gtk.pro	2016-01-19 13:13:18.594902867 +0100
***************
*** 1,22 ****
  /* gui_gtk.c */
! void gui_gtk_register_stock_icons __ARGS((void));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! void gui_gtk_set_mnemonics __ARGS((int enable));
! void gui_mch_toggle_tearoffs __ARGS((int enable));
! void gui_mch_menu_set_tip __ARGS((vimmenu_T *menu));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, long val, long size, long max));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter));
! char_u *gui_mch_browsedir __ARGS((char_u *title, char_u *initdir));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int def_but, char_u *textfield, int ex_cmd));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_make_popup __ARGS((char_u *path_name, int mouse_pos));
! void gui_mch_find_dialog __ARGS((exarg_T *eap));
! void gui_mch_replace_dialog __ARGS((exarg_T *eap));
! void ex_helpfind __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,22 ----
  /* gui_gtk.c */
! void gui_gtk_register_stock_icons(void);
! void gui_mch_add_menu(vimmenu_T *menu, int idx);
! void gui_mch_add_menu_item(vimmenu_T *menu, int idx);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! void gui_gtk_set_mnemonics(int enable);
! void gui_mch_toggle_tearoffs(int enable);
! void gui_mch_menu_set_tip(vimmenu_T *menu);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
! char_u *gui_mch_browsedir(char_u *title, char_u *initdir);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *buttons, int def_but, char_u *textfield, int ex_cmd);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_make_popup(char_u *path_name, int mouse_pos);
! void gui_mch_find_dialog(exarg_T *eap);
! void gui_mch_replace_dialog(exarg_T *eap);
! void ex_helpfind(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_gtk_x11.pro	2013-08-10 13:37:34.000000000 +0200
--- src/proto/gui_gtk_x11.pro	2016-01-19 13:13:20.186885736 +0100
***************
*** 1,75 ****
  /* gui_gtk_x11.c */
! void gui_mch_prepare __ARGS((int *argc, char **argv));
! void gui_mch_free_all __ARGS((void));
! void gui_mch_set_blinking __ARGS((long waittime, long on, long off));
! void gui_mch_stop_blink __ARGS((void));
! void gui_mch_start_blink __ARGS((void));
! int gui_mch_early_init_check __ARGS((void));
! int gui_mch_init_check __ARGS((void));
! void gui_mch_show_tabline __ARGS((int showit));
! int gui_mch_showing_tabline __ARGS((void));
! void gui_mch_update_tabline __ARGS((void));
! void gui_mch_set_curtab __ARGS((int nr));
! void gui_gtk_set_selection_targets __ARGS((void));
! void gui_gtk_set_dnd_targets __ARGS((void));
! int gui_mch_init __ARGS((void));
! void gui_mch_forked __ARGS((void));
! void gui_mch_new_colors __ARGS((void));
! int gui_mch_open __ARGS((void));
! void gui_mch_exit __ARGS((int rc));
! int gui_mch_get_winpos __ARGS((int *x, int *y));
! void gui_mch_set_winpos __ARGS((int x, int y));
! int gui_mch_maximized __ARGS((void));
! void gui_mch_unmaximize __ARGS((void));
! void gui_mch_newfont __ARGS((void));
! void gui_mch_set_shellsize __ARGS((int width, int height, int min_width, int min_height, int base_width, int base_height, int direction));
! void gui_mch_get_screen_dimensions __ARGS((int *screen_w, int *screen_h));
! void gui_mch_settitle __ARGS((char_u *title, char_u *icon));
! void gui_mch_enable_menu __ARGS((int showit));
! void gui_mch_show_toolbar __ARGS((int showit));
! int gui_mch_adjust_charheight __ARGS((void));
! char_u *gui_mch_font_dialog __ARGS((char_u *oldval));
! int gui_mch_init_font __ARGS((char_u *font_name, int fontset));
! GuiFont gui_mch_get_font __ARGS((char_u *name, int report_error));
! char_u *gui_mch_get_fontname __ARGS((GuiFont font, char_u *name));
! void gui_mch_free_font __ARGS((GuiFont font));
! guicolor_T gui_mch_get_color __ARGS((char_u *name));
! void gui_mch_set_fg_color __ARGS((guicolor_T color));
! void gui_mch_set_bg_color __ARGS((guicolor_T color));
! void gui_mch_set_sp_color __ARGS((guicolor_T color));
! int gui_gtk2_draw_string __ARGS((int row, int col, char_u *s, int len, int flags));
! int gui_mch_haskey __ARGS((char_u *name));
! int gui_get_x11_windis __ARGS((Window *win, Display **dis));
! Display *gui_mch_get_display __ARGS((void));
! void gui_mch_beep __ARGS((void));
! void gui_mch_flash __ARGS((int msec));
! void gui_mch_invert_rectangle __ARGS((int r, int c, int nr, int nc));
! void gui_mch_iconify __ARGS((void));
! void gui_mch_set_foreground __ARGS((void));
! void gui_mch_draw_hollow_cursor __ARGS((guicolor_T color));
! void gui_mch_draw_part_cursor __ARGS((int w, int h, guicolor_T color));
! void gui_mch_update __ARGS((void));
! int gui_mch_wait_for_chars __ARGS((long wtime));
! void gui_mch_flush __ARGS((void));
! void gui_mch_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_mch_clear_all __ARGS((void));
! void gui_mch_delete_lines __ARGS((int row, int num_lines));
! void gui_mch_insert_lines __ARGS((int row, int num_lines));
! void clip_mch_request_selection __ARGS((VimClipboard *cbd));
! void clip_mch_lose_selection __ARGS((VimClipboard *cbd));
! int clip_mch_own_selection __ARGS((VimClipboard *cbd));
! void clip_mch_set_selection __ARGS((VimClipboard *cbd));
! int clip_gtk_owner_exists __ARGS((VimClipboard *cbd));
! void gui_mch_menu_grey __ARGS((vimmenu_T *menu, int grey));
! void gui_mch_menu_hidden __ARGS((vimmenu_T *menu, int hidden));
! void gui_mch_draw_menubar __ARGS((void));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! long_u gui_mch_get_rgb __ARGS((guicolor_T pixel));
! void gui_mch_getmouse __ARGS((int *x, int *y));
! void gui_mch_setmouse __ARGS((int x, int y));
! void gui_mch_mousehide __ARGS((int hide));
! void mch_set_mouse_shape __ARGS((int shape));
! void gui_mch_drawsign __ARGS((int row, int col, int typenr));
! void *gui_mch_register_sign __ARGS((char_u *signfile));
! void gui_mch_destroy_sign __ARGS((void *sign));
  /* vim: set ft=c : */
--- 1,75 ----
  /* gui_gtk_x11.c */
! void gui_mch_prepare(int *argc, char **argv);
! void gui_mch_free_all(void);
! void gui_mch_set_blinking(long waittime, long on, long off);
! void gui_mch_stop_blink(void);
! void gui_mch_start_blink(void);
! int gui_mch_early_init_check(void);
! int gui_mch_init_check(void);
! void gui_mch_show_tabline(int showit);
! int gui_mch_showing_tabline(void);
! void gui_mch_update_tabline(void);
! void gui_mch_set_curtab(int nr);
! void gui_gtk_set_selection_targets(void);
! void gui_gtk_set_dnd_targets(void);
! int gui_mch_init(void);
! void gui_mch_forked(void);
! void gui_mch_new_colors(void);
! int gui_mch_open(void);
! void gui_mch_exit(int rc);
! int gui_mch_get_winpos(int *x, int *y);
! void gui_mch_set_winpos(int x, int y);
! int gui_mch_maximized(void);
! void gui_mch_unmaximize(void);
! void gui_mch_newfont(void);
! void gui_mch_set_shellsize(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction);
! void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
! void gui_mch_settitle(char_u *title, char_u *icon);
! void gui_mch_enable_menu(int showit);
! void gui_mch_show_toolbar(int showit);
! int gui_mch_adjust_charheight(void);
! char_u *gui_mch_font_dialog(char_u *oldval);
! int gui_mch_init_font(char_u *font_name, int fontset);
! GuiFont gui_mch_get_font(char_u *name, int report_error);
! char_u *gui_mch_get_fontname(GuiFont font, char_u *name);
! void gui_mch_free_font(GuiFont font);
! guicolor_T gui_mch_get_color(char_u *name);
! void gui_mch_set_fg_color(guicolor_T color);
! void gui_mch_set_bg_color(guicolor_T color);
! void gui_mch_set_sp_color(guicolor_T color);
! int gui_gtk2_draw_string(int row, int col, char_u *s, int len, int flags);
! int gui_mch_haskey(char_u *name);
! int gui_get_x11_windis(Window *win, Display **dis);
! Display *gui_mch_get_display(void);
! void gui_mch_beep(void);
! void gui_mch_flash(int msec);
! void gui_mch_invert_rectangle(int r, int c, int nr, int nc);
! void gui_mch_iconify(void);
! void gui_mch_set_foreground(void);
! void gui_mch_draw_hollow_cursor(guicolor_T color);
! void gui_mch_draw_part_cursor(int w, int h, guicolor_T color);
! void gui_mch_update(void);
! int gui_mch_wait_for_chars(long wtime);
! void gui_mch_flush(void);
! void gui_mch_clear_block(int row1, int col1, int row2, int col2);
! void gui_mch_clear_all(void);
! void gui_mch_delete_lines(int row, int num_lines);
! void gui_mch_insert_lines(int row, int num_lines);
! void clip_mch_request_selection(VimClipboard *cbd);
! void clip_mch_lose_selection(VimClipboard *cbd);
! int clip_mch_own_selection(VimClipboard *cbd);
! void clip_mch_set_selection(VimClipboard *cbd);
! int clip_gtk_owner_exists(VimClipboard *cbd);
! void gui_mch_menu_grey(vimmenu_T *menu, int grey);
! void gui_mch_menu_hidden(vimmenu_T *menu, int hidden);
! void gui_mch_draw_menubar(void);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! long_u gui_mch_get_rgb(guicolor_T pixel);
! void gui_mch_getmouse(int *x, int *y);
! void gui_mch_setmouse(int x, int y);
! void gui_mch_mousehide(int hide);
! void mch_set_mouse_shape(int shape);
! void gui_mch_drawsign(int row, int col, int typenr);
! void *gui_mch_register_sign(char_u *signfile);
! void gui_mch_destroy_sign(void *sign);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_motif.pro	2013-08-10 13:37:33.000000000 +0200
--- src/proto/gui_motif.pro	2016-01-19 13:13:18.998898520 +0100
***************
*** 1,46 ****
  /* gui_motif.c */
! void gui_x11_create_widgets __ARGS((void));
! void gui_x11_destroy_widgets __ARGS((void));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! void gui_x11_set_back_color __ARGS((void));
! void manage_centered __ARGS((Widget dialog_child));
! XmFontList gui_motif_create_fontlist __ARGS((XFontStruct *font));
! XmFontList gui_motif_fontset2fontlist __ARGS((XFontSet *fontset));
! void gui_mch_enable_menu __ARGS((int flag));
! void gui_motif_set_mnemonics __ARGS((int enable));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_toggle_tearoffs __ARGS((int enable));
! int gui_mch_text_area_extra_height __ARGS((void));
! void gui_mch_compute_menu_height __ARGS((Widget id));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int idx));
! void gui_motif_update_mousemodel __ARGS((vimmenu_T *menu));
! void gui_mch_new_menu_colors __ARGS((void));
! void gui_mch_new_menu_font __ARGS((void));
! void gui_mch_new_tooltip_font __ARGS((void));
! void gui_mch_new_tooltip_colors __ARGS((void));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_mch_def_colors __ARGS((void));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, long val, long size, long max));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! void gui_mch_set_scrollbar_colors __ARGS((scrollbar_T *sb));
! Window gui_x11_get_wid __ARGS((void));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *button_names, int dfltbutton, char_u *textfield, int ex_cmd));
! void gui_mch_enable_footer __ARGS((int showit));
! void gui_mch_set_footer __ARGS((char_u *s));
! void gui_mch_show_toolbar __ARGS((int showit));
! int gui_mch_compute_toolbar_height __ARGS((void));
! void motif_get_toolbar_colors __ARGS((Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp));
! void gui_mch_show_tabline __ARGS((int showit));
! int gui_mch_showing_tabline __ARGS((void));
! void gui_mch_update_tabline __ARGS((void));
! void gui_mch_set_curtab __ARGS((int nr));
! void gui_motif_menu_fontlist __ARGS((Widget id));
! void gui_mch_find_dialog __ARGS((exarg_T *eap));
! void gui_mch_replace_dialog __ARGS((exarg_T *eap));
! void gui_motif_synch_fonts __ARGS((void));
  /* vim: set ft=c : */
--- 1,46 ----
  /* gui_motif.c */
! void gui_x11_create_widgets(void);
! void gui_x11_destroy_widgets(void);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! void gui_x11_set_back_color(void);
! void manage_centered(Widget dialog_child);
! XmFontList gui_motif_create_fontlist(XFontStruct *font);
! XmFontList gui_motif_fontset2fontlist(XFontSet *fontset);
! void gui_mch_enable_menu(int flag);
! void gui_motif_set_mnemonics(int enable);
! void gui_mch_add_menu(vimmenu_T *menu, int idx);
! void gui_mch_toggle_tearoffs(int enable);
! int gui_mch_text_area_extra_height(void);
! void gui_mch_compute_menu_height(Widget id);
! void gui_mch_add_menu_item(vimmenu_T *menu, int idx);
! void gui_motif_update_mousemodel(vimmenu_T *menu);
! void gui_mch_new_menu_colors(void);
! void gui_mch_new_menu_font(void);
! void gui_mch_new_tooltip_font(void);
! void gui_mch_new_tooltip_colors(void);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_mch_def_colors(void);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! void gui_mch_set_scrollbar_colors(scrollbar_T *sb);
! Window gui_x11_get_wid(void);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *button_names, int dfltbutton, char_u *textfield, int ex_cmd);
! void gui_mch_enable_footer(int showit);
! void gui_mch_set_footer(char_u *s);
! void gui_mch_show_toolbar(int showit);
! int gui_mch_compute_toolbar_height(void);
! void motif_get_toolbar_colors(Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp);
! void gui_mch_show_tabline(int showit);
! int gui_mch_showing_tabline(void);
! void gui_mch_update_tabline(void);
! void gui_mch_set_curtab(int nr);
! void gui_motif_menu_fontlist(Widget id);
! void gui_mch_find_dialog(exarg_T *eap);
! void gui_mch_replace_dialog(exarg_T *eap);
! void gui_motif_synch_fonts(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_photon.pro	2013-08-10 13:37:36.000000000 +0200
--- src/proto/gui_photon.pro	2016-01-19 13:13:21.758868819 +0100
***************
*** 1,67 ****
  /* gui_photon.c */
! void gui_ph_encoding_changed __ARGS((int new_encoding));
! void gui_mch_prepare __ARGS((int *argc, char **argv));
! int gui_mch_init __ARGS((void));
! int gui_mch_init_check __ARGS((void));
! int gui_mch_open __ARGS((void));
! void gui_mch_exit __ARGS((int rc));
! void gui_mch_update __ARGS((void));
! int gui_mch_wait_for_chars __ARGS((int wtime));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *default_name, char_u *ext, char_u *initdir, char_u *filter));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int default_button, char_u *textfield, int ex_cmd));
! int gui_mch_get_winpos __ARGS((int *x, int *y));
! void gui_mch_set_winpos __ARGS((int x, int y));
! void gui_mch_set_shellsize __ARGS((int width, int height, int min_width, int min_height, int base_width, int base_height, int direction));
! void gui_mch_get_screen_dimensions __ARGS((int *screen_w, int *screen_h));
! void gui_mch_iconify __ARGS((void));
! void gui_mch_set_foreground __ARGS((void));
! void gui_mch_settitle __ARGS((char_u *title, char_u *icon));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, int val, int size, int max));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! void mch_set_mouse_shape __ARGS((int shape));
! void gui_mch_mousehide __ARGS((int hide));
! void gui_mch_getmouse __ARGS((int *x, int *y));
! void gui_mch_setmouse __ARGS((int x, int y));
! long_u gui_mch_get_rgb __ARGS((guicolor_T pixel));
! void gui_mch_new_colors __ARGS((void));
! guicolor_T gui_mch_get_color __ARGS((char_u *name));
! void gui_mch_set_fg_color __ARGS((guicolor_T color));
! void gui_mch_set_bg_color __ARGS((guicolor_T color));
! void gui_mch_set_sp_color __ARGS((guicolor_T color));
! void gui_mch_invert_rectangle __ARGS((int row, int col, int nr, int nc));
! void gui_mch_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_mch_clear_all __ARGS((void));
! void gui_mch_delete_lines __ARGS((int row, int num_lines));
! void gui_mch_insert_lines __ARGS((int row, int num_lines));
! void gui_mch_draw_string __ARGS((int row, int col, char_u *s, int len, int flags));
! void gui_mch_draw_hollow_cursor __ARGS((guicolor_T color));
! void gui_mch_draw_part_cursor __ARGS((int w, int h, guicolor_T color));
! void gui_mch_set_blinking __ARGS((long wait, long on, long off));
! void gui_mch_start_blink __ARGS((void));
! void gui_mch_stop_blink __ARGS((void));
! void gui_mch_beep __ARGS((void));
! void gui_mch_flash __ARGS((int msec));
! void gui_mch_flush __ARGS((void));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! int gui_mch_haskey __ARGS((char_u *name));
! void gui_mch_enable_menu __ARGS((int flag));
! void gui_mch_set_menu_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int index));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int index));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_menu_grey __ARGS((vimmenu_T *menu, int grey));
! void gui_mch_menu_hidden __ARGS((vimmenu_T *menu, int hidden));
! void gui_mch_draw_menubar __ARGS((void));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_mch_toggle_tearoffs __ARGS((int enable));
! void gui_mch_show_toolbar __ARGS((int showit));
! int gui_mch_init_font __ARGS((char_u *vim_font_name, int fontset));
! int gui_mch_adjust_charheight __ARGS((void));
! GuiFont gui_mch_get_font __ARGS((char_u *vim_font_name, int report_error));
! char_u *gui_mch_get_fontname __ARGS((GuiFont font, char_u *name));
! void gui_mch_set_font __ARGS((GuiFont font));
! void gui_mch_free_font __ARGS((GuiFont font));
  /* vim: set ft=c : */
--- 1,67 ----
  /* gui_photon.c */
! void gui_ph_encoding_changed(int new_encoding);
! void gui_mch_prepare(int *argc, char **argv);
! int gui_mch_init(void);
! int gui_mch_init_check(void);
! int gui_mch_open(void);
! void gui_mch_exit(int rc);
! void gui_mch_update(void);
! int gui_mch_wait_for_chars(int wtime);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *default_name, char_u *ext, char_u *initdir, char_u *filter);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *buttons, int default_button, char_u *textfield, int ex_cmd);
! int gui_mch_get_winpos(int *x, int *y);
! void gui_mch_set_winpos(int x, int y);
! void gui_mch_set_shellsize(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction);
! void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
! void gui_mch_iconify(void);
! void gui_mch_set_foreground(void);
! void gui_mch_settitle(char_u *title, char_u *icon);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, int val, int size, int max);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! void mch_set_mouse_shape(int shape);
! void gui_mch_mousehide(int hide);
! void gui_mch_getmouse(int *x, int *y);
! void gui_mch_setmouse(int x, int y);
! long_u gui_mch_get_rgb(guicolor_T pixel);
! void gui_mch_new_colors(void);
! guicolor_T gui_mch_get_color(char_u *name);
! void gui_mch_set_fg_color(guicolor_T color);
! void gui_mch_set_bg_color(guicolor_T color);
! void gui_mch_set_sp_color(guicolor_T color);
! void gui_mch_invert_rectangle(int row, int col, int nr, int nc);
! void gui_mch_clear_block(int row1, int col1, int row2, int col2);
! void gui_mch_clear_all(void);
! void gui_mch_delete_lines(int row, int num_lines);
! void gui_mch_insert_lines(int row, int num_lines);
! void gui_mch_draw_string(int row, int col, char_u *s, int len, int flags);
! void gui_mch_draw_hollow_cursor(guicolor_T color);
! void gui_mch_draw_part_cursor(int w, int h, guicolor_T color);
! void gui_mch_set_blinking(long wait, long on, long off);
! void gui_mch_start_blink(void);
! void gui_mch_stop_blink(void);
! void gui_mch_beep(void);
! void gui_mch_flash(int msec);
! void gui_mch_flush(void);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! int gui_mch_haskey(char_u *name);
! void gui_mch_enable_menu(int flag);
! void gui_mch_set_menu_pos(int x, int y, int w, int h);
! void gui_mch_add_menu(vimmenu_T *menu, int index);
! void gui_mch_add_menu_item(vimmenu_T *menu, int index);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_menu_grey(vimmenu_T *menu, int grey);
! void gui_mch_menu_hidden(vimmenu_T *menu, int hidden);
! void gui_mch_draw_menubar(void);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_mch_toggle_tearoffs(int enable);
! void gui_mch_show_toolbar(int showit);
! int gui_mch_init_font(char_u *vim_font_name, int fontset);
! int gui_mch_adjust_charheight(void);
! GuiFont gui_mch_get_font(char_u *vim_font_name, int report_error);
! char_u *gui_mch_get_fontname(GuiFont font, char_u *name);
! void gui_mch_set_font(GuiFont font);
! void gui_mch_free_font(GuiFont font);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui.pro	2013-08-10 13:37:32.000000000 +0200
--- src/proto/gui.pro	2016-01-19 13:13:18.206907044 +0100
***************
*** 1,66 ****
  /* gui.c */
! void gui_start __ARGS((void));
! void gui_prepare __ARGS((int *argc, char **argv));
! int gui_init_check __ARGS((void));
! void gui_init __ARGS((void));
! void gui_exit __ARGS((int rc));
! void gui_shell_closed __ARGS((void));
! int gui_init_font __ARGS((char_u *font_list, int fontset));
! int gui_get_wide_font __ARGS((void));
! void gui_set_cursor __ARGS((int row, int col));
! void gui_update_cursor __ARGS((int force, int clear_selection));
! void gui_position_menu __ARGS((void));
! int gui_get_base_width __ARGS((void));
! int gui_get_base_height __ARGS((void));
! void gui_resize_shell __ARGS((int pixel_width, int pixel_height));
! void gui_may_resize_shell __ARGS((void));
! int gui_get_shellsize __ARGS((void));
! void gui_set_shellsize __ARGS((int mustset, int fit_to_display, int direction));
! void gui_new_shellsize __ARGS((void));
! void gui_reset_scroll_region __ARGS((void));
! void gui_start_highlight __ARGS((int mask));
! void gui_stop_highlight __ARGS((int mask));
! void gui_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_update_cursor_later __ARGS((void));
! void gui_write __ARGS((char_u *s, int len));
! void gui_dont_update_cursor __ARGS((void));
! void gui_can_update_cursor __ARGS((void));
! int gui_outstr_nowrap __ARGS((char_u *s, int len, int flags, guicolor_T fg, guicolor_T bg, int back));
! void gui_undraw_cursor __ARGS((void));
! void gui_redraw __ARGS((int x, int y, int w, int h));
! int gui_redraw_block __ARGS((int row1, int col1, int row2, int col2, int flags));
! int gui_wait_for_chars __ARGS((long wtime));
! void gui_send_mouse_event __ARGS((int button, int x, int y, int repeated_click, int_u modifiers));
! int gui_xy2colrow __ARGS((int x, int y, int *colp));
! void gui_menu_cb __ARGS((vimmenu_T *menu));
! void gui_init_which_components __ARGS((char_u *oldval));
! int gui_use_tabline __ARGS((void));
! void gui_update_tabline __ARGS((void));
! void get_tabline_label __ARGS((tabpage_T *tp, int tooltip));
! int send_tabline_event __ARGS((int nr));
! void send_tabline_menu_event __ARGS((int tabidx, int event));
! void gui_remove_scrollbars __ARGS((void));
! void gui_create_scrollbar __ARGS((scrollbar_T *sb, int type, win_T *wp));
! scrollbar_T *gui_find_scrollbar __ARGS((long ident));
! void gui_drag_scrollbar __ARGS((scrollbar_T *sb, long value, int still_dragging));
! void gui_may_update_scrollbars __ARGS((void));
! void gui_update_scrollbars __ARGS((int force));
! int gui_do_scroll __ARGS((void));
! int gui_do_horiz_scroll __ARGS((long_u leftcol, int compute_longest_lnum));
! void gui_check_colors __ARGS((void));
! guicolor_T gui_get_color __ARGS((char_u *name));
! int gui_get_lightness __ARGS((guicolor_T pixel));
! void gui_new_scrollbar_colors __ARGS((void));
! void gui_focus_change __ARGS((int in_focus));
! void gui_mouse_moved __ARGS((int x, int y));
! void gui_mouse_correct __ARGS((void));
! void ex_gui __ARGS((exarg_T *eap));
! int gui_find_bitmap __ARGS((char_u *name, char_u *buffer, char *ext));
! void gui_find_iconfile __ARGS((char_u *name, char_u *buffer, char *ext));
! void display_errors __ARGS((void));
! int no_console_input __ARGS((void));
! void gui_update_screen __ARGS((void));
! char_u *get_find_dialog_text __ARGS((char_u *arg, int *wwordp, int *mcasep));
! int gui_do_findrepl __ARGS((int flags, char_u *find_text, char_u *repl_text, int down));
! void gui_handle_drop __ARGS((int x, int y, int_u modifiers, char_u **fnames, int count));
  /* vim: set ft=c : */
--- 1,66 ----
  /* gui.c */
! void gui_start(void);
! void gui_prepare(int *argc, char **argv);
! int gui_init_check(void);
! void gui_init(void);
! void gui_exit(int rc);
! void gui_shell_closed(void);
! int gui_init_font(char_u *font_list, int fontset);
! int gui_get_wide_font(void);
! void gui_set_cursor(int row, int col);
! void gui_update_cursor(int force, int clear_selection);
! void gui_position_menu(void);
! int gui_get_base_width(void);
! int gui_get_base_height(void);
! void gui_resize_shell(int pixel_width, int pixel_height);
! void gui_may_resize_shell(void);
! int gui_get_shellsize(void);
! void gui_set_shellsize(int mustset, int fit_to_display, int direction);
! void gui_new_shellsize(void);
! void gui_reset_scroll_region(void);
! void gui_start_highlight(int mask);
! void gui_stop_highlight(int mask);
! void gui_clear_block(int row1, int col1, int row2, int col2);
! void gui_update_cursor_later(void);
! void gui_write(char_u *s, int len);
! void gui_dont_update_cursor(void);
! void gui_can_update_cursor(void);
! int gui_outstr_nowrap(char_u *s, int len, int flags, guicolor_T fg, guicolor_T bg, int back);
! void gui_undraw_cursor(void);
! void gui_redraw(int x, int y, int w, int h);
! int gui_redraw_block(int row1, int col1, int row2, int col2, int flags);
! int gui_wait_for_chars(long wtime);
! void gui_send_mouse_event(int button, int x, int y, int repeated_click, int_u modifiers);
! int gui_xy2colrow(int x, int y, int *colp);
! void gui_menu_cb(vimmenu_T *menu);
! void gui_init_which_components(char_u *oldval);
! int gui_use_tabline(void);
! void gui_update_tabline(void);
! void get_tabline_label(tabpage_T *tp, int tooltip);
! int send_tabline_event(int nr);
! void send_tabline_menu_event(int tabidx, int event);
! void gui_remove_scrollbars(void);
! void gui_create_scrollbar(scrollbar_T *sb, int type, win_T *wp);
! scrollbar_T *gui_find_scrollbar(long ident);
! void gui_drag_scrollbar(scrollbar_T *sb, long value, int still_dragging);
! void gui_may_update_scrollbars(void);
! void gui_update_scrollbars(int force);
! int gui_do_scroll(void);
! int gui_do_horiz_scroll(long_u leftcol, int compute_longest_lnum);
! void gui_check_colors(void);
! guicolor_T gui_get_color(char_u *name);
! int gui_get_lightness(guicolor_T pixel);
! void gui_new_scrollbar_colors(void);
! void gui_focus_change(int in_focus);
! void gui_mouse_moved(int x, int y);
! void gui_mouse_correct(void);
! void ex_gui(exarg_T *eap);
! int gui_find_bitmap(char_u *name, char_u *buffer, char *ext);
! void gui_find_iconfile(char_u *name, char_u *buffer, char *ext);
! void display_errors(void);
! int no_console_input(void);
! void gui_update_screen(void);
! char_u *get_find_dialog_text(char_u *arg, int *wwordp, int *mcasep);
! int gui_do_findrepl(int flags, char_u *find_text, char_u *repl_text, int down);
! void gui_handle_drop(int x, int y, int_u modifiers, char_u **fnames, int count);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_w16.pro	2013-08-10 13:37:35.000000000 +0200
--- src/proto/gui_w16.pro	2016-01-19 13:13:20.982877170 +0100
***************
*** 1,80 ****
  /* gui_w16.c */
! void gui_mch_set_blinking __ARGS((long wait, long on, long off));
! void gui_mch_stop_blink __ARGS((void));
! void gui_mch_start_blink __ARGS((void));
! LRESULT WINAPI vim_WindowProc __ARGS((HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam));
! void gui_mch_new_colors __ARGS((void));
! void gui_mch_def_colors __ARGS((void));
! int gui_mch_open __ARGS((void));
! int gui_mch_get_winpos __ARGS((int *x, int *y));
! void gui_mch_set_winpos __ARGS((int x, int y));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! int gui_mch_adjust_charheight __ARGS((void));
! GuiFont gui_mch_get_font __ARGS((char_u *name, int giveErrorIfMissing));
! char_u *gui_mch_get_fontname __ARGS((GuiFont font, char_u *name));
! void gui_mch_free_font __ARGS((GuiFont font));
! guicolor_T gui_mch_get_color __ARGS((char_u *name));
! int gui_mch_haskey __ARGS((char_u *name));
! void gui_mch_beep __ARGS((void));
! void gui_mch_invert_rectangle __ARGS((int r, int c, int nr, int nc));
! void gui_mch_iconify __ARGS((void));
! void gui_mch_draw_hollow_cursor __ARGS((guicolor_T color));
! void gui_mch_draw_part_cursor __ARGS((int w, int h, guicolor_T color));
! void gui_mch_update __ARGS((void));
! int gui_mch_wait_for_chars __ARGS((int wtime));
! void gui_mch_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_mch_clear_all __ARGS((void));
! void gui_mch_enable_menu __ARGS((int flag));
! void gui_mch_set_menu_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_menu_hidden __ARGS((vimmenu_T *menu, int hidden));
! void gui_mch_draw_menubar __ARGS((void));
! long_u gui_mch_get_rgb __ARGS((guicolor_T pixel));
! void gui_mch_activate_window __ARGS((void));
! void gui_mch_show_toolbar __ARGS((int showit));
! void gui_mch_show_tabline __ARGS((int showit));
! int gui_mch_showing_tabline __ARGS((void));
! void gui_mch_update_tabline __ARGS((void));
! void gui_mch_set_curtab __ARGS((int nr));
! void ex_simalt __ARGS((exarg_T *eap));
! void gui_mch_find_dialog __ARGS((exarg_T *eap));
! void gui_mch_replace_dialog __ARGS((exarg_T *eap));
! void gui_mch_mousehide __ARGS((int hide));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! void gui_mch_getmouse __ARGS((int *x, int *y));
! void gui_mch_setmouse __ARGS((int x, int y));
! void gui_mch_flash __ARGS((int msec));
! void gui_mch_delete_lines __ARGS((int row, int num_lines));
! void gui_mch_insert_lines __ARGS((int row, int num_lines));
! void gui_mch_exit __ARGS((int rc));
! void gui_mch_wide_font_changed __ARGS((void));
! int gui_mch_init_font __ARGS((char_u *font_name, int fontset));
! int gui_mch_maximized __ARGS((void));
! void gui_mch_newfont __ARGS((void));
! void gui_mch_settitle __ARGS((char_u *title, char_u *icon));
! void mch_set_mouse_shape __ARGS((int shape));
! char_u *gui_mch_browsedir __ARGS((char_u *title, char_u *initdir));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter));
! int get_cmd_args __ARGS((char *prog, char *cmdline, char ***argvp, char **tofree));
! void gui_mch_prepare __ARGS((int *argc, char **argv));
! int gui_mch_init __ARGS((void));
! void gui_mch_set_shellsize __ARGS((int width, int height, int min_width, int min_height, int base_width, int base_height, int direction));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, long val, long size, long max));
! void gui_mch_set_font __ARGS((GuiFont font));
! void gui_mch_set_fg_color __ARGS((guicolor_T color));
! void gui_mch_set_bg_color __ARGS((guicolor_T color));
! void gui_mch_set_sp_color __ARGS((guicolor_T color));
! void gui_mch_draw_string __ARGS((int row, int col, char_u *text, int len, int flags));
! void gui_mch_flush __ARGS((void));
! void gui_mch_get_screen_dimensions __ARGS((int *screen_w, int *screen_h));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int pos));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_make_popup __ARGS((char_u *path_name, int mouse_pos));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_menu_grey __ARGS((vimmenu_T *menu, int grey));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd));
! void gui_mch_set_foreground __ARGS((void));
  /* vim: set ft=c : */
--- 1,80 ----
  /* gui_w16.c */
! void gui_mch_set_blinking(long wait, long on, long off);
! void gui_mch_stop_blink(void);
! void gui_mch_start_blink(void);
! LRESULT WINAPI vim_WindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
! void gui_mch_new_colors(void);
! void gui_mch_def_colors(void);
! int gui_mch_open(void);
! int gui_mch_get_winpos(int *x, int *y);
! void gui_mch_set_winpos(int x, int y);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! int gui_mch_adjust_charheight(void);
! GuiFont gui_mch_get_font(char_u *name, int giveErrorIfMissing);
! char_u *gui_mch_get_fontname(GuiFont font, char_u *name);
! void gui_mch_free_font(GuiFont font);
! guicolor_T gui_mch_get_color(char_u *name);
! int gui_mch_haskey(char_u *name);
! void gui_mch_beep(void);
! void gui_mch_invert_rectangle(int r, int c, int nr, int nc);
! void gui_mch_iconify(void);
! void gui_mch_draw_hollow_cursor(guicolor_T color);
! void gui_mch_draw_part_cursor(int w, int h, guicolor_T color);
! void gui_mch_update(void);
! int gui_mch_wait_for_chars(int wtime);
! void gui_mch_clear_block(int row1, int col1, int row2, int col2);
! void gui_mch_clear_all(void);
! void gui_mch_enable_menu(int flag);
! void gui_mch_set_menu_pos(int x, int y, int w, int h);
! void gui_mch_menu_hidden(vimmenu_T *menu, int hidden);
! void gui_mch_draw_menubar(void);
! long_u gui_mch_get_rgb(guicolor_T pixel);
! void gui_mch_activate_window(void);
! void gui_mch_show_toolbar(int showit);
! void gui_mch_show_tabline(int showit);
! int gui_mch_showing_tabline(void);
! void gui_mch_update_tabline(void);
! void gui_mch_set_curtab(int nr);
! void ex_simalt(exarg_T *eap);
! void gui_mch_find_dialog(exarg_T *eap);
! void gui_mch_replace_dialog(exarg_T *eap);
! void gui_mch_mousehide(int hide);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! void gui_mch_getmouse(int *x, int *y);
! void gui_mch_setmouse(int x, int y);
! void gui_mch_flash(int msec);
! void gui_mch_delete_lines(int row, int num_lines);
! void gui_mch_insert_lines(int row, int num_lines);
! void gui_mch_exit(int rc);
! void gui_mch_wide_font_changed(void);
! int gui_mch_init_font(char_u *font_name, int fontset);
! int gui_mch_maximized(void);
! void gui_mch_newfont(void);
! void gui_mch_settitle(char_u *title, char_u *icon);
! void mch_set_mouse_shape(int shape);
! char_u *gui_mch_browsedir(char_u *title, char_u *initdir);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
! int get_cmd_args(char *prog, char *cmdline, char ***argvp, char **tofree);
! void gui_mch_prepare(int *argc, char **argv);
! int gui_mch_init(void);
! void gui_mch_set_shellsize(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max);
! void gui_mch_set_font(GuiFont font);
! void gui_mch_set_fg_color(guicolor_T color);
! void gui_mch_set_bg_color(guicolor_T color);
! void gui_mch_set_sp_color(guicolor_T color);
! void gui_mch_draw_string(int row, int col, char_u *text, int len, int flags);
! void gui_mch_flush(void);
! void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
! void gui_mch_add_menu(vimmenu_T *menu, int pos);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_make_popup(char_u *path_name, int mouse_pos);
! void gui_mch_add_menu_item(vimmenu_T *menu, int idx);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_menu_grey(vimmenu_T *menu, int grey);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd);
! void gui_mch_set_foreground(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_w32.pro	2014-08-06 14:52:05.047236174 +0200
--- src/proto/gui_w32.pro	2016-01-19 13:13:21.370872994 +0100
***************
*** 1,100 ****
  /* gui_w32.c */
! int directx_enabled __ARGS((void));
! int gui_mch_set_rendering_options __ARGS((char_u *s));
! void gui_mch_set_blinking __ARGS((long wait, long on, long off));
! void gui_mch_stop_blink __ARGS((void));
! void gui_mch_start_blink __ARGS((void));
! LRESULT WINAPI vim_WindowProc __ARGS((HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam));
! void gui_mch_new_colors __ARGS((void));
! void gui_mch_def_colors __ARGS((void));
! int gui_mch_open __ARGS((void));
! int gui_mch_get_winpos __ARGS((int *x, int *y));
! void gui_mch_set_winpos __ARGS((int x, int y));
! void gui_mch_set_text_area_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_enable_scrollbar __ARGS((scrollbar_T *sb, int flag));
! void gui_mch_set_scrollbar_pos __ARGS((scrollbar_T *sb, int x, int y, int w, int h));
! void gui_mch_create_scrollbar __ARGS((scrollbar_T *sb, int orient));
! int gui_mch_adjust_charheight __ARGS((void));
! GuiFont gui_mch_get_font __ARGS((char_u *name, int giveErrorIfMissing));
! char_u *gui_mch_get_fontname __ARGS((GuiFont font, char_u *name));
! void gui_mch_free_font __ARGS((GuiFont font));
! guicolor_T gui_mch_get_color __ARGS((char_u *name));
! int gui_mch_haskey __ARGS((char_u *name));
! void gui_mch_beep __ARGS((void));
! void gui_mch_invert_rectangle __ARGS((int r, int c, int nr, int nc));
! void gui_mch_iconify __ARGS((void));
! void gui_mch_draw_hollow_cursor __ARGS((guicolor_T color));
! void gui_mch_draw_part_cursor __ARGS((int w, int h, guicolor_T color));
! void gui_mch_update __ARGS((void));
! int gui_mch_wait_for_chars __ARGS((int wtime));
! void gui_mch_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_mch_clear_all __ARGS((void));
! void gui_mch_enable_menu __ARGS((int flag));
! void gui_mch_set_menu_pos __ARGS((int x, int y, int w, int h));
! void gui_mch_menu_hidden __ARGS((vimmenu_T *menu, int hidden));
! void gui_mch_draw_menubar __ARGS((void));
! long_u gui_mch_get_rgb __ARGS((guicolor_T pixel));
! void gui_mch_activate_window __ARGS((void));
! void gui_mch_show_toolbar __ARGS((int showit));
! void gui_mch_show_tabline __ARGS((int showit));
! int gui_mch_showing_tabline __ARGS((void));
! void gui_mch_update_tabline __ARGS((void));
! void gui_mch_set_curtab __ARGS((int nr));
! void ex_simalt __ARGS((exarg_T *eap));
! void gui_mch_find_dialog __ARGS((exarg_T *eap));
! void gui_mch_replace_dialog __ARGS((exarg_T *eap));
! void gui_mch_mousehide __ARGS((int hide));
! void gui_mch_destroy_scrollbar __ARGS((scrollbar_T *sb));
! void gui_mch_getmouse __ARGS((int *x, int *y));
! void gui_mch_setmouse __ARGS((int x, int y));
! void gui_mch_flash __ARGS((int msec));
! void gui_mch_delete_lines __ARGS((int row, int num_lines));
! void gui_mch_insert_lines __ARGS((int row, int num_lines));
! void gui_mch_exit __ARGS((int rc));
! void gui_mch_wide_font_changed __ARGS((void));
! int gui_mch_init_font __ARGS((char_u *font_name, int fontset));
! int gui_mch_maximized __ARGS((void));
! void gui_mch_newfont __ARGS((void));
! void gui_mch_settitle __ARGS((char_u *title, char_u *icon));
! void mch_set_mouse_shape __ARGS((int shape));
! char_u *gui_mch_browsedir __ARGS((char_u *title, char_u *initdir));
! char_u *gui_mch_browse __ARGS((int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter));
! int get_cmd_args __ARGS((char *prog, char *cmdline, char ***argvp, char **tofree));
! int gui_is_win32s __ARGS((void));
! void gui_mch_set_parent __ARGS((char *title));
! void gui_mch_prepare __ARGS((int *argc, char **argv));
! int gui_mch_init __ARGS((void));
! void gui_mch_set_shellsize __ARGS((int width, int height, int min_width, int min_height, int base_width, int base_height, int direction));
! void gui_mch_set_scrollbar_thumb __ARGS((scrollbar_T *sb, long val, long size, long max));
! void gui_mch_set_font __ARGS((GuiFont font));
! void gui_mch_set_fg_color __ARGS((guicolor_T color));
! void gui_mch_set_bg_color __ARGS((guicolor_T color));
! void gui_mch_set_sp_color __ARGS((guicolor_T color));
! void im_set_font __ARGS((LOGFONT *lf));
! void im_set_position __ARGS((int row, int col));
! void im_set_active __ARGS((int active));
! int im_get_status __ARGS((void));
! void gui_mch_draw_string __ARGS((int row, int col, char_u *text, int len, int flags));
! void gui_mch_flush __ARGS((void));
! void gui_mch_get_screen_dimensions __ARGS((int *screen_w, int *screen_h));
! void gui_mch_add_menu __ARGS((vimmenu_T *menu, int pos));
! void gui_mch_show_popupmenu __ARGS((vimmenu_T *menu));
! void gui_make_popup __ARGS((char_u *path_name, int mouse_pos));
! void gui_make_tearoff __ARGS((char_u *path_name));
! void gui_mch_add_menu_item __ARGS((vimmenu_T *menu, int idx));
! void gui_mch_destroy_menu __ARGS((vimmenu_T *menu));
! void gui_mch_menu_grey __ARGS((vimmenu_T *menu, int grey));
! int gui_mch_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd));
! void gui_mch_set_foreground __ARGS((void));
! void gui_mch_drawsign __ARGS((int row, int col, int typenr));
! void *gui_mch_register_sign __ARGS((char_u *signfile));
! void gui_mch_destroy_sign __ARGS((void *sign));
! int multiline_balloon_available __ARGS((void));
! void gui_mch_disable_beval_area __ARGS((BalloonEval *beval));
! void gui_mch_enable_beval_area __ARGS((BalloonEval *beval));
! void gui_mch_post_balloon __ARGS((BalloonEval *beval, char_u *mesg));
! BalloonEval *gui_mch_create_beval_area __ARGS((void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData));
! void gui_mch_destroy_beval_area __ARGS((BalloonEval *beval));
! void netbeans_draw_multisign_indicator __ARGS((int row));
! void netbeans_init_winsock __ARGS((void));
  /* vim: set ft=c : */
--- 1,100 ----
  /* gui_w32.c */
! int directx_enabled(void);
! int gui_mch_set_rendering_options(char_u *s);
! void gui_mch_set_blinking(long wait, long on, long off);
! void gui_mch_stop_blink(void);
! void gui_mch_start_blink(void);
! LRESULT WINAPI vim_WindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
! void gui_mch_new_colors(void);
! void gui_mch_def_colors(void);
! int gui_mch_open(void);
! int gui_mch_get_winpos(int *x, int *y);
! void gui_mch_set_winpos(int x, int y);
! void gui_mch_set_text_area_pos(int x, int y, int w, int h);
! void gui_mch_enable_scrollbar(scrollbar_T *sb, int flag);
! void gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h);
! void gui_mch_create_scrollbar(scrollbar_T *sb, int orient);
! int gui_mch_adjust_charheight(void);
! GuiFont gui_mch_get_font(char_u *name, int giveErrorIfMissing);
! char_u *gui_mch_get_fontname(GuiFont font, char_u *name);
! void gui_mch_free_font(GuiFont font);
! guicolor_T gui_mch_get_color(char_u *name);
! int gui_mch_haskey(char_u *name);
! void gui_mch_beep(void);
! void gui_mch_invert_rectangle(int r, int c, int nr, int nc);
! void gui_mch_iconify(void);
! void gui_mch_draw_hollow_cursor(guicolor_T color);
! void gui_mch_draw_part_cursor(int w, int h, guicolor_T color);
! void gui_mch_update(void);
! int gui_mch_wait_for_chars(int wtime);
! void gui_mch_clear_block(int row1, int col1, int row2, int col2);
! void gui_mch_clear_all(void);
! void gui_mch_enable_menu(int flag);
! void gui_mch_set_menu_pos(int x, int y, int w, int h);
! void gui_mch_menu_hidden(vimmenu_T *menu, int hidden);
! void gui_mch_draw_menubar(void);
! long_u gui_mch_get_rgb(guicolor_T pixel);
! void gui_mch_activate_window(void);
! void gui_mch_show_toolbar(int showit);
! void gui_mch_show_tabline(int showit);
! int gui_mch_showing_tabline(void);
! void gui_mch_update_tabline(void);
! void gui_mch_set_curtab(int nr);
! void ex_simalt(exarg_T *eap);
! void gui_mch_find_dialog(exarg_T *eap);
! void gui_mch_replace_dialog(exarg_T *eap);
! void gui_mch_mousehide(int hide);
! void gui_mch_destroy_scrollbar(scrollbar_T *sb);
! void gui_mch_getmouse(int *x, int *y);
! void gui_mch_setmouse(int x, int y);
! void gui_mch_flash(int msec);
! void gui_mch_delete_lines(int row, int num_lines);
! void gui_mch_insert_lines(int row, int num_lines);
! void gui_mch_exit(int rc);
! void gui_mch_wide_font_changed(void);
! int gui_mch_init_font(char_u *font_name, int fontset);
! int gui_mch_maximized(void);
! void gui_mch_newfont(void);
! void gui_mch_settitle(char_u *title, char_u *icon);
! void mch_set_mouse_shape(int shape);
! char_u *gui_mch_browsedir(char_u *title, char_u *initdir);
! char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
! int get_cmd_args(char *prog, char *cmdline, char ***argvp, char **tofree);
! int gui_is_win32s(void);
! void gui_mch_set_parent(char *title);
! void gui_mch_prepare(int *argc, char **argv);
! int gui_mch_init(void);
! void gui_mch_set_shellsize(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction);
! void gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max);
! void gui_mch_set_font(GuiFont font);
! void gui_mch_set_fg_color(guicolor_T color);
! void gui_mch_set_bg_color(guicolor_T color);
! void gui_mch_set_sp_color(guicolor_T color);
! void im_set_font(LOGFONT *lf);
! void im_set_position(int row, int col);
! void im_set_active(int active);
! int im_get_status(void);
! void gui_mch_draw_string(int row, int col, char_u *text, int len, int flags);
! void gui_mch_flush(void);
! void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
! void gui_mch_add_menu(vimmenu_T *menu, int pos);
! void gui_mch_show_popupmenu(vimmenu_T *menu);
! void gui_make_popup(char_u *path_name, int mouse_pos);
! void gui_make_tearoff(char_u *path_name);
! void gui_mch_add_menu_item(vimmenu_T *menu, int idx);
! void gui_mch_destroy_menu(vimmenu_T *menu);
! void gui_mch_menu_grey(vimmenu_T *menu, int grey);
! int gui_mch_dialog(int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd);
! void gui_mch_set_foreground(void);
! void gui_mch_drawsign(int row, int col, int typenr);
! void *gui_mch_register_sign(char_u *signfile);
! void gui_mch_destroy_sign(void *sign);
! int multiline_balloon_available(void);
! void gui_mch_disable_beval_area(BalloonEval *beval);
! void gui_mch_enable_beval_area(BalloonEval *beval);
! void gui_mch_post_balloon(BalloonEval *beval, char_u *mesg);
! BalloonEval *gui_mch_create_beval_area(void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData);
! void gui_mch_destroy_beval_area(BalloonEval *beval);
! void netbeans_draw_multisign_indicator(int row);
! void netbeans_init_winsock(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_x11.pro	2013-08-10 13:37:35.000000000 +0200
--- src/proto/gui_x11.pro	2016-01-19 13:13:20.594881345 +0100
***************
*** 1,70 ****
  /* gui_x11.c */
! void gui_x11_key_hit_cb __ARGS((Widget w, XtPointer dud, XEvent *event, Boolean *dum));
! void gui_mch_prepare __ARGS((int *argc, char **argv));
! int gui_mch_init_check __ARGS((void));
! int gui_mch_init __ARGS((void));
! void gui_mch_uninit __ARGS((void));
! void gui_mch_new_colors __ARGS((void));
! int gui_mch_open __ARGS((void));
! void gui_init_tooltip_font __ARGS((void));
! void gui_init_menu_font __ARGS((void));
! void gui_mch_exit __ARGS((int rc));
! int gui_mch_get_winpos __ARGS((int *x, int *y));
! void gui_mch_set_winpos __ARGS((int x, int y));
! void gui_mch_set_shellsize __ARGS((int width, int height, int min_width, int min_height, int base_width, int base_height, int direction));
! void gui_mch_get_screen_dimensions __ARGS((int *screen_w, int *screen_h));
! int gui_mch_init_font __ARGS((char_u *font_name, int do_fontset));
! GuiFont gui_mch_get_font __ARGS((char_u *name, int giveErrorIfMissing));
! char_u *gui_mch_get_fontname __ARGS((GuiFont font, char_u *name));
! int gui_mch_adjust_charheight __ARGS((void));
! void gui_mch_set_font __ARGS((GuiFont font));
! void gui_mch_set_fontset __ARGS((GuiFontset fontset));
! void gui_mch_free_font __ARGS((GuiFont font));
! void gui_mch_free_fontset __ARGS((GuiFontset fontset));
! GuiFontset gui_mch_get_fontset __ARGS((char_u *name, int giveErrorIfMissing, int fixed_width));
! int fontset_height __ARGS((XFontSet fs));
! int fontset_height2 __ARGS((XFontSet fs));
! guicolor_T gui_mch_get_color __ARGS((char_u *reqname));
! void gui_mch_set_fg_color __ARGS((guicolor_T color));
! void gui_mch_set_bg_color __ARGS((guicolor_T color));
! void gui_mch_set_sp_color __ARGS((guicolor_T color));
! void gui_mch_draw_string __ARGS((int row, int col, char_u *s, int len, int flags));
! int gui_mch_haskey __ARGS((char_u *name));
! int gui_get_x11_windis __ARGS((Window *win, Display **dis));
! void gui_mch_beep __ARGS((void));
! void gui_mch_flash __ARGS((int msec));
! void gui_mch_invert_rectangle __ARGS((int r, int c, int nr, int nc));
! void gui_mch_iconify __ARGS((void));
! void gui_mch_set_foreground __ARGS((void));
! void gui_mch_draw_hollow_cursor __ARGS((guicolor_T color));
! void gui_mch_draw_part_cursor __ARGS((int w, int h, guicolor_T color));
! void gui_mch_update __ARGS((void));
! int gui_mch_wait_for_chars __ARGS((long wtime));
! void gui_mch_flush __ARGS((void));
! void gui_mch_clear_block __ARGS((int row1, int col1, int row2, int col2));
! void gui_mch_clear_all __ARGS((void));
! void gui_mch_delete_lines __ARGS((int row, int num_lines));
! void gui_mch_insert_lines __ARGS((int row, int num_lines));
! void clip_mch_lose_selection __ARGS((VimClipboard *cbd));
! int clip_mch_own_selection __ARGS((VimClipboard *cbd));
! void clip_mch_request_selection __ARGS((VimClipboard *cbd));
! void clip_mch_set_selection __ARGS((VimClipboard *cbd));
! void gui_mch_menu_grey __ARGS((vimmenu_T *menu, int grey));
! void gui_mch_menu_hidden __ARGS((vimmenu_T *menu, int hidden));
! void gui_mch_draw_menubar __ARGS((void));
! void gui_x11_menu_cb __ARGS((Widget w, XtPointer client_data, XtPointer call_data));
! void gui_mch_set_blinking __ARGS((long waittime, long on, long off));
! void gui_mch_stop_blink __ARGS((void));
! void gui_mch_start_blink __ARGS((void));
! long_u gui_mch_get_rgb __ARGS((guicolor_T pixel));
! void gui_x11_callbacks __ARGS((Widget textArea, Widget vimForm));
! void gui_mch_getmouse __ARGS((int *x, int *y));
! void gui_mch_setmouse __ARGS((int x, int y));
! XButtonPressedEvent *gui_x11_get_last_mouse_event __ARGS((void));
! void gui_mch_drawsign __ARGS((int row, int col, int typenr));
! void *gui_mch_register_sign __ARGS((char_u *signfile));
! void gui_mch_destroy_sign __ARGS((void *sign));
! void gui_mch_mousehide __ARGS((int hide));
! void mch_set_mouse_shape __ARGS((int shape));
! void gui_mch_menu_set_tip __ARGS((vimmenu_T *menu));
  /* vim: set ft=c : */
--- 1,70 ----
  /* gui_x11.c */
! void gui_x11_key_hit_cb(Widget w, XtPointer dud, XEvent *event, Boolean *dum);
! void gui_mch_prepare(int *argc, char **argv);
! int gui_mch_init_check(void);
! int gui_mch_init(void);
! void gui_mch_uninit(void);
! void gui_mch_new_colors(void);
! int gui_mch_open(void);
! void gui_init_tooltip_font(void);
! void gui_init_menu_font(void);
! void gui_mch_exit(int rc);
! int gui_mch_get_winpos(int *x, int *y);
! void gui_mch_set_winpos(int x, int y);
! void gui_mch_set_shellsize(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction);
! void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
! int gui_mch_init_font(char_u *font_name, int do_fontset);
! GuiFont gui_mch_get_font(char_u *name, int giveErrorIfMissing);
! char_u *gui_mch_get_fontname(GuiFont font, char_u *name);
! int gui_mch_adjust_charheight(void);
! void gui_mch_set_font(GuiFont font);
! void gui_mch_set_fontset(GuiFontset fontset);
! void gui_mch_free_font(GuiFont font);
! void gui_mch_free_fontset(GuiFontset fontset);
! GuiFontset gui_mch_get_fontset(char_u *name, int giveErrorIfMissing, int fixed_width);
! int fontset_height(XFontSet fs);
! int fontset_height2(XFontSet fs);
! guicolor_T gui_mch_get_color(char_u *reqname);
! void gui_mch_set_fg_color(guicolor_T color);
! void gui_mch_set_bg_color(guicolor_T color);
! void gui_mch_set_sp_color(guicolor_T color);
! void gui_mch_draw_string(int row, int col, char_u *s, int len, int flags);
! int gui_mch_haskey(char_u *name);
! int gui_get_x11_windis(Window *win, Display **dis);
! void gui_mch_beep(void);
! void gui_mch_flash(int msec);
! void gui_mch_invert_rectangle(int r, int c, int nr, int nc);
! void gui_mch_iconify(void);
! void gui_mch_set_foreground(void);
! void gui_mch_draw_hollow_cursor(guicolor_T color);
! void gui_mch_draw_part_cursor(int w, int h, guicolor_T color);
! void gui_mch_update(void);
! int gui_mch_wait_for_chars(long wtime);
! void gui_mch_flush(void);
! void gui_mch_clear_block(int row1, int col1, int row2, int col2);
! void gui_mch_clear_all(void);
! void gui_mch_delete_lines(int row, int num_lines);
! void gui_mch_insert_lines(int row, int num_lines);
! void clip_mch_lose_selection(VimClipboard *cbd);
! int clip_mch_own_selection(VimClipboard *cbd);
! void clip_mch_request_selection(VimClipboard *cbd);
! void clip_mch_set_selection(VimClipboard *cbd);
! void gui_mch_menu_grey(vimmenu_T *menu, int grey);
! void gui_mch_menu_hidden(vimmenu_T *menu, int hidden);
! void gui_mch_draw_menubar(void);
! void gui_x11_menu_cb(Widget w, XtPointer client_data, XtPointer call_data);
! void gui_mch_set_blinking(long waittime, long on, long off);
! void gui_mch_stop_blink(void);
! void gui_mch_start_blink(void);
! long_u gui_mch_get_rgb(guicolor_T pixel);
! void gui_x11_callbacks(Widget textArea, Widget vimForm);
! void gui_mch_getmouse(int *x, int *y);
! void gui_mch_setmouse(int x, int y);
! XButtonPressedEvent *gui_x11_get_last_mouse_event(void);
! void gui_mch_drawsign(int row, int col, int typenr);
! void *gui_mch_register_sign(char_u *signfile);
! void gui_mch_destroy_sign(void *sign);
! void gui_mch_mousehide(int hide);
! void mch_set_mouse_shape(int shape);
! void gui_mch_menu_set_tip(vimmenu_T *menu);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/gui_xmdlg.pro	2013-08-10 13:37:33.000000000 +0200
--- src/proto/gui_xmdlg.pro	2016-01-19 13:13:19.394894258 +0100
***************
*** 1,3 ****
  /* gui_xmdlg.c */
! char_u *gui_xm_select_font __ARGS((char_u *current));
  /* vim: set ft=c : */
--- 1,3 ----
  /* gui_xmdlg.c */
! char_u *gui_xm_select_font(char_u *current);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/hangulin.pro	2015-11-10 14:35:14.312069795 +0100
--- src/proto/hangulin.pro	2016-01-19 13:13:03.087069753 +0100
***************
*** 1,11 ****
  /* hangulin.c */
! int hangul_input_state_get __ARGS((void));
! void hangul_input_state_set __ARGS((int state));
! int im_get_status __ARGS((void));
! void hangul_input_state_toggle __ARGS((void));
! void hangul_keyboard_set __ARGS((void));
! int hangul_input_process __ARGS((char_u *s, int len));
! void hangul_input_clear __ARGS((void));
! char_u *hangul_string_convert __ARGS((char_u *buf, int *p_len));
! char_u *hangul_composing_buffer_get __ARGS((int *p_len));
  /* vim: set ft=c : */
--- 1,11 ----
  /* hangulin.c */
! int hangul_input_state_get(void);
! void hangul_input_state_set(int state);
! int im_get_status(void);
! void hangul_input_state_toggle(void);
! void hangul_keyboard_set(void);
! int hangul_input_process(char_u *s, int len);
! void hangul_input_clear(void);
! char_u *hangul_string_convert(char_u *buf, int *p_len);
! char_u *hangul_composing_buffer_get(int *p_len);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/hardcopy.pro	2013-08-10 13:37:13.000000000 +0200
--- src/proto/hardcopy.pro	2016-01-19 13:13:02.331077888 +0100
***************
*** 1,20 ****
  /* hardcopy.c */
! char_u *parse_printoptions __ARGS((void));
! char_u *parse_printmbfont __ARGS((void));
! int prt_header_height __ARGS((void));
! int prt_use_number __ARGS((void));
! int prt_get_unit __ARGS((int idx));
! void ex_hardcopy __ARGS((exarg_T *eap));
! void mch_print_cleanup __ARGS((void));
! int mch_print_init __ARGS((prt_settings_T *psettings, char_u *jobname, int forceit));
! int mch_print_begin __ARGS((prt_settings_T *psettings));
! void mch_print_end __ARGS((prt_settings_T *psettings));
! int mch_print_end_page __ARGS((void));
! int mch_print_begin_page __ARGS((char_u *str));
! int mch_print_blank_page __ARGS((void));
! void mch_print_start_line __ARGS((int margin, int page_line));
! int mch_print_text_out __ARGS((char_u *p, int len));
! void mch_print_set_font __ARGS((int iBold, int iItalic, int iUnderline));
! void mch_print_set_bg __ARGS((long_u bgcol));
! void mch_print_set_fg __ARGS((long_u fgcol));
  /* vim: set ft=c : */
--- 1,20 ----
  /* hardcopy.c */
! char_u *parse_printoptions(void);
! char_u *parse_printmbfont(void);
! int prt_header_height(void);
! int prt_use_number(void);
! int prt_get_unit(int idx);
! void ex_hardcopy(exarg_T *eap);
! void mch_print_cleanup(void);
! int mch_print_init(prt_settings_T *psettings, char_u *jobname, int forceit);
! int mch_print_begin(prt_settings_T *psettings);
! void mch_print_end(prt_settings_T *psettings);
! int mch_print_end_page(void);
! int mch_print_begin_page(char_u *str);
! int mch_print_blank_page(void);
! void mch_print_start_line(int margin, int page_line);
! int mch_print_text_out(char_u *p, int len);
! void mch_print_set_font(int iBold, int iItalic, int iUnderline);
! void mch_print_set_bg(long_u bgcol);
! void mch_print_set_fg(long_u fgcol);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/hashtab.pro	2013-08-10 13:37:13.000000000 +0200
--- src/proto/hashtab.pro	2016-01-19 13:13:02.707073842 +0100
***************
*** 1,14 ****
  /* hashtab.c */
! void hash_init __ARGS((hashtab_T *ht));
! void hash_clear __ARGS((hashtab_T *ht));
! void hash_clear_all __ARGS((hashtab_T *ht, int off));
! hashitem_T *hash_find __ARGS((hashtab_T *ht, char_u *key));
! hashitem_T *hash_lookup __ARGS((hashtab_T *ht, char_u *key, hash_T hash));
! void hash_debug_results __ARGS((void));
! int hash_add __ARGS((hashtab_T *ht, char_u *key));
! int hash_add_item __ARGS((hashtab_T *ht, hashitem_T *hi, char_u *key, hash_T hash));
! void hash_remove __ARGS((hashtab_T *ht, hashitem_T *hi));
! void hash_lock __ARGS((hashtab_T *ht));
! void hash_unlock __ARGS((hashtab_T *ht));
! hash_T hash_hash __ARGS((char_u *key));
  /* vim: set ft=c : */
--- 1,14 ----
  /* hashtab.c */
! void hash_init(hashtab_T *ht);
! void hash_clear(hashtab_T *ht);
! void hash_clear_all(hashtab_T *ht, int off);
! hashitem_T *hash_find(hashtab_T *ht, char_u *key);
! hashitem_T *hash_lookup(hashtab_T *ht, char_u *key, hash_T hash);
! void hash_debug_results(void);
! int hash_add(hashtab_T *ht, char_u *key);
! int hash_add_item(hashtab_T *ht, hashitem_T *hi, char_u *key, hash_T hash);
! void hash_remove(hashtab_T *ht, hashitem_T *hi);
! void hash_lock(hashtab_T *ht);
! void hash_unlock(hashtab_T *ht);
! hash_T hash_hash(char_u *key);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_cscope.pro	2013-08-10 13:37:14.000000000 +0200
--- src/proto/if_cscope.pro	2016-01-19 13:13:03.463065707 +0100
***************
*** 1,12 ****
  /* if_cscope.c */
! char_u *get_cscope_name __ARGS((expand_T *xp, int idx));
! void set_context_in_cscope_cmd __ARGS((expand_T *xp, char_u *arg, cmdidx_T cmdidx));
! void do_cscope __ARGS((exarg_T *eap));
! void do_scscope __ARGS((exarg_T *eap));
! void do_cstag __ARGS((exarg_T *eap));
! int cs_fgets __ARGS((char_u *buf, int size));
! void cs_free_tags __ARGS((void));
! void cs_print_tags __ARGS((void));
! int cs_connection __ARGS((int num, char_u *dbpath, char_u *ppath));
! void cs_end __ARGS((void));
  /* vim: set ft=c : */
--- 1,12 ----
  /* if_cscope.c */
! char_u *get_cscope_name(expand_T *xp, int idx);
! void set_context_in_cscope_cmd(expand_T *xp, char_u *arg, cmdidx_T cmdidx);
! void do_cscope(exarg_T *eap);
! void do_scscope(exarg_T *eap);
! void do_cstag(exarg_T *eap);
! int cs_fgets(char_u *buf, int size);
! void cs_free_tags(void);
! void cs_print_tags(void);
! int cs_connection(int num, char_u *dbpath, char_u *ppath);
! void cs_end(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_perl.pro	2016-01-17 21:15:17.843322552 +0100
--- src/proto/if_perl.pro	2016-01-19 13:13:25.326830422 +0100
***************
*** 1,9 ****
  /* auto/if_perl.c */
! int perl_enabled __ARGS((int verbose));
! void perl_end __ARGS((void));
! void msg_split __ARGS((char_u *s, int attr));
! void perl_win_free __ARGS((win_T *wp));
! void perl_buf_free __ARGS((buf_T *bp));
! void ex_perl __ARGS((exarg_T *eap));
! void ex_perldo __ARGS((exarg_T *eap));
! void do_perleval __ARGS((char_u *str, typval_T *rettv));
--- 1,9 ----
  /* auto/if_perl.c */
! int perl_enabled(int verbose);
! void perl_end(void);
! void msg_split(char_u *s, int attr);
! void perl_win_free(win_T *wp);
! void perl_buf_free(buf_T *bp);
! void ex_perl(exarg_T *eap);
! void do_perleval(char_u *str, typval_T *rettv);
! void ex_perldo(exarg_T *eap);
*** ../vim-7.4.1132/src/proto/if_perlsfio.pro	2013-08-10 13:37:41.000000000 +0200
--- src/proto/if_perlsfio.pro	2016-01-19 13:13:25.722826161 +0100
***************
*** 1,3 ****
  /* if_perlsfio.c */
! int *sfdcnewvim __ARGS((void));
  /* vim: set ft=c : */
--- 1,3 ----
  /* if_perlsfio.c */
! int *sfdcnewvim(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_python3.pro	2015-02-03 12:55:11.140179551 +0100
--- src/proto/if_python3.pro	2016-01-19 13:13:04.743051932 +0100
***************
*** 1,13 ****
  /* if_python3.c */
! int python3_enabled __ARGS((int verbose));
! void python3_end __ARGS((void));
! int python3_loaded __ARGS((void));
! void ex_py3 __ARGS((exarg_T *eap));
! void ex_py3file __ARGS((exarg_T *eap));
! void ex_py3do __ARGS((exarg_T *eap));
! void python3_buffer_free __ARGS((buf_T *buf));
! void python3_window_free __ARGS((win_T *win));
! void python3_tabpage_free __ARGS((tabpage_T *tab));
! void do_py3eval __ARGS((char_u *str, typval_T *rettv));
! int set_ref_in_python3 __ARGS((int copyID));
  /* vim: set ft=c : */
--- 1,13 ----
  /* if_python3.c */
! int python3_enabled(int verbose);
! void python3_end(void);
! int python3_loaded(void);
! void ex_py3(exarg_T *eap);
! void ex_py3file(exarg_T *eap);
! void ex_py3do(exarg_T *eap);
! void python3_buffer_free(buf_T *buf);
! void python3_window_free(win_T *win);
! void python3_tabpage_free(tabpage_T *tab);
! void do_py3eval(char_u *str, typval_T *rettv);
! int set_ref_in_python3(int copyID);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_python.pro	2015-02-03 12:55:11.140179551 +0100
--- src/proto/if_python.pro	2016-01-19 13:13:04.303056668 +0100
***************
*** 1,13 ****
  /* if_python.c */
! int python_enabled __ARGS((int verbose));
! void python_end __ARGS((void));
! int python_loaded __ARGS((void));
! void ex_python __ARGS((exarg_T *eap));
! void ex_pyfile __ARGS((exarg_T *eap));
! void ex_pydo __ARGS((exarg_T *eap));
! void python_buffer_free __ARGS((buf_T *buf));
! void python_window_free __ARGS((win_T *win));
! void python_tabpage_free __ARGS((tabpage_T *tab));
! void do_pyeval __ARGS((char_u *str, typval_T *rettv));
! int set_ref_in_python __ARGS((int copyID));
  /* vim: set ft=c : */
--- 1,13 ----
  /* if_python.c */
! int python_enabled(int verbose);
! void python_end(void);
! int python_loaded(void);
! void ex_python(exarg_T *eap);
! void ex_pyfile(exarg_T *eap);
! void ex_pydo(exarg_T *eap);
! void python_buffer_free(buf_T *buf);
! void python_window_free(win_T *win);
! void python_tabpage_free(tabpage_T *tab);
! void do_pyeval(char_u *str, typval_T *rettv);
! int set_ref_in_python(int copyID);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_ruby.pro	2013-08-10 13:37:16.000000000 +0200
--- src/proto/if_ruby.pro	2016-01-19 13:16:13.913016151 +0100
***************
*** 1,10 ****
  /* if_ruby.c */
! int ruby_enabled __ARGS((int verbose));
! void ruby_end __ARGS((void));
! void ex_ruby __ARGS((exarg_T *eap));
! void ex_rubydo __ARGS((exarg_T *eap));
! void ex_rubyfile __ARGS((exarg_T *eap));
! void ruby_buffer_free __ARGS((buf_T *buf));
! void ruby_window_free __ARGS((win_T *win));
! void vim_ruby_init __ARGS((void *stack_start));
  /* vim: set ft=c : */
--- 1,10 ----
  /* if_ruby.c */
! int ruby_enabled(int verbose);
! void ruby_end(void);
! void ex_ruby(exarg_T *eap);
! void ex_rubydo(exarg_T *eap);
! void ex_rubyfile(exarg_T *eap);
! void ruby_buffer_free(buf_T *buf);
! void ruby_window_free(win_T *win);
! void vim_ruby_init(void *stack_start);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_tcl.pro	2013-08-10 13:37:36.000000000 +0200
--- src/proto/if_tcl.pro	2016-01-19 13:13:22.162864471 +0100
***************
*** 1,10 ****
  /* if_tcl.c */
! void vim_tcl_init __ARGS((char *arg));
! int tcl_enabled __ARGS((int verbose));
! void tcl_end __ARGS((void));
! void ex_tcl __ARGS((exarg_T *eap));
! void ex_tclfile __ARGS((exarg_T *eap));
! void ex_tcldo __ARGS((exarg_T *eap));
! void tcl_buffer_free __ARGS((buf_T *buf));
! void tcl_window_free __ARGS((win_T *win));
  /* vim: set ft=c : */
--- 1,10 ----
  /* if_tcl.c */
! void vim_tcl_init(char *arg);
! int tcl_enabled(int verbose);
! void tcl_end(void);
! void ex_tcl(exarg_T *eap);
! void ex_tclfile(exarg_T *eap);
! void ex_tcldo(exarg_T *eap);
! void tcl_buffer_free(buf_T *buf);
! void tcl_window_free(win_T *win);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/if_xcmdsrv.pro	2015-09-15 14:12:01.386632480 +0200
--- src/proto/if_xcmdsrv.pro	2016-01-19 13:13:03.867061359 +0100
***************
*** 1,13 ****
  /* if_xcmdsrv.c */
! int serverRegisterName __ARGS((Display *dpy, char_u *name));
! void serverChangeRegisteredWindow __ARGS((Display *dpy, Window newwin));
! int serverSendToVim __ARGS((Display *dpy, char_u *name, char_u *cmd, char_u **result, Window *server, int asExpr, int localLoop, int silent));
! char_u *serverGetVimNames __ARGS((Display *dpy));
! Window serverStrToWin __ARGS((char_u *str));
! int serverSendReply __ARGS((char_u *name, char_u *str));
! int serverReadReply __ARGS((Display *dpy, Window win, char_u **str, int localLoop));
! int serverPeekReply __ARGS((Display *dpy, Window win, char_u **str));
! void serverEventProc __ARGS((Display *dpy, XEvent *eventPtr, int immediate));
! void server_parse_messages __ARGS((void));
! int server_waiting __ARGS((void));
  /* vim: set ft=c : */
--- 1,13 ----
  /* if_xcmdsrv.c */
! int serverRegisterName(Display *dpy, char_u *name);
! void serverChangeRegisteredWindow(Display *dpy, Window newwin);
! int serverSendToVim(Display *dpy, char_u *name, char_u *cmd, char_u **result, Window *server, int asExpr, int localLoop, int silent);
! char_u *serverGetVimNames(Display *dpy);
! Window serverStrToWin(char_u *str);
! int serverSendReply(char_u *name, char_u *str);
! int serverReadReply(Display *dpy, Window win, char_u **str, int localLoop);
! int serverPeekReply(Display *dpy, Window win, char_u **str);
! void serverEventProc(Display *dpy, XEvent *eventPtr, int immediate);
! void server_parse_messages(void);
! int server_waiting(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/main.pro	2013-08-10 13:37:17.000000000 +0200
--- src/proto/main.pro	2016-01-19 13:13:05.571043022 +0100
***************
*** 1,26 ****
  /* main.c */
! void main_loop __ARGS((int cmdwin, int noexmode));
! void getout_preserve_modified __ARGS((int exitval));
! void getout __ARGS((int exitval));
! int process_env __ARGS((char_u *env, int is_viminit));
! void mainerr_arg_missing __ARGS((char_u *str));
! void time_push __ARGS((void *tv_rel, void *tv_start));
! void time_pop __ARGS((void *tp));
! void time_msg __ARGS((char *mesg, void *tv_start));
! void server_to_input_buf __ARGS((char_u *str));
! char_u *eval_client_expr_to_string __ARGS((char_u *expr));
! char_u *serverConvert __ARGS((char_u *client_enc, char_u *data, char_u **tofree));
! int toF_TyA __ARGS((int c));
! int fkmap __ARGS((int c));
! void conv_to_pvim __ARGS((void));
! void conv_to_pstd __ARGS((void));
! char_u *lrswap __ARGS((char_u *ibuf));
! char_u *lrFswap __ARGS((char_u *cmdbuf, int len));
! char_u *lrF_sub __ARGS((char_u *ibuf));
! int cmdl_fkmap __ARGS((int c));
! int F_isalpha __ARGS((int c));
! int F_isdigit __ARGS((int c));
! int F_ischar __ARGS((int c));
! void farsi_fkey __ARGS((cmdarg_T *cap));
! int arabic_shape __ARGS((int c, int *ccp, int *c1p, int prev_c, int prev_c1, int next_c));
  /* vim: set ft=c : */
--- 1,26 ----
  /* main.c */
! void main_loop(int cmdwin, int noexmode);
! void getout_preserve_modified(int exitval);
! void getout(int exitval);
! int process_env(char_u *env, int is_viminit);
! void mainerr_arg_missing(char_u *str);
! void time_push(void *tv_rel, void *tv_start);
! void time_pop(void *tp);
! void time_msg(char *mesg, void *tv_start);
! void server_to_input_buf(char_u *str);
! char_u *eval_client_expr_to_string(char_u *expr);
! char_u *serverConvert(char_u *client_enc, char_u *data, char_u **tofree);
! int toF_TyA(int c);
! int fkmap(int c);
! void conv_to_pvim(void);
! void conv_to_pstd(void);
! char_u *lrswap(char_u *ibuf);
! char_u *lrFswap(char_u *cmdbuf, int len);
! char_u *lrF_sub(char_u *ibuf);
! int cmdl_fkmap(int c);
! int F_isalpha(int c);
! int F_isdigit(int c);
! int F_ischar(int c);
! void farsi_fkey(cmdarg_T *cap);
! int arabic_shape(int c, int *ccp, int *c1p, int prev_c, int prev_c1, int next_c);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/mark.pro	2013-08-10 13:37:17.000000000 +0200
--- src/proto/mark.pro	2016-01-19 13:13:05.959038847 +0100
***************
*** 1,31 ****
  /* mark.c */
! int setmark __ARGS((int c));
! int setmark_pos __ARGS((int c, pos_T *pos, int fnum));
! void setpcmark __ARGS((void));
! void checkpcmark __ARGS((void));
! pos_T *movemark __ARGS((int count));
! pos_T *movechangelist __ARGS((int count));
! pos_T *getmark_buf __ARGS((buf_T *buf, int c, int changefile));
! pos_T *getmark __ARGS((int c, int changefile));
! pos_T *getmark_buf_fnum __ARGS((buf_T *buf, int c, int changefile, int *fnum));
! pos_T *getnextmark __ARGS((pos_T *startpos, int dir, int begin_line));
! void fmarks_check_names __ARGS((buf_T *buf));
! int check_mark __ARGS((pos_T *pos));
! void clrallmarks __ARGS((buf_T *buf));
! char_u *fm_getname __ARGS((fmark_T *fmark, int lead_len));
! void do_marks __ARGS((exarg_T *eap));
! void ex_delmarks __ARGS((exarg_T *eap));
! void ex_jumps __ARGS((exarg_T *eap));
! void ex_changes __ARGS((exarg_T *eap));
! void mark_adjust __ARGS((linenr_T line1, linenr_T line2, long amount, long amount_after));
! void mark_col_adjust __ARGS((linenr_T lnum, colnr_T mincol, long lnum_amount, long col_amount));
! void copy_jumplist __ARGS((win_T *from, win_T *to));
! void free_jumplist __ARGS((win_T *wp));
! void set_last_cursor __ARGS((win_T *win));
! void free_all_marks __ARGS((void));
! int read_viminfo_filemark __ARGS((vir_T *virp, int force));
! void write_viminfo_filemarks __ARGS((FILE *fp));
! int removable __ARGS((char_u *name));
! int write_viminfo_marks __ARGS((FILE *fp_out));
! void copy_viminfo_marks __ARGS((vir_T *virp, FILE *fp_out, int count, int eof, int flags));
  /* vim: set ft=c : */
--- 1,31 ----
  /* mark.c */
! int setmark(int c);
! int setmark_pos(int c, pos_T *pos, int fnum);
! void setpcmark(void);
! void checkpcmark(void);
! pos_T *movemark(int count);
! pos_T *movechangelist(int count);
! pos_T *getmark_buf(buf_T *buf, int c, int changefile);
! pos_T *getmark(int c, int changefile);
! pos_T *getmark_buf_fnum(buf_T *buf, int c, int changefile, int *fnum);
! pos_T *getnextmark(pos_T *startpos, int dir, int begin_line);
! void fmarks_check_names(buf_T *buf);
! int check_mark(pos_T *pos);
! void clrallmarks(buf_T *buf);
! char_u *fm_getname(fmark_T *fmark, int lead_len);
! void do_marks(exarg_T *eap);
! void ex_delmarks(exarg_T *eap);
! void ex_jumps(exarg_T *eap);
! void ex_changes(exarg_T *eap);
! void mark_adjust(linenr_T line1, linenr_T line2, long amount, long amount_after);
! void mark_col_adjust(linenr_T lnum, colnr_T mincol, long lnum_amount, long col_amount);
! void copy_jumplist(win_T *from, win_T *to);
! void free_jumplist(win_T *wp);
! void set_last_cursor(win_T *win);
! void free_all_marks(void);
! int read_viminfo_filemark(vir_T *virp, int force);
! void write_viminfo_filemarks(FILE *fp);
! int removable(char_u *name);
! int write_viminfo_marks(FILE *fp_out);
! void copy_viminfo_marks(vir_T *virp, FILE *fp_out, int count, int eof, int flags);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/mbyte.pro	2013-08-10 13:37:21.000000000 +0200
--- src/proto/mbyte.pro	2016-01-19 13:13:09.103005014 +0100
***************
*** 1,96 ****
  /* mbyte.c */
! int enc_canon_props __ARGS((char_u *name));
! char_u *mb_init __ARGS((void));
! int bomb_size __ARGS((void));
! void remove_bom __ARGS((char_u *s));
! int mb_get_class __ARGS((char_u *p));
! int mb_get_class_buf __ARGS((char_u *p, buf_T *buf));
! int dbcs_class __ARGS((unsigned lead, unsigned trail));
! int latin_char2len __ARGS((int c));
! int latin_char2bytes __ARGS((int c, char_u *buf));
! int latin_ptr2len __ARGS((char_u *p));
! int latin_ptr2len_len __ARGS((char_u *p, int size));
! int utf_char2cells __ARGS((int c));
! int latin_ptr2cells __ARGS((char_u *p));
! int utf_ptr2cells __ARGS((char_u *p));
! int dbcs_ptr2cells __ARGS((char_u *p));
! int latin_ptr2cells_len __ARGS((char_u *p, int size));
! int latin_char2cells __ARGS((int c));
! int mb_string2cells __ARGS((char_u *p, int len));
! int latin_off2cells __ARGS((unsigned off, unsigned max_off));
! int dbcs_off2cells __ARGS((unsigned off, unsigned max_off));
! int utf_off2cells __ARGS((unsigned off, unsigned max_off));
! int latin_ptr2char __ARGS((char_u *p));
! int utf_ptr2char __ARGS((char_u *p));
! int mb_ptr2char_adv __ARGS((char_u **pp));
! int mb_cptr2char_adv __ARGS((char_u **pp));
! int arabic_combine __ARGS((int one, int two));
! int arabic_maycombine __ARGS((int two));
! int utf_composinglike __ARGS((char_u *p1, char_u *p2));
! int utfc_ptr2char __ARGS((char_u *p, int *pcc));
! int utfc_ptr2char_len __ARGS((char_u *p, int *pcc, int maxlen));
! int utfc_char2bytes __ARGS((int off, char_u *buf));
! int utf_ptr2len __ARGS((char_u *p));
! int utf_byte2len __ARGS((int b));
! int utf_ptr2len_len __ARGS((char_u *p, int size));
! int utfc_ptr2len __ARGS((char_u *p));
! int utfc_ptr2len_len __ARGS((char_u *p, int size));
! int utf_char2len __ARGS((int c));
! int utf_char2bytes __ARGS((int c, char_u *buf));
! int utf_iscomposing __ARGS((int c));
! int utf_printable __ARGS((int c));
! int utf_class __ARGS((int c));
! int utf_fold __ARGS((int a));
! int utf_toupper __ARGS((int a));
! int utf_islower __ARGS((int a));
! int utf_tolower __ARGS((int a));
! int utf_isupper __ARGS((int a));
! int mb_strnicmp __ARGS((char_u *s1, char_u *s2, size_t nn));
! void show_utf8 __ARGS((void));
! int latin_head_off __ARGS((char_u *base, char_u *p));
! int dbcs_head_off __ARGS((char_u *base, char_u *p));
! int dbcs_screen_head_off __ARGS((char_u *base, char_u *p));
! int utf_head_off __ARGS((char_u *base, char_u *p));
! void mb_copy_char __ARGS((char_u **fp, char_u **tp));
! int mb_off_next __ARGS((char_u *base, char_u *p));
! int mb_tail_off __ARGS((char_u *base, char_u *p));
! void utf_find_illegal __ARGS((void));
! int utf_valid_string __ARGS((char_u *s, char_u *end));
! int dbcs_screen_tail_off __ARGS((char_u *base, char_u *p));
! void mb_adjust_cursor __ARGS((void));
! void mb_adjustpos __ARGS((buf_T *buf, pos_T *lp));
! char_u *mb_prevptr __ARGS((char_u *line, char_u *p));
! int mb_charlen __ARGS((char_u *str));
! int mb_charlen_len __ARGS((char_u *str, int len));
! char_u *mb_unescape __ARGS((char_u **pp));
! int mb_lefthalve __ARGS((int row, int col));
! int mb_fix_col __ARGS((int col, int row));
! char_u *enc_skip __ARGS((char_u *p));
! char_u *enc_canonize __ARGS((char_u *enc));
! char_u *enc_locale __ARGS((void));
! int encname2codepage __ARGS((char_u *name));
! void *my_iconv_open __ARGS((char_u *to, char_u *from));
! int iconv_enabled __ARGS((int verbose));
! void iconv_end __ARGS((void));
! void im_set_active __ARGS((int active));
! void xim_set_focus __ARGS((int focus));
! void im_set_position __ARGS((int row, int col));
! void xim_set_preedit __ARGS((void));
! int im_get_feedback_attr __ARGS((int col));
! void xim_init __ARGS((void));
! void im_shutdown __ARGS((void));
! int im_xim_isvalid_imactivate __ARGS((void));
! void xim_reset __ARGS((void));
! int xim_queue_key_press_event __ARGS((GdkEventKey *event, int down));
! int im_get_status __ARGS((void));
! int preedit_get_status __ARGS((void));
! int im_is_preediting __ARGS((void));
! void xim_set_status_area __ARGS((void));
! int xim_get_status_area_height __ARGS((void));
! int convert_setup __ARGS((vimconv_T *vcp, char_u *from, char_u *to));
! int convert_setup_ext __ARGS((vimconv_T *vcp, char_u *from, int from_unicode_is_utf8, char_u *to, int to_unicode_is_utf8));
! int convert_input __ARGS((char_u *ptr, int len, int maxlen));
! int convert_input_safe __ARGS((char_u *ptr, int len, int maxlen, char_u **restp, int *restlenp));
! char_u *string_convert __ARGS((vimconv_T *vcp, char_u *ptr, int *lenp));
! char_u *string_convert_ext __ARGS((vimconv_T *vcp, char_u *ptr, int *lenp, int *unconvlenp));
  /* vim: set ft=c : */
--- 1,96 ----
  /* mbyte.c */
! int enc_canon_props(char_u *name);
! char_u *mb_init(void);
! int bomb_size(void);
! void remove_bom(char_u *s);
! int mb_get_class(char_u *p);
! int mb_get_class_buf(char_u *p, buf_T *buf);
! int dbcs_class(unsigned lead, unsigned trail);
! int latin_char2len(int c);
! int latin_char2bytes(int c, char_u *buf);
! int latin_ptr2len(char_u *p);
! int latin_ptr2len_len(char_u *p, int size);
! int utf_char2cells(int c);
! int latin_ptr2cells(char_u *p);
! int utf_ptr2cells(char_u *p);
! int dbcs_ptr2cells(char_u *p);
! int latin_ptr2cells_len(char_u *p, int size);
! int latin_char2cells(int c);
! int mb_string2cells(char_u *p, int len);
! int latin_off2cells(unsigned off, unsigned max_off);
! int dbcs_off2cells(unsigned off, unsigned max_off);
! int utf_off2cells(unsigned off, unsigned max_off);
! int latin_ptr2char(char_u *p);
! int utf_ptr2char(char_u *p);
! int mb_ptr2char_adv(char_u **pp);
! int mb_cptr2char_adv(char_u **pp);
! int arabic_combine(int one, int two);
! int arabic_maycombine(int two);
! int utf_composinglike(char_u *p1, char_u *p2);
! int utfc_ptr2char(char_u *p, int *pcc);
! int utfc_ptr2char_len(char_u *p, int *pcc, int maxlen);
! int utfc_char2bytes(int off, char_u *buf);
! int utf_ptr2len(char_u *p);
! int utf_byte2len(int b);
! int utf_ptr2len_len(char_u *p, int size);
! int utfc_ptr2len(char_u *p);
! int utfc_ptr2len_len(char_u *p, int size);
! int utf_char2len(int c);
! int utf_char2bytes(int c, char_u *buf);
! int utf_iscomposing(int c);
! int utf_printable(int c);
! int utf_class(int c);
! int utf_fold(int a);
! int utf_toupper(int a);
! int utf_islower(int a);
! int utf_tolower(int a);
! int utf_isupper(int a);
! int mb_strnicmp(char_u *s1, char_u *s2, size_t nn);
! void show_utf8(void);
! int latin_head_off(char_u *base, char_u *p);
! int dbcs_head_off(char_u *base, char_u *p);
! int dbcs_screen_head_off(char_u *base, char_u *p);
! int utf_head_off(char_u *base, char_u *p);
! void mb_copy_char(char_u **fp, char_u **tp);
! int mb_off_next(char_u *base, char_u *p);
! int mb_tail_off(char_u *base, char_u *p);
! void utf_find_illegal(void);
! int utf_valid_string(char_u *s, char_u *end);
! int dbcs_screen_tail_off(char_u *base, char_u *p);
! void mb_adjust_cursor(void);
! void mb_adjustpos(buf_T *buf, pos_T *lp);
! char_u *mb_prevptr(char_u *line, char_u *p);
! int mb_charlen(char_u *str);
! int mb_charlen_len(char_u *str, int len);
! char_u *mb_unescape(char_u **pp);
! int mb_lefthalve(int row, int col);
! int mb_fix_col(int col, int row);
! char_u *enc_skip(char_u *p);
! char_u *enc_canonize(char_u *enc);
! char_u *enc_locale(void);
! int encname2codepage(char_u *name);
! void *my_iconv_open(char_u *to, char_u *from);
! int iconv_enabled(int verbose);
! void iconv_end(void);
! void im_set_active(int active);
! void xim_set_focus(int focus);
! void im_set_position(int row, int col);
! void xim_set_preedit(void);
! int im_get_feedback_attr(int col);
! void xim_init(void);
! void im_shutdown(void);
! int im_xim_isvalid_imactivate(void);
! void xim_reset(void);
! int xim_queue_key_press_event(GdkEventKey *event, int down);
! int im_get_status(void);
! int preedit_get_status(void);
! int im_is_preediting(void);
! void xim_set_status_area(void);
! int xim_get_status_area_height(void);
! int convert_setup(vimconv_T *vcp, char_u *from, char_u *to);
! int convert_setup_ext(vimconv_T *vcp, char_u *from, int from_unicode_is_utf8, char_u *to, int to_unicode_is_utf8);
! int convert_input(char_u *ptr, int len, int maxlen);
! int convert_input_safe(char_u *ptr, int len, int maxlen, char_u **restp, int *restlenp);
! char_u *string_convert(vimconv_T *vcp, char_u *ptr, int *lenp);
! char_u *string_convert_ext(vimconv_T *vcp, char_u *ptr, int *lenp, int *unconvlenp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/memfile.pro	2013-08-10 13:37:18.000000000 +0200
--- src/proto/memfile.pro	2016-01-19 13:13:06.347034671 +0100
***************
*** 1,18 ****
  /* memfile.c */
! memfile_T *mf_open __ARGS((char_u *fname, int flags));
! int mf_open_file __ARGS((memfile_T *mfp, char_u *fname));
! void mf_close __ARGS((memfile_T *mfp, int del_file));
! void mf_close_file __ARGS((buf_T *buf, int getlines));
! void mf_new_page_size __ARGS((memfile_T *mfp, unsigned new_size));
! bhdr_T *mf_new __ARGS((memfile_T *mfp, int negative, int page_count));
! bhdr_T *mf_get __ARGS((memfile_T *mfp, blocknr_T nr, int page_count));
! void mf_put __ARGS((memfile_T *mfp, bhdr_T *hp, int dirty, int infile));
! void mf_free __ARGS((memfile_T *mfp, bhdr_T *hp));
! int mf_sync __ARGS((memfile_T *mfp, int flags));
! void mf_set_dirty __ARGS((memfile_T *mfp));
! int mf_release_all __ARGS((void));
! blocknr_T mf_trans_del __ARGS((memfile_T *mfp, blocknr_T old_nr));
! void mf_set_ffname __ARGS((memfile_T *mfp));
! void mf_fullname __ARGS((memfile_T *mfp));
! int mf_need_trans __ARGS((memfile_T *mfp));
  /* vim: set ft=c : */
--- 1,18 ----
  /* memfile.c */
! memfile_T *mf_open(char_u *fname, int flags);
! int mf_open_file(memfile_T *mfp, char_u *fname);
! void mf_close(memfile_T *mfp, int del_file);
! void mf_close_file(buf_T *buf, int getlines);
! void mf_new_page_size(memfile_T *mfp, unsigned new_size);
! bhdr_T *mf_new(memfile_T *mfp, int negative, int page_count);
! bhdr_T *mf_get(memfile_T *mfp, blocknr_T nr, int page_count);
! void mf_put(memfile_T *mfp, bhdr_T *hp, int dirty, int infile);
! void mf_free(memfile_T *mfp, bhdr_T *hp);
! int mf_sync(memfile_T *mfp, int flags);
! void mf_set_dirty(memfile_T *mfp);
! int mf_release_all(void);
! blocknr_T mf_trans_del(memfile_T *mfp, blocknr_T old_nr);
! void mf_set_ffname(memfile_T *mfp);
! void mf_fullname(memfile_T *mfp);
! int mf_need_trans(memfile_T *mfp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/memline.pro	2015-06-09 18:35:17.467406952 +0200
--- src/proto/memline.pro	2016-01-19 13:13:06.727030582 +0100
***************
*** 1,37 ****
  /* memline.c */
! int ml_open __ARGS((buf_T *buf));
! void ml_set_crypt_key __ARGS((buf_T *buf, char_u *old_key, char_u *old_cm));
! void ml_setname __ARGS((buf_T *buf));
! void ml_open_files __ARGS((void));
! void ml_open_file __ARGS((buf_T *buf));
! void check_need_swap __ARGS((int newfile));
! void ml_close __ARGS((buf_T *buf, int del_file));
! void ml_close_all __ARGS((int del_file));
! void ml_close_notmod __ARGS((void));
! void ml_timestamp __ARGS((buf_T *buf));
! void ml_recover __ARGS((void));
! int recover_names __ARGS((char_u *fname, int list, int nr, char_u **fname_out));
! void ml_sync_all __ARGS((int check_file, int check_char));
! void ml_preserve __ARGS((buf_T *buf, int message));
! char_u *ml_get __ARGS((linenr_T lnum));
! char_u *ml_get_pos __ARGS((pos_T *pos));
! char_u *ml_get_curline __ARGS((void));
! char_u *ml_get_cursor __ARGS((void));
! char_u *ml_get_buf __ARGS((buf_T *buf, linenr_T lnum, int will_change));
! int ml_line_alloced __ARGS((void));
! int ml_append __ARGS((linenr_T lnum, char_u *line, colnr_T len, int newfile));
! int ml_append_buf __ARGS((buf_T *buf, linenr_T lnum, char_u *line, colnr_T len, int newfile));
! int ml_replace __ARGS((linenr_T lnum, char_u *line, int copy));
! int ml_delete __ARGS((linenr_T lnum, int message));
! void ml_setmarked __ARGS((linenr_T lnum));
! linenr_T ml_firstmarked __ARGS((void));
! void ml_clearmarked __ARGS((void));
! int resolve_symlink __ARGS((char_u *fname, char_u *buf));
! char_u *makeswapname __ARGS((char_u *fname, char_u *ffname, buf_T *buf, char_u *dir_name));
! char_u *get_file_in_dir __ARGS((char_u *fname, char_u *dname));
! void ml_setflags __ARGS((buf_T *buf));
! char_u *ml_encrypt_data __ARGS((memfile_T *mfp, char_u *data, off_t offset, unsigned size));
! void ml_decrypt_data __ARGS((memfile_T *mfp, char_u *data, off_t offset, unsigned size));
! long ml_find_line_or_offset __ARGS((buf_T *buf, linenr_T lnum, long *offp));
! void goto_byte __ARGS((long cnt));
  /* vim: set ft=c : */
--- 1,37 ----
  /* memline.c */
! int ml_open(buf_T *buf);
! void ml_set_crypt_key(buf_T *buf, char_u *old_key, char_u *old_cm);
! void ml_setname(buf_T *buf);
! void ml_open_files(void);
! void ml_open_file(buf_T *buf);
! void check_need_swap(int newfile);
! void ml_close(buf_T *buf, int del_file);
! void ml_close_all(int del_file);
! void ml_close_notmod(void);
! void ml_timestamp(buf_T *buf);
! void ml_recover(void);
! int recover_names(char_u *fname, int list, int nr, char_u **fname_out);
! void ml_sync_all(int check_file, int check_char);
! void ml_preserve(buf_T *buf, int message);
! char_u *ml_get(linenr_T lnum);
! char_u *ml_get_pos(pos_T *pos);
! char_u *ml_get_curline(void);
! char_u *ml_get_cursor(void);
! char_u *ml_get_buf(buf_T *buf, linenr_T lnum, int will_change);
! int ml_line_alloced(void);
! int ml_append(linenr_T lnum, char_u *line, colnr_T len, int newfile);
! int ml_append_buf(buf_T *buf, linenr_T lnum, char_u *line, colnr_T len, int newfile);
! int ml_replace(linenr_T lnum, char_u *line, int copy);
! int ml_delete(linenr_T lnum, int message);
! void ml_setmarked(linenr_T lnum);
! linenr_T ml_firstmarked(void);
! void ml_clearmarked(void);
! int resolve_symlink(char_u *fname, char_u *buf);
! char_u *makeswapname(char_u *fname, char_u *ffname, buf_T *buf, char_u *dir_name);
! char_u *get_file_in_dir(char_u *fname, char_u *dname);
! void ml_setflags(buf_T *buf);
! char_u *ml_encrypt_data(memfile_T *mfp, char_u *data, off_t offset, unsigned size);
! void ml_decrypt_data(memfile_T *mfp, char_u *data, off_t offset, unsigned size);
! long ml_find_line_or_offset(buf_T *buf, linenr_T lnum, long *offp);
! void goto_byte(long cnt);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/menu.pro	2013-08-10 13:37:19.000000000 +0200
--- src/proto/menu.pro	2016-01-19 13:13:07.127026278 +0100
***************
*** 1,22 ****
  /* menu.c */
! void ex_menu __ARGS((exarg_T *eap));
! char_u *set_context_in_menu_cmd __ARGS((expand_T *xp, char_u *cmd, char_u *arg, int forceit));
! char_u *get_menu_name __ARGS((expand_T *xp, int idx));
! char_u *get_menu_names __ARGS((expand_T *xp, int idx));
! char_u *menu_name_skip __ARGS((char_u *name));
! int get_menu_index __ARGS((vimmenu_T *menu, int state));
! int menu_is_menubar __ARGS((char_u *name));
! int menu_is_popup __ARGS((char_u *name));
! int menu_is_child_of_popup __ARGS((vimmenu_T *menu));
! int menu_is_toolbar __ARGS((char_u *name));
! int menu_is_separator __ARGS((char_u *name));
! int check_menu_pointer __ARGS((vimmenu_T *root, vimmenu_T *menu_to_check));
! void gui_create_initial_menus __ARGS((vimmenu_T *menu));
! void gui_update_menus __ARGS((int modes));
! int gui_is_menu_shortcut __ARGS((int key));
! void gui_show_popupmenu __ARGS((void));
! void gui_mch_toggle_tearoffs __ARGS((int enable));
! void ex_emenu __ARGS((exarg_T *eap));
! vimmenu_T *gui_find_menu __ARGS((char_u *path_name));
! void ex_menutranslate __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,22 ----
  /* menu.c */
! void ex_menu(exarg_T *eap);
! char_u *set_context_in_menu_cmd(expand_T *xp, char_u *cmd, char_u *arg, int forceit);
! char_u *get_menu_name(expand_T *xp, int idx);
! char_u *get_menu_names(expand_T *xp, int idx);
! char_u *menu_name_skip(char_u *name);
! int get_menu_index(vimmenu_T *menu, int state);
! int menu_is_menubar(char_u *name);
! int menu_is_popup(char_u *name);
! int menu_is_child_of_popup(vimmenu_T *menu);
! int menu_is_toolbar(char_u *name);
! int menu_is_separator(char_u *name);
! int check_menu_pointer(vimmenu_T *root, vimmenu_T *menu_to_check);
! void gui_create_initial_menus(vimmenu_T *menu);
! void gui_update_menus(int modes);
! int gui_is_menu_shortcut(int key);
! void gui_show_popupmenu(void);
! void gui_mch_toggle_tearoffs(int enable);
! void ex_emenu(exarg_T *eap);
! vimmenu_T *gui_find_menu(char_u *path_name);
! void ex_menutranslate(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/message.pro	2013-08-10 13:37:19.000000000 +0200
--- src/proto/message.pro	2016-01-19 13:13:07.547021759 +0100
***************
*** 1,74 ****
  /* message.c */
! int msg __ARGS((char_u *s));
! int verb_msg __ARGS((char_u *s));
! int msg_attr __ARGS((char_u *s, int attr));
! int msg_attr_keep __ARGS((char_u *s, int attr, int keep));
! char_u *msg_strtrunc __ARGS((char_u *s, int force));
! void trunc_string __ARGS((char_u *s, char_u *buf, int room, int buflen));
! void reset_last_sourcing __ARGS((void));
! void msg_source __ARGS((int attr));
! int emsg_not_now __ARGS((void));
! int emsg __ARGS((char_u *s));
! int emsg2 __ARGS((char_u *s, char_u *a1));
! void emsg_invreg __ARGS((int name));
! char_u *msg_trunc_attr __ARGS((char_u *s, int force, int attr));
! char_u *msg_may_trunc __ARGS((int force, char_u *s));
! int delete_first_msg __ARGS((void));
! void ex_messages __ARGS((exarg_T *eap));
! void msg_end_prompt __ARGS((void));
! void wait_return __ARGS((int redraw));
! void set_keep_msg __ARGS((char_u *s, int attr));
! void set_keep_msg_from_hist __ARGS((void));
! void msg_start __ARGS((void));
! void msg_starthere __ARGS((void));
! void msg_putchar __ARGS((int c));
! void msg_putchar_attr __ARGS((int c, int attr));
! void msg_outnum __ARGS((long n));
! void msg_home_replace __ARGS((char_u *fname));
! void msg_home_replace_hl __ARGS((char_u *fname));
! int msg_outtrans __ARGS((char_u *str));
! int msg_outtrans_attr __ARGS((char_u *str, int attr));
! int msg_outtrans_len __ARGS((char_u *str, int len));
! char_u *msg_outtrans_one __ARGS((char_u *p, int attr));
! int msg_outtrans_len_attr __ARGS((char_u *msgstr, int len, int attr));
! void msg_make __ARGS((char_u *arg));
! int msg_outtrans_special __ARGS((char_u *strstart, int from));
! char_u *str2special_save __ARGS((char_u *str, int is_lhs));
! char_u *str2special __ARGS((char_u **sp, int from));
! void str2specialbuf __ARGS((char_u *sp, char_u *buf, int len));
! void msg_prt_line __ARGS((char_u *s, int list));
! void msg_puts __ARGS((char_u *s));
! void msg_puts_title __ARGS((char_u *s));
! void msg_puts_long_attr __ARGS((char_u *longstr, int attr));
! void msg_puts_long_len_attr __ARGS((char_u *longstr, int len, int attr));
! void msg_puts_attr __ARGS((char_u *s, int attr));
! void may_clear_sb_text __ARGS((void));
! void clear_sb_text __ARGS((void));
! void show_sb_text __ARGS((void));
! void msg_sb_eol __ARGS((void));
! int msg_use_printf __ARGS((void));
! void mch_errmsg __ARGS((char *str));
! void mch_msg __ARGS((char *str));
! void msg_moremsg __ARGS((int full));
! void repeat_message __ARGS((void));
! void msg_clr_eos __ARGS((void));
! void msg_clr_eos_force __ARGS((void));
! void msg_clr_cmdline __ARGS((void));
! int msg_end __ARGS((void));
! void msg_check __ARGS((void));
! int redirecting __ARGS((void));
! void verbose_enter __ARGS((void));
! void verbose_leave __ARGS((void));
! void verbose_enter_scroll __ARGS((void));
! void verbose_leave_scroll __ARGS((void));
! void verbose_stop __ARGS((void));
! int verbose_open __ARGS((void));
! void give_warning __ARGS((char_u *message, int hl));
! void msg_advance __ARGS((int col));
! int do_dialog __ARGS((int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd));
! void display_confirm_msg __ARGS((void));
! int vim_dialog_yesno __ARGS((int type, char_u *title, char_u *message, int dflt));
! int vim_dialog_yesnocancel __ARGS((int type, char_u *title, char_u *message, int dflt));
! int vim_dialog_yesnoallcancel __ARGS((int type, char_u *title, char_u *message, int dflt));
! char_u *do_browse __ARGS((int flags, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, buf_T *buf));
  /* vim: set ft=c : */
--- 1,74 ----
  /* message.c */
! int msg(char_u *s);
! int verb_msg(char_u *s);
! int msg_attr(char_u *s, int attr);
! int msg_attr_keep(char_u *s, int attr, int keep);
! char_u *msg_strtrunc(char_u *s, int force);
! void trunc_string(char_u *s, char_u *buf, int room, int buflen);
! void reset_last_sourcing(void);
! void msg_source(int attr);
! int emsg_not_now(void);
! int emsg(char_u *s);
! int emsg2(char_u *s, char_u *a1);
! void emsg_invreg(int name);
! char_u *msg_trunc_attr(char_u *s, int force, int attr);
! char_u *msg_may_trunc(int force, char_u *s);
! int delete_first_msg(void);
! void ex_messages(exarg_T *eap);
! void msg_end_prompt(void);
! void wait_return(int redraw);
! void set_keep_msg(char_u *s, int attr);
! void set_keep_msg_from_hist(void);
! void msg_start(void);
! void msg_starthere(void);
! void msg_putchar(int c);
! void msg_putchar_attr(int c, int attr);
! void msg_outnum(long n);
! void msg_home_replace(char_u *fname);
! void msg_home_replace_hl(char_u *fname);
! int msg_outtrans(char_u *str);
! int msg_outtrans_attr(char_u *str, int attr);
! int msg_outtrans_len(char_u *str, int len);
! char_u *msg_outtrans_one(char_u *p, int attr);
! int msg_outtrans_len_attr(char_u *msgstr, int len, int attr);
! void msg_make(char_u *arg);
! int msg_outtrans_special(char_u *strstart, int from);
! char_u *str2special_save(char_u *str, int is_lhs);
! char_u *str2special(char_u **sp, int from);
! void str2specialbuf(char_u *sp, char_u *buf, int len);
! void msg_prt_line(char_u *s, int list);
! void msg_puts(char_u *s);
! void msg_puts_title(char_u *s);
! void msg_puts_long_attr(char_u *longstr, int attr);
! void msg_puts_long_len_attr(char_u *longstr, int len, int attr);
! void msg_puts_attr(char_u *s, int attr);
! void may_clear_sb_text(void);
! void clear_sb_text(void);
! void show_sb_text(void);
! void msg_sb_eol(void);
! int msg_use_printf(void);
! void mch_errmsg(char *str);
! void mch_msg(char *str);
! void msg_moremsg(int full);
! void repeat_message(void);
! void msg_clr_eos(void);
! void msg_clr_eos_force(void);
! void msg_clr_cmdline(void);
! int msg_end(void);
! void msg_check(void);
! int redirecting(void);
! void verbose_enter(void);
! void verbose_leave(void);
! void verbose_enter_scroll(void);
! void verbose_leave_scroll(void);
! void verbose_stop(void);
! int verbose_open(void);
! void give_warning(char_u *message, int hl);
! void msg_advance(int col);
! int do_dialog(int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd);
! void display_confirm_msg(void);
! int vim_dialog_yesno(int type, char_u *title, char_u *message, int dflt);
! int vim_dialog_yesnocancel(int type, char_u *title, char_u *message, int dflt);
! int vim_dialog_yesnoallcancel(int type, char_u *title, char_u *message, int dflt);
! char_u *do_browse(int flags, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, buf_T *buf);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/misc1.pro	2015-07-21 17:53:11.585527913 +0200
--- src/proto/misc1.pro	2016-01-19 13:13:07.939017540 +0100
***************
*** 1,108 ****
  /* misc1.c */
! int get_indent __ARGS((void));
! int get_indent_lnum __ARGS((linenr_T lnum));
! int get_indent_buf __ARGS((buf_T *buf, linenr_T lnum));
! int get_indent_str __ARGS((char_u *ptr, int ts, int list));
! int set_indent __ARGS((int size, int flags));
! int get_number_indent __ARGS((linenr_T lnum));
! int get_breakindent_win __ARGS((win_T *wp, char_u *line));
! int open_line __ARGS((int dir, int flags, int second_line_indent));
! int get_leader_len __ARGS((char_u *line, char_u **flags, int backward, int include_space));
! int get_last_leader_offset __ARGS((char_u *line, char_u **flags));
! int plines __ARGS((linenr_T lnum));
! int plines_win __ARGS((win_T *wp, linenr_T lnum, int winheight));
! int plines_nofill __ARGS((linenr_T lnum));
! int plines_win_nofill __ARGS((win_T *wp, linenr_T lnum, int winheight));
! int plines_win_nofold __ARGS((win_T *wp, linenr_T lnum));
! int plines_win_col __ARGS((win_T *wp, linenr_T lnum, long column));
! int plines_m_win __ARGS((win_T *wp, linenr_T first, linenr_T last));
! void ins_bytes __ARGS((char_u *p));
! void ins_bytes_len __ARGS((char_u *p, int len));
! void ins_char __ARGS((int c));
! void ins_char_bytes __ARGS((char_u *buf, int charlen));
! void ins_str __ARGS((char_u *s));
! int del_char __ARGS((int fixpos));
! int del_chars __ARGS((long count, int fixpos));
! int del_bytes __ARGS((long count, int fixpos_arg, int use_delcombine));
! int truncate_line __ARGS((int fixpos));
! void del_lines __ARGS((long nlines, int undo));
! int gchar_pos __ARGS((pos_T *pos));
! int gchar_cursor __ARGS((void));
! void pchar_cursor __ARGS((int c));
! int inindent __ARGS((int extra));
! char_u *skip_to_option_part __ARGS((char_u *p));
! void changed __ARGS((void));
! void changed_int __ARGS((void));
! void changed_bytes __ARGS((linenr_T lnum, colnr_T col));
! void appended_lines __ARGS((linenr_T lnum, long count));
! void appended_lines_mark __ARGS((linenr_T lnum, long count));
! void deleted_lines __ARGS((linenr_T lnum, long count));
! void deleted_lines_mark __ARGS((linenr_T lnum, long count));
! void changed_lines __ARGS((linenr_T lnum, colnr_T col, linenr_T lnume, long xtra));
! void unchanged __ARGS((buf_T *buf, int ff));
! void check_status __ARGS((buf_T *buf));
! void change_warning __ARGS((int col));
! int ask_yesno __ARGS((char_u *str, int direct));
! int is_mouse_key __ARGS((int c));
! int get_keystroke __ARGS((void));
! int get_number __ARGS((int colon, int *mouse_used));
! int prompt_for_number __ARGS((int *mouse_used));
! void msgmore __ARGS((long n));
! void beep_flush __ARGS((void));
! void vim_beep __ARGS((unsigned val));
! void init_homedir __ARGS((void));
! void free_homedir __ARGS((void));
! void free_users __ARGS((void));
! char_u *expand_env_save __ARGS((char_u *src));
! char_u *expand_env_save_opt __ARGS((char_u *src, int one));
! void expand_env __ARGS((char_u *src, char_u *dst, int dstlen));
! void expand_env_esc __ARGS((char_u *srcp, char_u *dst, int dstlen, int esc, int one, char_u *startstr));
! char_u *vim_getenv __ARGS((char_u *name, int *mustfree));
! void vim_setenv __ARGS((char_u *name, char_u *val));
! char_u *get_env_name __ARGS((expand_T *xp, int idx));
! char_u *get_users __ARGS((expand_T *xp, int idx));
! int match_user __ARGS((char_u *name));
! void home_replace __ARGS((buf_T *buf, char_u *src, char_u *dst, int dstlen, int one));
! char_u *home_replace_save __ARGS((buf_T *buf, char_u *src));
! int fullpathcmp __ARGS((char_u *s1, char_u *s2, int checkname));
! char_u *gettail __ARGS((char_u *fname));
! char_u *gettail_sep __ARGS((char_u *fname));
! char_u *getnextcomp __ARGS((char_u *fname));
! char_u *get_past_head __ARGS((char_u *path));
! int vim_ispathsep __ARGS((int c));
! int vim_ispathsep_nocolon __ARGS((int c));
! int vim_ispathlistsep __ARGS((int c));
! void shorten_dir __ARGS((char_u *str));
! int dir_of_file_exists __ARGS((char_u *fname));
! int vim_fnamecmp __ARGS((char_u *x, char_u *y));
! int vim_fnamencmp __ARGS((char_u *x, char_u *y, size_t len));
! char_u *concat_fnames __ARGS((char_u *fname1, char_u *fname2, int sep));
! char_u *concat_str __ARGS((char_u *str1, char_u *str2));
! void add_pathsep __ARGS((char_u *p));
! char_u *FullName_save __ARGS((char_u *fname, int force));
! pos_T *find_start_comment __ARGS((int ind_maxcomment));
! void do_c_expr_indent __ARGS((void));
! int cin_islabel __ARGS((void));
! int cin_iscase __ARGS((char_u *s, int strict));
! int cin_isscopedecl __ARGS((char_u *s));
! void parse_cino __ARGS((buf_T *buf));
! int get_c_indent __ARGS((void));
! int get_expr_indent __ARGS((void));
! int get_lisp_indent __ARGS((void));
! void prepare_to_exit __ARGS((void));
! void preserve_exit __ARGS((void));
! int vim_fexists __ARGS((char_u *fname));
! void line_breakcheck __ARGS((void));
! void fast_breakcheck __ARGS((void));
! int expand_wildcards_eval __ARGS((char_u **pat, int *num_file, char_u ***file, int flags));
! int expand_wildcards __ARGS((int num_pat, char_u **pat, int *num_file, char_u ***file, int flags));
! int match_suffix __ARGS((char_u *fname));
! int unix_expandpath __ARGS((garray_T *gap, char_u *path, int wildoff, int flags, int didstar));
! void remove_duplicates __ARGS((garray_T *gap));
! int gen_expand_wildcards __ARGS((int num_pat, char_u **pat, int *num_file, char_u ***file, int flags));
! void addfile __ARGS((garray_T *gap, char_u *f, int flags));
! char_u *get_cmd_output __ARGS((char_u *cmd, char_u *infile, int flags, int *ret_len));
! void FreeWild __ARGS((int count, char_u **files));
! int goto_im __ARGS((void));
! char_u *get_isolated_shell_name __ARGS((void));
  /* vim: set ft=c : */
--- 1,108 ----
  /* misc1.c */
! int get_indent(void);
! int get_indent_lnum(linenr_T lnum);
! int get_indent_buf(buf_T *buf, linenr_T lnum);
! int get_indent_str(char_u *ptr, int ts, int list);
! int set_indent(int size, int flags);
! int get_number_indent(linenr_T lnum);
! int get_breakindent_win(win_T *wp, char_u *line);
! int open_line(int dir, int flags, int second_line_indent);
! int get_leader_len(char_u *line, char_u **flags, int backward, int include_space);
! int get_last_leader_offset(char_u *line, char_u **flags);
! int plines(linenr_T lnum);
! int plines_win(win_T *wp, linenr_T lnum, int winheight);
! int plines_nofill(linenr_T lnum);
! int plines_win_nofill(win_T *wp, linenr_T lnum, int winheight);
! int plines_win_nofold(win_T *wp, linenr_T lnum);
! int plines_win_col(win_T *wp, linenr_T lnum, long column);
! int plines_m_win(win_T *wp, linenr_T first, linenr_T last);
! void ins_bytes(char_u *p);
! void ins_bytes_len(char_u *p, int len);
! void ins_char(int c);
! void ins_char_bytes(char_u *buf, int charlen);
! void ins_str(char_u *s);
! int del_char(int fixpos);
! int del_chars(long count, int fixpos);
! int del_bytes(long count, int fixpos_arg, int use_delcombine);
! int truncate_line(int fixpos);
! void del_lines(long nlines, int undo);
! int gchar_pos(pos_T *pos);
! int gchar_cursor(void);
! void pchar_cursor(int c);
! int inindent(int extra);
! char_u *skip_to_option_part(char_u *p);
! void changed(void);
! void changed_int(void);
! void changed_bytes(linenr_T lnum, colnr_T col);
! void appended_lines(linenr_T lnum, long count);
! void appended_lines_mark(linenr_T lnum, long count);
! void deleted_lines(linenr_T lnum, long count);
! void deleted_lines_mark(linenr_T lnum, long count);
! void changed_lines(linenr_T lnum, colnr_T col, linenr_T lnume, long xtra);
! void unchanged(buf_T *buf, int ff);
! void check_status(buf_T *buf);
! void change_warning(int col);
! int ask_yesno(char_u *str, int direct);
! int is_mouse_key(int c);
! int get_keystroke(void);
! int get_number(int colon, int *mouse_used);
! int prompt_for_number(int *mouse_used);
! void msgmore(long n);
! void beep_flush(void);
! void vim_beep(unsigned val);
! void init_homedir(void);
! void free_homedir(void);
! void free_users(void);
! char_u *expand_env_save(char_u *src);
! char_u *expand_env_save_opt(char_u *src, int one);
! void expand_env(char_u *src, char_u *dst, int dstlen);
! void expand_env_esc(char_u *srcp, char_u *dst, int dstlen, int esc, int one, char_u *startstr);
! char_u *vim_getenv(char_u *name, int *mustfree);
! void vim_setenv(char_u *name, char_u *val);
! char_u *get_env_name(expand_T *xp, int idx);
! char_u *get_users(expand_T *xp, int idx);
! int match_user(char_u *name);
! void home_replace(buf_T *buf, char_u *src, char_u *dst, int dstlen, int one);
! char_u *home_replace_save(buf_T *buf, char_u *src);
! int fullpathcmp(char_u *s1, char_u *s2, int checkname);
! char_u *gettail(char_u *fname);
! char_u *gettail_sep(char_u *fname);
! char_u *getnextcomp(char_u *fname);
! char_u *get_past_head(char_u *path);
! int vim_ispathsep(int c);
! int vim_ispathsep_nocolon(int c);
! int vim_ispathlistsep(int c);
! void shorten_dir(char_u *str);
! int dir_of_file_exists(char_u *fname);
! int vim_fnamecmp(char_u *x, char_u *y);
! int vim_fnamencmp(char_u *x, char_u *y, size_t len);
! char_u *concat_fnames(char_u *fname1, char_u *fname2, int sep);
! char_u *concat_str(char_u *str1, char_u *str2);
! void add_pathsep(char_u *p);
! char_u *FullName_save(char_u *fname, int force);
! pos_T *find_start_comment(int ind_maxcomment);
! void do_c_expr_indent(void);
! int cin_islabel(void);
! int cin_iscase(char_u *s, int strict);
! int cin_isscopedecl(char_u *s);
! void parse_cino(buf_T *buf);
! int get_c_indent(void);
! int get_expr_indent(void);
! int get_lisp_indent(void);
! void prepare_to_exit(void);
! void preserve_exit(void);
! int vim_fexists(char_u *fname);
! void line_breakcheck(void);
! void fast_breakcheck(void);
! int expand_wildcards_eval(char_u **pat, int *num_file, char_u ***file, int flags);
! int expand_wildcards(int num_pat, char_u **pat, int *num_files, char_u ***files, int flags);
! int match_suffix(char_u *fname);
! int unix_expandpath(garray_T *gap, char_u *path, int wildoff, int flags, int didstar);
! void remove_duplicates(garray_T *gap);
! int gen_expand_wildcards(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
! void addfile(garray_T *gap, char_u *f, int flags);
! char_u *get_cmd_output(char_u *cmd, char_u *infile, int flags, int *ret_len);
! void FreeWild(int count, char_u **files);
! int goto_im(void);
! char_u *get_isolated_shell_name(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/misc2.pro	2016-01-18 23:28:44.161810727 +0100
--- src/proto/misc2.pro	2016-01-19 13:13:08.335013278 +0100
***************
*** 1,113 ****
  /* misc2.c */
! int virtual_active __ARGS((void));
! int getviscol __ARGS((void));
! int getviscol2 __ARGS((colnr_T col, colnr_T coladd));
! int coladvance_force __ARGS((colnr_T wcol));
! int coladvance __ARGS((colnr_T wcol));
! int getvpos __ARGS((pos_T *pos, colnr_T wcol));
! int inc_cursor __ARGS((void));
! int inc __ARGS((pos_T *lp));
! int incl __ARGS((pos_T *lp));
! int dec_cursor __ARGS((void));
! int dec __ARGS((pos_T *lp));
! int decl __ARGS((pos_T *lp));
! linenr_T get_cursor_rel_lnum __ARGS((win_T *wp, linenr_T lnum));
! void check_cursor_lnum __ARGS((void));
! void check_cursor_col __ARGS((void));
! void check_cursor_col_win __ARGS((win_T *win));
! void check_cursor __ARGS((void));
! void adjust_cursor_col __ARGS((void));
! int leftcol_changed __ARGS((void));
! void vim_mem_profile_dump __ARGS((void));
! char_u *alloc __ARGS((unsigned size));
! char_u *alloc_id __ARGS((unsigned size, alloc_id_T id));
! char_u *alloc_clear __ARGS((unsigned size));
! char_u *alloc_check __ARGS((unsigned size));
! char_u *lalloc_clear __ARGS((long_u size, int message));
! char_u *lalloc __ARGS((long_u size, int message));
! char_u *lalloc_id __ARGS((long_u size, int message, alloc_id_T id));
! void *mem_realloc __ARGS((void *ptr, size_t size));
! void do_outofmem_msg __ARGS((long_u size));
! void free_all_mem __ARGS((void));
! char_u *vim_strsave __ARGS((char_u *string));
! char_u *vim_strnsave __ARGS((char_u *string, int len));
! char_u *vim_strsave_escaped __ARGS((char_u *string, char_u *esc_chars));
! char_u *vim_strsave_escaped_ext __ARGS((char_u *string, char_u *esc_chars, int cc, int bsl));
! int csh_like_shell __ARGS((void));
! char_u *vim_strsave_shellescape __ARGS((char_u *string, int do_special, int do_newline));
! char_u *vim_strsave_up __ARGS((char_u *string));
! char_u *vim_strnsave_up __ARGS((char_u *string, int len));
! void vim_strup __ARGS((char_u *p));
! char_u *strup_save __ARGS((char_u *orig));
! void del_trailing_spaces __ARGS((char_u *ptr));
! void vim_strncpy __ARGS((char_u *to, char_u *from, size_t len));
! void vim_strcat __ARGS((char_u *to, char_u *from, size_t tosize));
! int copy_option_part __ARGS((char_u **option, char_u *buf, int maxlen, char *sep_chars));
! void vim_free __ARGS((void *x));
! int vim_stricmp __ARGS((char *s1, char *s2));
! int vim_strnicmp __ARGS((char *s1, char *s2, size_t len));
! char_u *vim_strchr __ARGS((char_u *string, int c));
! char_u *vim_strbyte __ARGS((char_u *string, int c));
! char_u *vim_strrchr __ARGS((char_u *string, int c));
! int vim_isspace __ARGS((int x));
! void ga_clear __ARGS((garray_T *gap));
! void ga_clear_strings __ARGS((garray_T *gap));
! void ga_init __ARGS((garray_T *gap));
! void ga_init2 __ARGS((garray_T *gap, int itemsize, int growsize));
! int ga_grow __ARGS((garray_T *gap, int n));
! char_u *ga_concat_strings __ARGS((garray_T *gap, char *sep));
! void ga_add_string __ARGS((garray_T *gap, char_u *p));
! void ga_concat __ARGS((garray_T *gap, char_u *s));
! void ga_append __ARGS((garray_T *gap, int c));
! void append_ga_line __ARGS((garray_T *gap));
! int name_to_mod_mask __ARGS((int c));
! int simplify_key __ARGS((int key, int *modifiers));
! int handle_x_keys __ARGS((int key));
! char_u *get_special_key_name __ARGS((int c, int modifiers));
! int trans_special __ARGS((char_u **srcp, char_u *dst, int keycode));
! int find_special_key __ARGS((char_u **srcp, int *modp, int keycode, int keep_x_key));
! int extract_modifiers __ARGS((int key, int *modp));
! int find_special_key_in_table __ARGS((int c));
! int get_special_key_code __ARGS((char_u *name));
! char_u *get_key_name __ARGS((int i));
! int get_mouse_button __ARGS((int code, int *is_click, int *is_drag));
! int get_pseudo_mouse_code __ARGS((int button, int is_click, int is_drag));
! int get_fileformat __ARGS((buf_T *buf));
! int get_fileformat_force __ARGS((buf_T *buf, exarg_T *eap));
! void set_fileformat __ARGS((int t, int opt_flags));
! int default_fileformat __ARGS((void));
! int call_shell __ARGS((char_u *cmd, int opt));
! int get_real_state __ARGS((void));
! int after_pathsep __ARGS((char_u *b, char_u *p));
! int same_directory __ARGS((char_u *f1, char_u *f2));
! int vim_chdirfile __ARGS((char_u *fname));
! int illegal_slash __ARGS((char *name));
! char_u *parse_shape_opt __ARGS((int what));
! int get_shape_idx __ARGS((int mouse));
! void update_mouseshape __ARGS((int shape_idx));
! void *vim_findfile_init __ARGS((char_u *path, char_u *filename, char_u *stopdirs, int level, int free_visited, int find_what, void *search_ctx_arg, int tagfile, char_u *rel_fname));
! char_u *vim_findfile_stopdir __ARGS((char_u *buf));
! void vim_findfile_cleanup __ARGS((void *ctx));
! char_u *vim_findfile __ARGS((void *search_ctx_arg));
! void vim_findfile_free_visited __ARGS((void *search_ctx_arg));
! char_u *find_file_in_path __ARGS((char_u *ptr, int len, int options, int first, char_u *rel_fname));
! char_u *find_directory_in_path __ARGS((char_u *ptr, int len, int options, char_u *rel_fname));
! char_u *find_file_in_path_option __ARGS((char_u *ptr, int len, int options, int first, char_u *path_option, int find_what, char_u *rel_fname, char_u *suffixes));
! int vim_chdir __ARGS((char_u *new_dir));
! int get_user_name __ARGS((char_u *buf, int len));
! void sort_strings __ARGS((char_u **files, int count));
! int pathcmp __ARGS((const char *p, const char *q, int maxlen));
! int filewritable __ARGS((char_u *fname));
! int emsg3 __ARGS((char_u *s, char_u *a1, char_u *a2));
! int emsgn __ARGS((char_u *s, long n));
! int get2c __ARGS((FILE *fd));
! int get3c __ARGS((FILE *fd));
! int get4c __ARGS((FILE *fd));
! time_t get8ctime __ARGS((FILE *fd));
! char_u *read_string __ARGS((FILE *fd, int cnt));
! int put_bytes __ARGS((FILE *fd, long_u nr, int len));
! int put_time __ARGS((FILE *fd, time_t the_time));
! void time_to_bytes __ARGS((time_t the_time, char_u *buf));
! int has_non_ascii __ARGS((char_u *s));
! void parse_queued_messages __ARGS((void));
  /* vim: set ft=c : */
--- 1,113 ----
  /* misc2.c */
! int virtual_active(void);
! int getviscol(void);
! int getviscol2(colnr_T col, colnr_T coladd);
! int coladvance_force(colnr_T wcol);
! int coladvance(colnr_T wcol);
! int getvpos(pos_T *pos, colnr_T wcol);
! int inc_cursor(void);
! int inc(pos_T *lp);
! int incl(pos_T *lp);
! int dec_cursor(void);
! int dec(pos_T *lp);
! int decl(pos_T *lp);
! linenr_T get_cursor_rel_lnum(win_T *wp, linenr_T lnum);
! void check_cursor_lnum(void);
! void check_cursor_col(void);
! void check_cursor_col_win(win_T *win);
! void check_cursor(void);
! void adjust_cursor_col(void);
! int leftcol_changed(void);
! void vim_mem_profile_dump(void);
! char_u *alloc(unsigned size);
! char_u *alloc_id(unsigned size, alloc_id_T id);
! char_u *alloc_clear(unsigned size);
! char_u *alloc_check(unsigned size);
! char_u *lalloc_clear(long_u size, int message);
! char_u *lalloc(long_u size, int message);
! char_u *lalloc_id(long_u size, int message, alloc_id_T id);
! void *mem_realloc(void *ptr, size_t size);
! void do_outofmem_msg(long_u size);
! void free_all_mem(void);
! char_u *vim_strsave(char_u *string);
! char_u *vim_strnsave(char_u *string, int len);
! char_u *vim_strsave_escaped(char_u *string, char_u *esc_chars);
! char_u *vim_strsave_escaped_ext(char_u *string, char_u *esc_chars, int cc, int bsl);
! int csh_like_shell(void);
! char_u *vim_strsave_shellescape(char_u *string, int do_special, int do_newline);
! char_u *vim_strsave_up(char_u *string);
! char_u *vim_strnsave_up(char_u *string, int len);
! void vim_strup(char_u *p);
! char_u *strup_save(char_u *orig);
! void del_trailing_spaces(char_u *ptr);
! void vim_strncpy(char_u *to, char_u *from, size_t len);
! void vim_strcat(char_u *to, char_u *from, size_t tosize);
! int copy_option_part(char_u **option, char_u *buf, int maxlen, char *sep_chars);
! void vim_free(void *x);
! int vim_stricmp(char *s1, char *s2);
! int vim_strnicmp(char *s1, char *s2, size_t len);
! char_u *vim_strchr(char_u *string, int c);
! char_u *vim_strbyte(char_u *string, int c);
! char_u *vim_strrchr(char_u *string, int c);
! int vim_isspace(int x);
! void ga_clear(garray_T *gap);
! void ga_clear_strings(garray_T *gap);
! void ga_init(garray_T *gap);
! void ga_init2(garray_T *gap, int itemsize, int growsize);
! int ga_grow(garray_T *gap, int n);
! char_u *ga_concat_strings(garray_T *gap, char *sep);
! void ga_add_string(garray_T *gap, char_u *p);
! void ga_concat(garray_T *gap, char_u *s);
! void ga_append(garray_T *gap, int c);
! void append_ga_line(garray_T *gap);
! int name_to_mod_mask(int c);
! int simplify_key(int key, int *modifiers);
! int handle_x_keys(int key);
! char_u *get_special_key_name(int c, int modifiers);
! int trans_special(char_u **srcp, char_u *dst, int keycode);
! int find_special_key(char_u **srcp, int *modp, int keycode, int keep_x_key);
! int extract_modifiers(int key, int *modp);
! int find_special_key_in_table(int c);
! int get_special_key_code(char_u *name);
! char_u *get_key_name(int i);
! int get_mouse_button(int code, int *is_click, int *is_drag);
! int get_pseudo_mouse_code(int button, int is_click, int is_drag);
! int get_fileformat(buf_T *buf);
! int get_fileformat_force(buf_T *buf, exarg_T *eap);
! void set_fileformat(int t, int opt_flags);
! int default_fileformat(void);
! int call_shell(char_u *cmd, int opt);
! int get_real_state(void);
! int after_pathsep(char_u *b, char_u *p);
! int same_directory(char_u *f1, char_u *f2);
! int vim_chdirfile(char_u *fname);
! int illegal_slash(char *name);
! char_u *parse_shape_opt(int what);
! int get_shape_idx(int mouse);
! void update_mouseshape(int shape_idx);
! void *vim_findfile_init(char_u *path, char_u *filename, char_u *stopdirs, int level, int free_visited, int find_what, void *search_ctx_arg, int tagfile, char_u *rel_fname);
! char_u *vim_findfile_stopdir(char_u *buf);
! void vim_findfile_cleanup(void *ctx);
! char_u *vim_findfile(void *search_ctx_arg);
! void vim_findfile_free_visited(void *search_ctx_arg);
! char_u *find_file_in_path(char_u *ptr, int len, int options, int first, char_u *rel_fname);
! char_u *find_directory_in_path(char_u *ptr, int len, int options, char_u *rel_fname);
! char_u *find_file_in_path_option(char_u *ptr, int len, int options, int first, char_u *path_option, int find_what, char_u *rel_fname, char_u *suffixes);
! int vim_chdir(char_u *new_dir);
! int get_user_name(char_u *buf, int len);
! void sort_strings(char_u **files, int count);
! int pathcmp(const char *p, const char *q, int maxlen);
! int filewritable(char_u *fname);
! int emsg3(char_u *s, char_u *a1, char_u *a2);
! int emsgn(char_u *s, long n);
! int get2c(FILE *fd);
! int get3c(FILE *fd);
! int get4c(FILE *fd);
! time_t get8ctime(FILE *fd);
! char_u *read_string(FILE *fd, int cnt);
! int put_bytes(FILE *fd, long_u nr, int len);
! int put_time(FILE *fd, time_t the_time);
! void time_to_bytes(time_t the_time, char_u *buf);
! int has_non_ascii(char_u *s);
! void parse_queued_messages(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/move.pro	2013-08-10 13:37:20.000000000 +0200
--- src/proto/move.pro	2016-01-19 13:13:08.723009103 +0100
***************
*** 1,41 ****
  /* move.c */
! void update_topline_redraw __ARGS((void));
! void update_topline __ARGS((void));
! void update_curswant __ARGS((void));
! void check_cursor_moved __ARGS((win_T *wp));
! void changed_window_setting __ARGS((void));
! void changed_window_setting_win __ARGS((win_T *wp));
! void set_topline __ARGS((win_T *wp, linenr_T lnum));
! void changed_cline_bef_curs __ARGS((void));
! void changed_cline_bef_curs_win __ARGS((win_T *wp));
! void changed_line_abv_curs __ARGS((void));
! void changed_line_abv_curs_win __ARGS((win_T *wp));
! void validate_botline __ARGS((void));
! void invalidate_botline __ARGS((void));
! void invalidate_botline_win __ARGS((win_T *wp));
! void approximate_botline_win __ARGS((win_T *wp));
! int cursor_valid __ARGS((void));
! void validate_cursor __ARGS((void));
! void validate_cline_row __ARGS((void));
! void validate_virtcol __ARGS((void));
! void validate_virtcol_win __ARGS((win_T *wp));
! void validate_cursor_col __ARGS((void));
! int win_col_off __ARGS((win_T *wp));
! int curwin_col_off __ARGS((void));
! int win_col_off2 __ARGS((win_T *wp));
! int curwin_col_off2 __ARGS((void));
! void curs_columns __ARGS((int may_scroll));
! void scrolldown __ARGS((long line_count, int byfold));
! void scrollup __ARGS((long line_count, int byfold));
! void check_topfill __ARGS((win_T *wp, int down));
! void scrolldown_clamp __ARGS((void));
! void scrollup_clamp __ARGS((void));
! void scroll_cursor_top __ARGS((int min_scroll, int always));
! void set_empty_rows __ARGS((win_T *wp, int used));
! void scroll_cursor_bot __ARGS((int min_scroll, int set_topbot));
! void scroll_cursor_halfway __ARGS((int atend));
! void cursor_correct __ARGS((void));
! int onepage __ARGS((int dir, long count));
! void halfpage __ARGS((int flag, linenr_T Prenum));
! void do_check_cursorbind __ARGS((void));
  /* vim: set ft=c : */
--- 1,41 ----
  /* move.c */
! void update_topline_redraw(void);
! void update_topline(void);
! void update_curswant(void);
! void check_cursor_moved(win_T *wp);
! void changed_window_setting(void);
! void changed_window_setting_win(win_T *wp);
! void set_topline(win_T *wp, linenr_T lnum);
! void changed_cline_bef_curs(void);
! void changed_cline_bef_curs_win(win_T *wp);
! void changed_line_abv_curs(void);
! void changed_line_abv_curs_win(win_T *wp);
! void validate_botline(void);
! void invalidate_botline(void);
! void invalidate_botline_win(win_T *wp);
! void approximate_botline_win(win_T *wp);
! int cursor_valid(void);
! void validate_cursor(void);
! void validate_cline_row(void);
! void validate_virtcol(void);
! void validate_virtcol_win(win_T *wp);
! void validate_cursor_col(void);
! int win_col_off(win_T *wp);
! int curwin_col_off(void);
! int win_col_off2(win_T *wp);
! int curwin_col_off2(void);
! void curs_columns(int may_scroll);
! void scrolldown(long line_count, int byfold);
! void scrollup(long line_count, int byfold);
! void check_topfill(win_T *wp, int down);
! void scrolldown_clamp(void);
! void scrollup_clamp(void);
! void scroll_cursor_top(int min_scroll, int always);
! void set_empty_rows(win_T *wp, int used);
! void scroll_cursor_bot(int min_scroll, int set_topbot);
! void scroll_cursor_halfway(int atend);
! void cursor_correct(void);
! int onepage(int dir, long count);
! void halfpage(int flag, linenr_T Prenum);
! void do_check_cursorbind(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/netbeans.pro	2013-08-10 13:37:31.000000000 +0200
--- src/proto/netbeans.pro	2016-01-19 13:13:17.822911175 +0100
***************
*** 1,30 ****
  /* netbeans.c */
! void netbeans_parse_messages __ARGS((void));
! void netbeans_read __ARGS((void));
! int isNetbeansBuffer __ARGS((buf_T *bufp));
! int isNetbeansModified __ARGS((buf_T *bufp));
! void netbeans_end __ARGS((void));
! void ex_nbclose __ARGS((exarg_T *eap));
! void ex_nbkey __ARGS((exarg_T *eap));
! void ex_nbstart __ARGS((exarg_T *eap));
! void netbeans_beval_cb __ARGS((BalloonEval *beval, int state));
! int netbeans_active __ARGS((void));
! int netbeans_filedesc __ARGS((void));
! void netbeans_gui_register __ARGS((void));
! void netbeans_open __ARGS((char *params, int doabort));
! void netbeans_send_disconnect __ARGS((void));
! void netbeans_frame_moved __ARGS((int new_x, int new_y));
! void netbeans_file_activated __ARGS((buf_T *bufp));
! void netbeans_file_opened __ARGS((buf_T *bufp));
! void netbeans_file_killed __ARGS((buf_T *bufp));
! void netbeans_inserted __ARGS((buf_T *bufp, linenr_T linenr, colnr_T col, char_u *txt, int newlen));
! void netbeans_removed __ARGS((buf_T *bufp, linenr_T linenr, colnr_T col, long len));
! void netbeans_unmodified __ARGS((buf_T *bufp));
! void netbeans_button_release __ARGS((int button));
! int netbeans_keycommand __ARGS((int key));
! void netbeans_save_buffer __ARGS((buf_T *bufp));
! void netbeans_deleted_all_lines __ARGS((buf_T *bufp));
! int netbeans_is_guarded __ARGS((linenr_T top, linenr_T bot));
! void netbeans_draw_multisign_indicator __ARGS((int row));
! void netbeans_gutter_click __ARGS((linenr_T lnum));
  /* vim: set ft=c : */
--- 1,30 ----
  /* netbeans.c */
! void netbeans_parse_messages(void);
! void netbeans_read(void);
! int isNetbeansBuffer(buf_T *bufp);
! int isNetbeansModified(buf_T *bufp);
! void netbeans_end(void);
! void ex_nbclose(exarg_T *eap);
! void ex_nbkey(exarg_T *eap);
! void ex_nbstart(exarg_T *eap);
! void netbeans_beval_cb(BalloonEval *beval, int state);
! int netbeans_active(void);
! int netbeans_filedesc(void);
! void netbeans_gui_register(void);
! void netbeans_open(char *params, int doabort);
! void netbeans_send_disconnect(void);
! void netbeans_frame_moved(int new_x, int new_y);
! void netbeans_file_activated(buf_T *bufp);
! void netbeans_file_opened(buf_T *bufp);
! void netbeans_file_killed(buf_T *bufp);
! void netbeans_inserted(buf_T *bufp, linenr_T linenr, colnr_T col, char_u *txt, int newlen);
! void netbeans_removed(buf_T *bufp, linenr_T linenr, colnr_T col, long len);
! void netbeans_unmodified(buf_T *bufp);
! void netbeans_button_release(int button);
! int netbeans_keycommand(int key);
! void netbeans_save_buffer(buf_T *bufp);
! void netbeans_deleted_all_lines(buf_T *bufp);
! int netbeans_is_guarded(linenr_T top, linenr_T bot);
! void netbeans_draw_multisign_indicator(int row);
! void netbeans_gutter_click(linenr_T lnum);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/normal.pro	2013-08-10 13:37:21.000000000 +0200
--- src/proto/normal.pro	2016-01-19 13:13:09.487000881 +0100
***************
*** 1,26 ****
  /* normal.c */
! void init_normal_cmds __ARGS((void));
! void normal_cmd __ARGS((oparg_T *oap, int toplevel));
! void do_pending_operator __ARGS((cmdarg_T *cap, int old_col, int gui_yank));
! int do_mouse __ARGS((oparg_T *oap, int c, int dir, long count, int fixindent));
! void check_visual_highlight __ARGS((void));
! void end_visual_mode __ARGS((void));
! void reset_VIsual_and_resel __ARGS((void));
! void reset_VIsual __ARGS((void));
! int find_ident_under_cursor __ARGS((char_u **string, int find_type));
! int find_ident_at_pos __ARGS((win_T *wp, linenr_T lnum, colnr_T startcol, char_u **string, int find_type));
! void clear_showcmd __ARGS((void));
! int add_to_showcmd __ARGS((int c));
! void add_to_showcmd_c __ARGS((int c));
! void push_showcmd __ARGS((void));
! void pop_showcmd __ARGS((void));
! void do_check_scrollbind __ARGS((int check));
! void check_scrollbind __ARGS((linenr_T topline_diff, long leftcol_diff));
! int find_decl __ARGS((char_u *ptr, int len, int locally, int thisblock, int searchflags));
! void scroll_redraw __ARGS((int up, long count));
! void handle_tabmenu __ARGS((void));
! void do_nv_ident __ARGS((int c1, int c2));
! int get_visual_text __ARGS((cmdarg_T *cap, char_u **pp, int *lenp));
! void start_selection __ARGS((void));
! void may_start_select __ARGS((int c));
  /* vim: set ft=c : */
--- 1,26 ----
  /* normal.c */
! void init_normal_cmds(void);
! void normal_cmd(oparg_T *oap, int toplevel);
! void do_pending_operator(cmdarg_T *cap, int old_col, int gui_yank);
! int do_mouse(oparg_T *oap, int c, int dir, long count, int fixindent);
! void check_visual_highlight(void);
! void end_visual_mode(void);
! void reset_VIsual_and_resel(void);
! void reset_VIsual(void);
! int find_ident_under_cursor(char_u **string, int find_type);
! int find_ident_at_pos(win_T *wp, linenr_T lnum, colnr_T startcol, char_u **string, int find_type);
! void clear_showcmd(void);
! int add_to_showcmd(int c);
! void add_to_showcmd_c(int c);
! void push_showcmd(void);
! void pop_showcmd(void);
! void do_check_scrollbind(int check);
! void check_scrollbind(linenr_T topline_diff, long leftcol_diff);
! int find_decl(char_u *ptr, int len, int locally, int thisblock, int searchflags);
! void scroll_redraw(int up, long count);
! void handle_tabmenu(void);
! void do_nv_ident(int c1, int c2);
! int get_visual_text(cmdarg_T *cap, char_u **pp, int *lenp);
! void start_selection(void);
! void may_start_select(int c);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ops.pro	2016-01-10 22:12:41.356254408 +0100
--- src/proto/ops.pro	2016-01-19 13:13:09.866996792 +0100
***************
*** 1,62 ****
  /* ops.c */
! int get_op_type __ARGS((int char1, int char2));
! int op_on_lines __ARGS((int op));
! int get_op_char __ARGS((int optype));
! int get_extra_op_char __ARGS((int optype));
! void op_shift __ARGS((oparg_T *oap, int curs_top, int amount));
! void shift_line __ARGS((int left, int round, int amount, int call_changed_bytes));
! void op_reindent __ARGS((oparg_T *oap, int (*how)(void)));
! int get_expr_register __ARGS((void));
! void set_expr_line __ARGS((char_u *new_line));
! char_u *get_expr_line __ARGS((void));
! char_u *get_expr_line_src __ARGS((void));
! int valid_yank_reg __ARGS((int regname, int writing));
! void get_yank_register __ARGS((int regname, int writing));
! int may_get_selection __ARGS((int regname));
! void *get_register __ARGS((int name, int copy));
! void put_register __ARGS((int name, void *reg));
! void free_register __ARGS((void *reg));
! int yank_register_mline __ARGS((int regname));
! int do_record __ARGS((int c));
! int do_execreg __ARGS((int regname, int colon, int addcr, int silent));
! int insert_reg __ARGS((int regname, int literally));
! int get_spec_reg __ARGS((int regname, char_u **argp, int *allocated, int errmsg));
! int cmdline_paste_reg __ARGS((int regname, int literally, int remcr));
! void adjust_clip_reg __ARGS((int *rp));
! int op_delete __ARGS((oparg_T *oap));
! int op_replace __ARGS((oparg_T *oap, int c));
! void op_tilde __ARGS((oparg_T *oap));
! int swapchar __ARGS((int op_type, pos_T *pos));
! void op_insert __ARGS((oparg_T *oap, long count1));
! int op_change __ARGS((oparg_T *oap));
! void init_yank __ARGS((void));
! void clear_registers __ARGS((void));
! int op_yank __ARGS((oparg_T *oap, int deleting, int mess));
! void do_put __ARGS((int regname, int dir, long count, int flags));
! void adjust_cursor_eol __ARGS((void));
! int preprocs_left __ARGS((void));
! int get_register_name __ARGS((int num));
! void ex_display __ARGS((exarg_T *eap));
! int do_join __ARGS((long count, int insert_space, int save_undo, int use_formatoptions, int setmark));
! void op_format __ARGS((oparg_T *oap, int keep_cursor));
! void op_formatexpr __ARGS((oparg_T *oap));
! int fex_format __ARGS((linenr_T lnum, long count, int c));
! void format_lines __ARGS((linenr_T line_count, int avoid_fex));
! int paragraph_start __ARGS((linenr_T lnum));
! void op_addsub __ARGS((oparg_T *oap, linenr_T Prenum1, int g_cmd));
! int read_viminfo_register __ARGS((vir_T *virp, int force));
! void write_viminfo_registers __ARGS((FILE *fp));
! void x11_export_final_selection __ARGS((void));
! void clip_free_selection __ARGS((VimClipboard *cbd));
! void clip_get_selection __ARGS((VimClipboard *cbd));
! void clip_yank_selection __ARGS((int type, char_u *str, long len, VimClipboard *cbd));
! int clip_convert_selection __ARGS((char_u **str, long_u *len, VimClipboard *cbd));
! void dnd_yank_drag_data __ARGS((char_u *str, long len));
! char_u get_reg_type __ARGS((int regname, long *reglen));
! char_u *get_reg_contents __ARGS((int regname, int flags));
! void write_reg_contents __ARGS((int name, char_u *str, int maxlen, int must_append));
! void write_reg_contents_lst __ARGS((int name, char_u **strings, int maxlen, int must_append, int yank_type, long block_len));
! void write_reg_contents_ex __ARGS((int name, char_u *str, int maxlen, int must_append, int yank_type, long block_len));
! void clear_oparg __ARGS((oparg_T *oap));
! void cursor_pos_info __ARGS((dict_T *eval));
  /* vim: set ft=c : */
--- 1,62 ----
  /* ops.c */
! int get_op_type(int char1, int char2);
! int op_on_lines(int op);
! int get_op_char(int optype);
! int get_extra_op_char(int optype);
! void op_shift(oparg_T *oap, int curs_top, int amount);
! void shift_line(int left, int round, int amount, int call_changed_bytes);
! void op_reindent(oparg_T *oap, int (*how)(void));
! int get_expr_register(void);
! void set_expr_line(char_u *new_line);
! char_u *get_expr_line(void);
! char_u *get_expr_line_src(void);
! int valid_yank_reg(int regname, int writing);
! void get_yank_register(int regname, int writing);
! int may_get_selection(int regname);
! void *get_register(int name, int copy);
! void put_register(int name, void *reg);
! void free_register(void *reg);
! int yank_register_mline(int regname);
! int do_record(int c);
! int do_execreg(int regname, int colon, int addcr, int silent);
! int insert_reg(int regname, int literally);
! int get_spec_reg(int regname, char_u **argp, int *allocated, int errmsg);
! int cmdline_paste_reg(int regname, int literally, int remcr);
! void adjust_clip_reg(int *rp);
! int op_delete(oparg_T *oap);
! int op_replace(oparg_T *oap, int c);
! void op_tilde(oparg_T *oap);
! int swapchar(int op_type, pos_T *pos);
! void op_insert(oparg_T *oap, long count1);
! int op_change(oparg_T *oap);
! void init_yank(void);
! void clear_registers(void);
! int op_yank(oparg_T *oap, int deleting, int mess);
! void do_put(int regname, int dir, long count, int flags);
! void adjust_cursor_eol(void);
! int preprocs_left(void);
! int get_register_name(int num);
! void ex_display(exarg_T *eap);
! int do_join(long count, int insert_space, int save_undo, int use_formatoptions, int setmark);
! void op_format(oparg_T *oap, int keep_cursor);
! void op_formatexpr(oparg_T *oap);
! int fex_format(linenr_T lnum, long count, int c);
! void format_lines(linenr_T line_count, int avoid_fex);
! int paragraph_start(linenr_T lnum);
! void op_addsub(oparg_T *oap, linenr_T Prenum1, int g_cmd);
! int read_viminfo_register(vir_T *virp, int force);
! void write_viminfo_registers(FILE *fp);
! void x11_export_final_selection(void);
! void clip_free_selection(VimClipboard *cbd);
! void clip_get_selection(VimClipboard *cbd);
! void clip_yank_selection(int type, char_u *str, long len, VimClipboard *cbd);
! int clip_convert_selection(char_u **str, long_u *len, VimClipboard *cbd);
! void dnd_yank_drag_data(char_u *str, long len);
! char_u get_reg_type(int regname, long *reglen);
! char_u *get_reg_contents(int regname, int flags);
! void write_reg_contents(int name, char_u *str, int maxlen, int must_append);
! void write_reg_contents_lst(int name, char_u **strings, int maxlen, int must_append, int yank_type, long block_len);
! void write_reg_contents_ex(int name, char_u *str, int maxlen, int must_append, int yank_type, long block_len);
! void clear_oparg(oparg_T *oap);
! void cursor_pos_info(dict_T *dict);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/option.pro	2014-09-23 15:45:04.874801055 +0200
--- src/proto/option.pro	2016-01-19 13:13:10.262992530 +0100
***************
*** 1,66 ****
  /* option.c */
! void set_init_1 __ARGS((void));
! void set_string_default __ARGS((char *name, char_u *val));
! void set_number_default __ARGS((char *name, long val));
! void free_all_options __ARGS((void));
! void set_init_2 __ARGS((void));
! void set_init_3 __ARGS((void));
! void set_helplang_default __ARGS((char_u *lang));
! void init_gui_options __ARGS((void));
! void set_title_defaults __ARGS((void));
! int do_set __ARGS((char_u *arg, int opt_flags));
! void set_options_bin __ARGS((int oldval, int newval, int opt_flags));
! int get_viminfo_parameter __ARGS((int type));
! char_u *find_viminfo_parameter __ARGS((int type));
! void check_options __ARGS((void));
! void check_buf_options __ARGS((buf_T *buf));
! void free_string_option __ARGS((char_u *p));
! void clear_string_option __ARGS((char_u **pp));
! void set_term_option_alloced __ARGS((char_u **p));
! int was_set_insecurely __ARGS((char_u *opt, int opt_flags));
! void set_string_option_direct __ARGS((char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid));
! char_u *check_colorcolumn __ARGS((win_T *wp));
! char_u *check_stl_option __ARGS((char_u *s));
! int get_option_value __ARGS((char_u *name, long *numval, char_u **stringval, int opt_flags));
! int get_option_value_strict __ARGS((char_u *name, long *numval, char_u **stringval, int opt_type, void *from));
! char_u *option_iter_next __ARGS((void **option, int opt_type));
! char_u *set_option_value __ARGS((char_u *name, long number, char_u *string, int opt_flags));
! char_u *get_term_code __ARGS((char_u *tname));
! char_u *get_highlight_default __ARGS((void));
! char_u *get_encoding_default __ARGS((void));
! int makeset __ARGS((FILE *fd, int opt_flags, int local_only));
! int makefoldset __ARGS((FILE *fd));
! void clear_termoptions __ARGS((void));
! void free_termoptions __ARGS((void));
! void free_one_termoption __ARGS((char_u *var));
! void set_term_defaults __ARGS((void));
! void comp_col __ARGS((void));
! void unset_global_local_option __ARGS((char_u *name, void *from));
! char_u *get_equalprg __ARGS((void));
! void win_copy_options __ARGS((win_T *wp_from, win_T *wp_to));
! void copy_winopt __ARGS((winopt_T *from, winopt_T *to));
! void check_win_options __ARGS((win_T *win));
! void clear_winopt __ARGS((winopt_T *wop));
! void buf_copy_options __ARGS((buf_T *buf, int flags));
! void reset_modifiable __ARGS((void));
! void set_iminsert_global __ARGS((void));
! void set_imsearch_global __ARGS((void));
! void set_context_in_set_cmd __ARGS((expand_T *xp, char_u *arg, int opt_flags));
! int ExpandSettings __ARGS((expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file));
! int ExpandOldSetting __ARGS((int *num_file, char_u ***file));
! int langmap_adjust_mb __ARGS((int c));
! int has_format_option __ARGS((int x));
! int shortmess __ARGS((int x));
! void vimrc_found __ARGS((char_u *fname, char_u *envname));
! void change_compatible __ARGS((int on));
! int option_was_set __ARGS((char_u *name));
! void reset_option_was_set __ARGS((char_u *name));
! int can_bs __ARGS((int what));
! void save_file_ff __ARGS((buf_T *buf));
! int file_ff_differs __ARGS((buf_T *buf, int ignore_empty));
! int check_ff_value __ARGS((char_u *p));
! long get_sw_value __ARGS((buf_T *buf));
! long get_sts_value __ARGS((void));
! void find_mps_values __ARGS((int *initc, int *findc, int *backwards, int switchit));
! unsigned int get_bkc_value __ARGS((buf_T *buf));
  /* vim: set ft=c : */
--- 1,66 ----
  /* option.c */
! void set_init_1(void);
! void set_string_default(char *name, char_u *val);
! void set_number_default(char *name, long val);
! void free_all_options(void);
! void set_init_2(void);
! void set_init_3(void);
! void set_helplang_default(char_u *lang);
! void init_gui_options(void);
! void set_title_defaults(void);
! int do_set(char_u *arg, int opt_flags);
! void set_options_bin(int oldval, int newval, int opt_flags);
! int get_viminfo_parameter(int type);
! char_u *find_viminfo_parameter(int type);
! void check_options(void);
! void check_buf_options(buf_T *buf);
! void free_string_option(char_u *p);
! void clear_string_option(char_u **pp);
! void set_term_option_alloced(char_u **p);
! int was_set_insecurely(char_u *opt, int opt_flags);
! void set_string_option_direct(char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid);
! char_u *check_colorcolumn(win_T *wp);
! char_u *check_stl_option(char_u *s);
! int get_option_value(char_u *name, long *numval, char_u **stringval, int opt_flags);
! int get_option_value_strict(char_u *name, long *numval, char_u **stringval, int opt_type, void *from);
! char_u *option_iter_next(void **option, int opt_type);
! char_u *set_option_value(char_u *name, long number, char_u *string, int opt_flags);
! char_u *get_term_code(char_u *tname);
! char_u *get_highlight_default(void);
! char_u *get_encoding_default(void);
! int makeset(FILE *fd, int opt_flags, int local_only);
! int makefoldset(FILE *fd);
! void clear_termoptions(void);
! void free_termoptions(void);
! void free_one_termoption(char_u *var);
! void set_term_defaults(void);
! void comp_col(void);
! void unset_global_local_option(char_u *name, void *from);
! char_u *get_equalprg(void);
! void win_copy_options(win_T *wp_from, win_T *wp_to);
! void copy_winopt(winopt_T *from, winopt_T *to);
! void check_win_options(win_T *win);
! void clear_winopt(winopt_T *wop);
! void buf_copy_options(buf_T *buf, int flags);
! void reset_modifiable(void);
! void set_iminsert_global(void);
! void set_imsearch_global(void);
! void set_context_in_set_cmd(expand_T *xp, char_u *arg, int opt_flags);
! int ExpandSettings(expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file);
! int ExpandOldSetting(int *num_file, char_u ***file);
! int langmap_adjust_mb(int c);
! int has_format_option(int x);
! int shortmess(int x);
! void vimrc_found(char_u *fname, char_u *envname);
! void change_compatible(int on);
! int option_was_set(char_u *name);
! void reset_option_was_set(char_u *name);
! int can_bs(int what);
! void save_file_ff(buf_T *buf);
! int file_ff_differs(buf_T *buf, int ignore_empty);
! int check_ff_value(char_u *p);
! long get_sw_value(buf_T *buf);
! long get_sts_value(void);
! void find_mps_values(int *initc, int *findc, int *backwards, int switchit);
! unsigned int get_bkc_value(buf_T *buf);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_amiga.pro	2015-03-21 17:32:14.066779916 +0100
--- src/proto/os_amiga.pro	2016-01-19 13:13:22.566860125 +0100
***************
*** 1,46 ****
  /* os_amiga.c */
! void win_resize_on __ARGS((void));
! void win_resize_off __ARGS((void));
! void mch_write __ARGS((char_u *p, int len));
! int mch_inchar __ARGS((char_u *buf, int maxlen, long time, int tb_change_cnt));
! int mch_char_avail __ARGS((void));
! long_u mch_avail_mem __ARGS((int special));
! void mch_delay __ARGS((long msec, int ignoreinput));
! void mch_suspend __ARGS((void));
! void mch_init __ARGS((void));
! int mch_check_win __ARGS((int argc, char **argv));
! int mch_input_isatty __ARGS((void));
! void fname_case __ARGS((char_u *name, int len));
! void mch_settitle __ARGS((char_u *title, char_u *icon));
! void mch_restore_title __ARGS((int which));
! int mch_can_restore_title __ARGS((void));
! int mch_can_restore_icon __ARGS((void));
! int mch_get_user_name __ARGS((char_u *s, int len));
! void mch_get_host_name __ARGS((char_u *s, int len));
! long mch_get_pid __ARGS((void));
! int mch_dirname __ARGS((char_u *buf, int len));
! int mch_FullName __ARGS((char_u *fname, char_u *buf, int len, int force));
! int mch_isFullName __ARGS((char_u *fname));
! long mch_getperm __ARGS((char_u *name));
! int mch_setperm __ARGS((char_u *name, long perm));
! void mch_hide __ARGS((char_u *name));
! int mch_isdir __ARGS((char_u *name));
! int mch_mkdir __ARGS((char_u *name));
! int mch_can_exe __ARGS((char_u *name, char_u **path, int use_path));
! int mch_nodetype __ARGS((char_u *name));
! void mch_early_init __ARGS((void));
! void mch_exit __ARGS((int r));
! void mch_settmode __ARGS((int tmode));
! int mch_screenmode __ARGS((char_u *arg));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! void mch_new_shellsize __ARGS((void));
! int mch_call_shell __ARGS((char_u *cmd, int options));
! void mch_breakcheck __ARGS((void));
! long Chk_Abort __ARGS((void));
! int mch_expandpath __ARGS((garray_T *gap, char_u *pat, int flags));
! int mch_has_exp_wildcard __ARGS((char_u *p));
! int mch_has_wildcard __ARGS((char_u *p));
! char_u *mch_getenv __ARGS((char_u *var));
! int mch_setenv __ARGS((char *var, char *value, int x));
  /* vim: set ft=c : */
--- 1,46 ----
  /* os_amiga.c */
! void win_resize_on(void);
! void win_resize_off(void);
! void mch_write(char_u *p, int len);
! int mch_inchar(char_u *buf, int maxlen, long time, int tb_change_cnt);
! int mch_char_avail(void);
! long_u mch_avail_mem(int special);
! void mch_delay(long msec, int ignoreinput);
! void mch_suspend(void);
! void mch_init(void);
! int mch_check_win(int argc, char **argv);
! int mch_input_isatty(void);
! void fname_case(char_u *name, int len);
! void mch_settitle(char_u *title, char_u *icon);
! void mch_restore_title(int which);
! int mch_can_restore_title(void);
! int mch_can_restore_icon(void);
! int mch_get_user_name(char_u *s, int len);
! void mch_get_host_name(char_u *s, int len);
! long mch_get_pid(void);
! int mch_dirname(char_u *buf, int len);
! int mch_FullName(char_u *fname, char_u *buf, int len, int force);
! int mch_isFullName(char_u *fname);
! long mch_getperm(char_u *name);
! int mch_setperm(char_u *name, long perm);
! void mch_hide(char_u *name);
! int mch_isdir(char_u *name);
! int mch_mkdir(char_u *name);
! int mch_can_exe(char_u *name, char_u **path, int use_path);
! int mch_nodetype(char_u *name);
! void mch_early_init(void);
! void mch_exit(int r);
! void mch_settmode(int tmode);
! int mch_screenmode(char_u *arg);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! void mch_new_shellsize(void);
! int mch_call_shell(char_u *cmd, int options);
! void mch_breakcheck(void);
! long Chk_Abort(void);
! int mch_expandpath(garray_T *gap, char_u *pat, int flags);
! int mch_has_exp_wildcard(char_u *p);
! int mch_has_wildcard(char_u *p);
! char_u *mch_getenv(char_u *var);
! int mch_setenv(char *var, char *value, int x);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_beos.pro	2013-08-10 13:37:40.000000000 +0200
--- src/proto/os_beos.pro	2016-01-19 13:13:24.810835975 +0100
***************
*** 1,4 ****
  /* os_beos.c */
! void beos_cleanup_read_thread __ARGS((void));
! int beos_select __ARGS((int nbits, struct fd_set *rbits, struct fd_set *wbits, struct fd_set *ebits, struct timeval *timeout));
  /* vim: set ft=c : */
--- 1,4 ----
  /* os_beos.c */
! void beos_cleanup_read_thread(void);
! int beos_select(int nbits, struct fd_set *rbits, struct fd_set *wbits, struct fd_set *ebits, struct timeval *timeout);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_msdos.pro	2015-03-21 17:32:14.066779916 +0100
--- src/proto/os_msdos.pro	2016-01-19 13:13:22.934856164 +0100
***************
*** 1,48 ****
  /* os_msdos.c */
! void mch_set_normal_colors __ARGS((void));
! void mch_update_cursor __ARGS((void));
! long_u mch_avail_mem __ARGS((int special));
! void mch_delay __ARGS((long msec, int ignoreinput));
! void mch_write __ARGS((char_u *s, int len));
! int mch_inchar __ARGS((char_u *buf, int maxlen, long time, int tb_change_cnt));
! int mch_char_avail __ARGS((void));
! void mch_suspend __ARGS((void));
! void mch_init __ARGS((void));
! int mch_check_win __ARGS((int argc, char **argv));
! int mch_input_isatty __ARGS((void));
! void fname_case __ARGS((char_u *name, int len));
! long mch_get_pid __ARGS((void));
! int mch_FullName __ARGS((char_u *fname, char_u *buf, int len, int force));
! void slash_adjust __ARGS((char_u *p));
! int mch_isFullName __ARGS((char_u *fname));
! void mch_early_init __ARGS((void));
! void mch_exit __ARGS((int r));
! void mch_settmode __ARGS((int tmode));
! void mch_setmouse __ARGS((int on));
! int mch_screenmode __ARGS((char_u *arg));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! void mch_new_shellsize __ARGS((void));
! void mch_check_columns __ARGS((void));
! int mch_call_shell __ARGS((char_u *cmd, int options));
! void mch_breakcheck __ARGS((void));
! int mch_has_exp_wildcard __ARGS((char_u *p));
! int mch_has_wildcard __ARGS((char_u *p));
! int mch_chdir __ARGS((char *path));
! char *djgpp_setlocale __ARGS((void));
! int clip_mch_own_selection __ARGS((VimClipboard *cbd));
! void clip_mch_lose_selection __ARGS((VimClipboard *cbd));
! void clip_mch_request_selection __ARGS((VimClipboard *cbd));
! void clip_mch_set_selection __ARGS((VimClipboard *cbd));
! long mch_getperm __ARGS((char_u *name));
! int mch_setperm __ARGS((char_u *name, long perm));
! void mch_hide __ARGS((char_u *name));
! int mch_isdir __ARGS((char_u *name));
! int mch_can_exe __ARGS((char_u *name, char_u **path, int use_path));
! int mch_nodetype __ARGS((char_u *name));
! int mch_dirname __ARGS((char_u *buf, int len));
! int mch_remove __ARGS((char_u *name));
! char_u *mch_getenv __ARGS((char_u *name));
! int mch_get_user_name __ARGS((char_u *s, int len));
! void mch_get_host_name __ARGS((char_u *s, int len));
  /* vim: set ft=c : */
--- 1,48 ----
  /* os_msdos.c */
! void mch_set_normal_colors(void);
! void mch_update_cursor(void);
! long_u mch_avail_mem(int special);
! void mch_delay(long msec, int ignoreinput);
! void mch_write(char_u *s, int len);
! int mch_inchar(char_u *buf, int maxlen, long time, int tb_change_cnt);
! int mch_char_avail(void);
! void mch_suspend(void);
! void mch_init(void);
! int mch_check_win(int argc, char **argv);
! int mch_input_isatty(void);
! void fname_case(char_u *name, int len);
! long mch_get_pid(void);
! int mch_FullName(char_u *fname, char_u *buf, int len, int force);
! void slash_adjust(char_u *p);
! int mch_isFullName(char_u *fname);
! void mch_early_init(void);
! void mch_exit(int r);
! void mch_settmode(int tmode);
! void mch_setmouse(int on);
! int mch_screenmode(char_u *arg);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! void mch_new_shellsize(void);
! void mch_check_columns(void);
! int mch_call_shell(char_u *cmd, int options);
! void mch_breakcheck(void);
! int mch_has_exp_wildcard(char_u *p);
! int mch_has_wildcard(char_u *p);
! int mch_chdir(char *path);
! char *djgpp_setlocale(void);
! int clip_mch_own_selection(VimClipboard *cbd);
! void clip_mch_lose_selection(VimClipboard *cbd);
! void clip_mch_request_selection(VimClipboard *cbd);
! void clip_mch_set_selection(VimClipboard *cbd);
! long mch_getperm(char_u *name);
! int mch_setperm(char_u *name, long perm);
! void mch_hide(char_u *name);
! int mch_isdir(char_u *name);
! int mch_can_exe(char_u *name, char_u **path, int use_path);
! int mch_nodetype(char_u *name);
! int mch_dirname(char_u *buf, int len);
! int mch_remove(char_u *name);
! char_u *mch_getenv(char_u *name);
! int mch_get_user_name(char_u *s, int len);
! void mch_get_host_name(char_u *s, int len);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_mswin.pro	2014-09-23 21:53:35.310849352 +0200
--- src/proto/os_mswin.pro	2016-01-19 13:13:24.062844025 +0100
***************
*** 1,53 ****
  /* os_mswin.c */
! void mch_exit __ARGS((int r));
! void mch_early_init __ARGS((void));
! int mch_input_isatty __ARGS((void));
! void mch_settitle __ARGS((char_u *title, char_u *icon));
! void mch_restore_title __ARGS((int which));
! int mch_can_restore_title __ARGS((void));
! int mch_can_restore_icon __ARGS((void));
! int mch_FullName __ARGS((char_u *fname, char_u *buf, int len, int force));
! int mch_isFullName __ARGS((char_u *fname));
! void slash_adjust __ARGS((char_u *p));
! int vim_stat __ARGS((const char *name, struct stat *stp));
! void mch_settmode __ARGS((int tmode));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! void mch_new_shellsize __ARGS((void));
! void mch_suspend __ARGS((void));
! void display_errors __ARGS((void));
! int mch_has_exp_wildcard __ARGS((char_u *p));
! int mch_has_wildcard __ARGS((char_u *p));
! int mch_chdir __ARGS((char *path));
! int can_end_termcap_mode __ARGS((int give_msg));
! int mch_screenmode __ARGS((char_u *arg));
! int mch_icon_load __ARGS((HANDLE *iconp));
! int mch_libcall __ARGS((char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result));
! void DumpPutS __ARGS((const char *psz));
! int mch_get_winpos __ARGS((int *x, int *y));
! void mch_set_winpos __ARGS((int x, int y));
! void mch_print_cleanup __ARGS((void));
! int mch_print_init __ARGS((prt_settings_T *psettings, char_u *jobname, int forceit));
! int mch_print_begin __ARGS((prt_settings_T *psettings));
! void mch_print_end __ARGS((prt_settings_T *psettings));
! int mch_print_end_page __ARGS((void));
! int mch_print_begin_page __ARGS((char_u *msg));
! int mch_print_blank_page __ARGS((void));
! void mch_print_start_line __ARGS((int margin, int page_line));
! int mch_print_text_out __ARGS((char_u *p, int len));
! void mch_print_set_font __ARGS((int iBold, int iItalic, int iUnderline));
! void mch_print_set_bg __ARGS((long_u bgcol));
! void mch_print_set_fg __ARGS((long_u fgcol));
! char_u *mch_resolve_shortcut __ARGS((char_u *fname));
! void win32_set_foreground __ARGS((void));
! void serverInitMessaging __ARGS((void));
! void serverSetName __ARGS((char_u *name));
! char_u *serverGetVimNames __ARGS((void));
! int serverSendReply __ARGS((char_u *name, char_u *reply));
! int serverSendToVim __ARGS((char_u *name, char_u *cmd, char_u **result, void *ptarget, int asExpr, int silent));
! void serverForeground __ARGS((char_u *name));
! char_u *serverGetReply __ARGS((HWND server, int *expr_res, int remove, int wait));
! void serverProcessPendingMessages __ARGS((void));
! char *charset_id2name __ARGS((int id));
! int get_logfont __ARGS((LOGFONT *lf, char_u *name, HDC printer_dc, int verbose));
  /* vim: set ft=c : */
--- 1,53 ----
  /* os_mswin.c */
! void mch_exit(int r);
! void mch_early_init(void);
! int mch_input_isatty(void);
! void mch_settitle(char_u *title, char_u *icon);
! void mch_restore_title(int which);
! int mch_can_restore_title(void);
! int mch_can_restore_icon(void);
! int mch_FullName(char_u *fname, char_u *buf, int len, int force);
! int mch_isFullName(char_u *fname);
! void slash_adjust(char_u *p);
! int vim_stat(const char *name, struct stat *stp);
! void mch_settmode(int tmode);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! void mch_new_shellsize(void);
! void mch_suspend(void);
! void display_errors(void);
! int mch_has_exp_wildcard(char_u *p);
! int mch_has_wildcard(char_u *p);
! int mch_chdir(char *path);
! int can_end_termcap_mode(int give_msg);
! int mch_screenmode(char_u *arg);
! int mch_icon_load(HANDLE *iconp);
! int mch_libcall(char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result);
! void DumpPutS(const char *psz);
! int mch_get_winpos(int *x, int *y);
! void mch_set_winpos(int x, int y);
! void mch_print_cleanup(void);
! int mch_print_init(prt_settings_T *psettings, char_u *jobname, int forceit);
! int mch_print_begin(prt_settings_T *psettings);
! void mch_print_end(prt_settings_T *psettings);
! int mch_print_end_page(void);
! int mch_print_begin_page(char_u *msg);
! int mch_print_blank_page(void);
! void mch_print_start_line(int margin, int page_line);
! int mch_print_text_out(char_u *p, int len);
! void mch_print_set_font(int iBold, int iItalic, int iUnderline);
! void mch_print_set_bg(long_u bgcol);
! void mch_print_set_fg(long_u fgcol);
! char_u *mch_resolve_shortcut(char_u *fname);
! void win32_set_foreground(void);
! void serverInitMessaging(void);
! void serverSetName(char_u *name);
! char_u *serverGetVimNames(void);
! int serverSendReply(char_u *name, char_u *reply);
! int serverSendToVim(char_u *name, char_u *cmd, char_u **result, void *ptarget, int asExpr, int silent);
! void serverForeground(char_u *name);
! char_u *serverGetReply(HWND server, int *expr_res, int remove, int wait);
! void serverProcessPendingMessages(void);
! char *charset_id2name(int id);
! int get_logfont(LOGFONT *lf, char_u *name, HDC printer_dc, int verbose);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_unix.pro	2016-01-17 15:56:29.366605222 +0100
--- src/proto/os_unix.pro	2016-01-19 13:13:10.662988226 +0100
***************
*** 1,76 ****
  /* os_unix.c */
! int mch_chdir __ARGS((char *path));
! void mch_write __ARGS((char_u *s, int len));
! int mch_inchar __ARGS((char_u *buf, int maxlen, long wtime, int tb_change_cnt));
! int mch_char_avail __ARGS((void));
! long_u mch_total_mem __ARGS((int special));
! void mch_delay __ARGS((long msec, int ignoreinput));
! int mch_stackcheck __ARGS((char *p));
! void mch_startjmp __ARGS((void));
! void mch_endjmp __ARGS((void));
! void mch_didjmp __ARGS((void));
! void mch_suspend __ARGS((void));
! void mch_init __ARGS((void));
! void reset_signals __ARGS((void));
! int vim_handle_signal __ARGS((int sig));
! int mch_check_win __ARGS((int argc, char **argv));
! int mch_input_isatty __ARGS((void));
! int mch_can_restore_title __ARGS((void));
! int mch_can_restore_icon __ARGS((void));
! void mch_settitle __ARGS((char_u *title, char_u *icon));
! void mch_restore_title __ARGS((int which));
! int vim_is_xterm __ARGS((char_u *name));
! int use_xterm_like_mouse __ARGS((char_u *name));
! int use_xterm_mouse __ARGS((void));
! int vim_is_iris __ARGS((char_u *name));
! int vim_is_vt300 __ARGS((char_u *name));
! int vim_is_fastterm __ARGS((char_u *name));
! int mch_get_user_name __ARGS((char_u *s, int len));
! int mch_get_uname __ARGS((uid_t uid, char_u *s, int len));
! void mch_get_host_name __ARGS((char_u *s, int len));
! long mch_get_pid __ARGS((void));
! int mch_dirname __ARGS((char_u *buf, int len));
! int mch_FullName __ARGS((char_u *fname, char_u *buf, int len, int force));
! int mch_isFullName __ARGS((char_u *fname));
! void fname_case __ARGS((char_u *name, int len));
! long mch_getperm __ARGS((char_u *name));
! int mch_setperm __ARGS((char_u *name, long perm));
! void mch_copy_sec __ARGS((char_u *from_file, char_u *to_file));
! vim_acl_T mch_get_acl __ARGS((char_u *fname));
! void mch_set_acl __ARGS((char_u *fname, vim_acl_T aclent));
! void mch_free_acl __ARGS((vim_acl_T aclent));
! void mch_hide __ARGS((char_u *name));
! int mch_isdir __ARGS((char_u *name));
! int mch_isrealdir __ARGS((char_u *name));
! int mch_can_exe __ARGS((char_u *name, char_u **path, int use_path));
! int mch_nodetype __ARGS((char_u *name));
! void mch_early_init __ARGS((void));
! void mch_free_mem __ARGS((void));
! void mch_exit __ARGS((int r));
! void mch_settmode __ARGS((int tmode));
! void get_stty __ARGS((void));
! void mch_setmouse __ARGS((int on));
! void check_mouse_termcode __ARGS((void));
! int mch_screenmode __ARGS((char_u *arg));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! void mch_new_shellsize __ARGS((void));
! int mch_call_shell __ARGS((char_u *cmd, int options));
! void mch_breakcheck __ARGS((void));
! int mch_expandpath __ARGS((garray_T *gap, char_u *path, int flags));
! int mch_expand_wildcards __ARGS((int num_pat, char_u **pat, int *num_file, char_u ***file, int flags));
! int mch_has_exp_wildcard __ARGS((char_u *p));
! int mch_has_wildcard __ARGS((char_u *p));
! int mch_libcall __ARGS((char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result));
! void setup_term_clip __ARGS((void));
! void start_xterm_trace __ARGS((int button));
! void stop_xterm_trace __ARGS((void));
! void clear_xterm_clip __ARGS((void));
! int clip_xterm_own_selection __ARGS((VimClipboard *cbd));
! void clip_xterm_lose_selection __ARGS((VimClipboard *cbd));
! void clip_xterm_request_selection __ARGS((VimClipboard *cbd));
! void clip_xterm_set_selection __ARGS((VimClipboard *cbd));
! int xsmp_handle_requests __ARGS((void));
! void xsmp_init __ARGS((void));
! void xsmp_close __ARGS((void));
  /* vim: set ft=c : */
--- 1,76 ----
  /* os_unix.c */
! int mch_chdir(char *path);
! void mch_write(char_u *s, int len);
! int mch_inchar(char_u *buf, int maxlen, long wtime, int tb_change_cnt);
! int mch_char_avail(void);
! long_u mch_total_mem(int special);
! void mch_delay(long msec, int ignoreinput);
! int mch_stackcheck(char *p);
! void mch_startjmp(void);
! void mch_endjmp(void);
! void mch_didjmp(void);
! void mch_suspend(void);
! void mch_init(void);
! void reset_signals(void);
! int vim_handle_signal(int sig);
! int mch_check_win(int argc, char **argv);
! int mch_input_isatty(void);
! int mch_can_restore_title(void);
! int mch_can_restore_icon(void);
! void mch_settitle(char_u *title, char_u *icon);
! void mch_restore_title(int which);
! int vim_is_xterm(char_u *name);
! int use_xterm_like_mouse(char_u *name);
! int use_xterm_mouse(void);
! int vim_is_iris(char_u *name);
! int vim_is_vt300(char_u *name);
! int vim_is_fastterm(char_u *name);
! int mch_get_user_name(char_u *s, int len);
! int mch_get_uname(uid_t uid, char_u *s, int len);
! void mch_get_host_name(char_u *s, int len);
! long mch_get_pid(void);
! int mch_dirname(char_u *buf, int len);
! int mch_FullName(char_u *fname, char_u *buf, int len, int force);
! int mch_isFullName(char_u *fname);
! void fname_case(char_u *name, int len);
! long mch_getperm(char_u *name);
! int mch_setperm(char_u *name, long perm);
! void mch_copy_sec(char_u *from_file, char_u *to_file);
! vim_acl_T mch_get_acl(char_u *fname);
! void mch_set_acl(char_u *fname, vim_acl_T aclent);
! void mch_free_acl(vim_acl_T aclent);
! void mch_hide(char_u *name);
! int mch_isdir(char_u *name);
! int mch_isrealdir(char_u *name);
! int mch_can_exe(char_u *name, char_u **path, int use_path);
! int mch_nodetype(char_u *name);
! void mch_early_init(void);
! void mch_free_mem(void);
! void mch_exit(int r);
! void mch_settmode(int tmode);
! void get_stty(void);
! void mch_setmouse(int on);
! void check_mouse_termcode(void);
! int mch_screenmode(char_u *arg);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! void mch_new_shellsize(void);
! int mch_call_shell(char_u *cmd, int options);
! void mch_breakcheck(void);
! int mch_expandpath(garray_T *gap, char_u *path, int flags);
! int mch_expand_wildcards(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
! int mch_has_exp_wildcard(char_u *p);
! int mch_has_wildcard(char_u *p);
! int mch_libcall(char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result);
! void setup_term_clip(void);
! void start_xterm_trace(int button);
! void stop_xterm_trace(void);
! void clear_xterm_clip(void);
! int clip_xterm_own_selection(VimClipboard *cbd);
! void clip_xterm_lose_selection(VimClipboard *cbd);
! void clip_xterm_request_selection(VimClipboard *cbd);
! void clip_xterm_set_selection(VimClipboard *cbd);
! int xsmp_handle_requests(void);
! void xsmp_init(void);
! void xsmp_close(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_vms.pro	2014-12-17 14:36:10.367090935 +0100
--- src/proto/os_vms.pro	2016-01-19 13:13:24.874835288 +0100
***************
*** 1,16 ****
  /* os_vms.c */
! void mch_settmode __ARGS((int tmode));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! char_u *mch_getenv __ARGS((char_u *lognam));
! int mch_setenv __ARGS((char *var, char *value, int x));
! int vms_sys __ARGS((char *cmd, char *out, char *inp));
! char *vms_tolower __ARGS((char *name));
! int vms_sys_status __ARGS((int status));
! int vms_read __ARGS((char *inbuf, size_t nbytes));
! int mch_expand_wildcards __ARGS((int num_pat, char_u **pat, int *num_file, char_u ***file, int flags));
! int mch_expandpath __ARGS((garray_T *gap, char_u *path, int flags));
! void *vms_fixfilename __ARGS((void *instring));
! void vms_remove_version __ARGS((void *fname));
! int RealWaitForChar __ARGS((int fd, long msec, int *check_for_gpm));
  /* vim: set ft=c : */
--- 1,16 ----
  /* os_vms.c */
! void mch_settmode(int tmode);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! char_u *mch_getenv(char_u *lognam);
! int mch_setenv(char *var, char *value, int x);
! int vms_sys(char *cmd, char *out, char *inp);
! char *vms_tolower(char *name);
! int vms_sys_status(int status);
! int vms_read(char *inbuf, size_t nbytes);
! int mch_expand_wildcards(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
! int mch_expandpath(garray_T *gap, char_u *path, int flags);
! void *vms_fixfilename(void *instring);
! void vms_remove_version(void *fname);
! int RealWaitForChar(int fd, long msec, int *check_for_gpm);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_win16.pro	2013-08-10 13:37:38.000000000 +0200
--- src/proto/os_win16.pro	2016-01-19 13:13:23.302852203 +0100
***************
*** 1,12 ****
  /* os_win16.c */
! void mch_setmouse __ARGS((int on));
! void mch_init __ARGS((void));
! int mch_check_win __ARGS((int argc, char **argv));
! long mch_get_pid __ARGS((void));
! int mch_call_shell __ARGS((char_u *cmd, int options));
! void mch_delay __ARGS((long msec, int ignoreinput));
! void mch_breakcheck __ARGS((void));
! long_u mch_avail_mem __ARGS((int special));
! int mch_rename __ARGS((const char *pszOldFile, const char *pszNewFile));
! char *default_shell __ARGS((void));
  /* vim: set ft=c : */
--- 1,12 ----
  /* os_win16.c */
! void mch_setmouse(int on);
! void mch_init(void);
! int mch_check_win(int argc, char **argv);
! long mch_get_pid(void);
! int mch_call_shell(char_u *cmd, int options);
! void mch_delay(long msec, int ignoreinput);
! void mch_breakcheck(void);
! long_u mch_avail_mem(int special);
! int mch_rename(const char *pszOldFile, const char *pszNewFile);
! char *default_shell(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/os_win32.pro	2016-01-17 22:15:10.607764092 +0100
--- src/proto/os_win32.pro	2016-01-19 13:16:08.093078784 +0100
***************
*** 1,62 ****
  /* os_win32.c */
! HINSTANCE vimLoadLib __ARGS((char *name));
! int dyn_libintl_init __ARGS((void));
! void dyn_libintl_end __ARGS((void));
! void PlatformId __ARGS((void));
! int mch_windows95 __ARGS((void));
! void mch_setmouse __ARGS((int on));
! void mch_update_cursor __ARGS((void));
! int mch_char_avail __ARGS((void));
! int mch_inchar __ARGS((char_u *buf, int maxlen, long time, int tb_change_cnt));
! void mch_init __ARGS((void));
! void mch_exit __ARGS((int r));
! int mch_check_win __ARGS((int argc, char **argv));
! void fname_case __ARGS((char_u *name, int len));
! int mch_get_user_name __ARGS((char_u *s, int len));
! void mch_get_host_name __ARGS((char_u *s, int len));
! long mch_get_pid __ARGS((void));
! int mch_dirname __ARGS((char_u *buf, int len));
! long mch_getperm __ARGS((char_u *name));
! int mch_setperm __ARGS((char_u *name, long perm));
! void mch_hide __ARGS((char_u *name));
! int mch_ishidden __ARGS((char_u *name));
! int mch_isdir __ARGS((char_u *name));
! int mch_isrealdir __ARGS((char_u *name));
! int mch_mkdir __ARGS((char_u *name));
! int mch_rmdir __ARGS((char_u *name));
! int mch_is_hard_link __ARGS((char_u *fname));
! int mch_is_symbolic_link __ARGS((char_u *fname));
! int mch_is_linked __ARGS((char_u *fname));
! int win32_fileinfo __ARGS((char_u *fname, BY_HANDLE_FILE_INFORMATION *info));
! int mch_writable __ARGS((char_u *name));
! int mch_can_exe __ARGS((char_u *name, char_u **path, int use_path));
! int mch_nodetype __ARGS((char_u *name));
! vim_acl_T mch_get_acl __ARGS((char_u *fname));
! void mch_set_acl __ARGS((char_u *fname, vim_acl_T acl));
! void mch_free_acl __ARGS((vim_acl_T acl));
! void mch_settmode __ARGS((int tmode));
! int mch_get_shellsize __ARGS((void));
! void mch_set_shellsize __ARGS((void));
! void mch_new_shellsize __ARGS((void));
! void mch_set_winsize_now __ARGS((void));
! int mch_call_shell __ARGS((char_u *cmd, int options));
! void mch_set_normal_colors __ARGS((void));
! void mch_write __ARGS((char_u *s, int len));
! void mch_delay __ARGS((long msec, int ignoreinput));
! int mch_remove __ARGS((char_u *name));
! void mch_breakcheck __ARGS((void));
! long_u mch_total_mem __ARGS((int special));
! int mch_wrename __ARGS((WCHAR *wold, WCHAR *wnew));
! int mch_rename __ARGS((const char *pszOldFile, const char *pszNewFile));
! char *default_shell __ARGS((void));
! int mch_access __ARGS((char *n, int p));
! int mch_open __ARGS((char *name, int flags, int mode));
! FILE *mch_fopen __ARGS((char *name, char *mode));
! int mch_copy_file_attribute __ARGS((char_u *from, char_u *to));
! int myresetstkoflw __ARGS((void));
! int get_cmd_argsW __ARGS((char ***argvp));
! void free_cmd_argsW __ARGS((void));
! void used_file_arg __ARGS((char *name, int literal, int full_path, int diff_mode));
! void set_alist_count __ARGS((void));
! void fix_arg_enc __ARGS((void));
  /* vim: set ft=c : */
--- 1,62 ----
  /* os_win32.c */
! HINSTANCE vimLoadLib(char *name);
! int dyn_libintl_init(void);
! void dyn_libintl_end(void);
! void PlatformId(void);
! int mch_windows95(void);
! void mch_setmouse(int on);
! void mch_update_cursor(void);
! int mch_char_avail(void);
! int mch_inchar(char_u *buf, int maxlen, long time, int tb_change_cnt);
! void mch_init(void);
! void mch_exit(int r);
! int mch_check_win(int argc, char **argv);
! void fname_case(char_u *name, int len);
! int mch_get_user_name(char_u *s, int len);
! void mch_get_host_name(char_u *s, int len);
! long mch_get_pid(void);
! int mch_dirname(char_u *buf, int len);
! long mch_getperm(char_u *name);
! int mch_setperm(char_u *name, long perm);
! void mch_hide(char_u *name);
! int mch_ishidden(char_u *name);
! int mch_isdir(char_u *name);
! int mch_isrealdir(char_u *name);
! int mch_mkdir(char_u *name);
! int mch_rmdir(char_u *name);
! int mch_is_hard_link(char_u *fname);
! int mch_is_symbolic_link(char_u *name);
! int mch_is_linked(char_u *fname);
! int win32_fileinfo(char_u *fname, BY_HANDLE_FILE_INFORMATION *info);
! int mch_writable(char_u *name);
! int mch_can_exe(char_u *name, char_u **path, int use_path);
! int mch_nodetype(char_u *name);
! vim_acl_T mch_get_acl(char_u *fname);
! void mch_set_acl(char_u *fname, vim_acl_T acl);
! void mch_free_acl(vim_acl_T acl);
! void mch_settmode(int tmode);
! int mch_get_shellsize(void);
! void mch_set_shellsize(void);
! void mch_new_shellsize(void);
! void mch_set_winsize_now(void);
! int mch_call_shell(char_u *cmd, int options);
! void mch_set_normal_colors(void);
! void mch_write(char_u *s, int len);
! void mch_delay(long msec, int ignoreinput);
! int mch_remove(char_u *name);
! void mch_breakcheck(void);
! long_u mch_total_mem(int special);
! int mch_wrename(WCHAR *wold, WCHAR *wnew);
! int mch_rename(const char *pszOldFile, const char *pszNewFile);
! char *default_shell(void);
! int mch_access(char *n, int p);
! int mch_open(char *name, int flags, int mode);
! FILE *mch_fopen(char *name, char *mode);
! int mch_copy_file_attribute(char_u *from, char_u *to);
! int myresetstkoflw(void);
! int get_cmd_argsW(char ***argvp);
! void free_cmd_argsW(void);
! void used_file_arg(char *name, int literal, int full_path, int diff_mode);
! void set_alist_count(void);
! void fix_arg_enc(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/popupmnu.pro	2013-08-10 13:37:23.000000000 +0200
--- src/proto/popupmnu.pro	2016-01-19 13:13:11.046984094 +0100
***************
*** 1,8 ****
  /* popupmnu.c */
! void pum_display __ARGS((pumitem_T *array, int size, int selected));
! void pum_redraw __ARGS((void));
! void pum_undisplay __ARGS((void));
! void pum_clear __ARGS((void));
! int pum_visible __ARGS((void));
! int pum_get_height __ARGS((void));
  /* vim: set ft=c : */
--- 1,8 ----
  /* popupmnu.c */
! void pum_display(pumitem_T *array, int size, int selected);
! void pum_redraw(void);
! void pum_undisplay(void);
! void pum_clear(void);
! int pum_visible(void);
! int pum_get_height(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/quickfix.pro	2015-09-08 18:46:04.349233550 +0200
--- src/proto/quickfix.pro	2016-01-19 13:13:11.466979574 +0100
***************
*** 1,33 ****
  /* quickfix.c */
! int qf_init __ARGS((win_T *wp, char_u *efile, char_u *errorformat, int newlist, char_u *qf_title));
! void qf_free_all __ARGS((win_T *wp));
! void copy_loclist __ARGS((win_T *from, win_T *to));
! void qf_jump __ARGS((qf_info_T *qi, int dir, int errornr, int forceit));
! void qf_list __ARGS((exarg_T *eap));
! void qf_age __ARGS((exarg_T *eap));
! void qf_mark_adjust __ARGS((win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after));
! void ex_cwindow __ARGS((exarg_T *eap));
! void ex_cclose __ARGS((exarg_T *eap));
! void ex_copen __ARGS((exarg_T *eap));
! linenr_T qf_current_entry __ARGS((win_T *wp));
! int bt_quickfix __ARGS((buf_T *buf));
! int bt_nofile __ARGS((buf_T *buf));
! int bt_dontwrite __ARGS((buf_T *buf));
! int bt_dontwrite_msg __ARGS((buf_T *buf));
! int buf_hide __ARGS((buf_T *buf));
! int grep_internal __ARGS((cmdidx_T cmdidx));
! void ex_make __ARGS((exarg_T *eap));
! int qf_get_size __ARGS((exarg_T *eap));
! int qf_get_cur_idx __ARGS((exarg_T *eap));
! int qf_get_cur_valid_idx __ARGS((exarg_T *eap));
! void ex_cc __ARGS((exarg_T *eap));
! void ex_cnext __ARGS((exarg_T *eap));
! void ex_cfile __ARGS((exarg_T *eap));
! void ex_vimgrep __ARGS((exarg_T *eap));
! char_u *skip_vimgrep_pat __ARGS((char_u *p, char_u **s, int *flags));
! int get_errorlist __ARGS((win_T *wp, list_T *list));
! int set_errorlist __ARGS((win_T *wp, list_T *list, int action, char_u *title));
! void ex_cbuffer __ARGS((exarg_T *eap));
! void ex_cexpr __ARGS((exarg_T *eap));
! void ex_helpgrep __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,33 ----
  /* quickfix.c */
! int qf_init(win_T *wp, char_u *efile, char_u *errorformat, int newlist, char_u *qf_title);
! void qf_free_all(win_T *wp);
! void copy_loclist(win_T *from, win_T *to);
! void qf_jump(qf_info_T *qi, int dir, int errornr, int forceit);
! void qf_list(exarg_T *eap);
! void qf_age(exarg_T *eap);
! void qf_mark_adjust(win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after);
! void ex_cwindow(exarg_T *eap);
! void ex_cclose(exarg_T *eap);
! void ex_copen(exarg_T *eap);
! linenr_T qf_current_entry(win_T *wp);
! int bt_quickfix(buf_T *buf);
! int bt_nofile(buf_T *buf);
! int bt_dontwrite(buf_T *buf);
! int bt_dontwrite_msg(buf_T *buf);
! int buf_hide(buf_T *buf);
! int grep_internal(cmdidx_T cmdidx);
! void ex_make(exarg_T *eap);
! int qf_get_size(exarg_T *eap);
! int qf_get_cur_idx(exarg_T *eap);
! int qf_get_cur_valid_idx(exarg_T *eap);
! void ex_cc(exarg_T *eap);
! void ex_cnext(exarg_T *eap);
! void ex_cfile(exarg_T *eap);
! void ex_vimgrep(exarg_T *eap);
! char_u *skip_vimgrep_pat(char_u *p, char_u **s, int *flags);
! int get_errorlist(win_T *wp, list_T *list);
! int set_errorlist(win_T *wp, list_T *list, int action, char_u *title);
! void ex_cbuffer(exarg_T *eap);
! void ex_cexpr(exarg_T *eap);
! void ex_helpgrep(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/regexp.pro	2014-11-19 16:38:01.516679915 +0100
--- src/proto/regexp.pro	2016-01-19 13:13:11.870975226 +0100
***************
*** 1,20 ****
  /* regexp.c */
! int re_multiline __ARGS((regprog_T *prog));
! int re_lookbehind __ARGS((regprog_T *prog));
! char_u *skip_regexp __ARGS((char_u *startp, int dirc, int magic, char_u **newp));
! int vim_regcomp_had_eol __ARGS((void));
! void free_regexp_stuff __ARGS((void));
! reg_extmatch_T *ref_extmatch __ARGS((reg_extmatch_T *em));
! void unref_extmatch __ARGS((reg_extmatch_T *em));
! char_u *regtilde __ARGS((char_u *source, int magic));
! int vim_regsub __ARGS((regmatch_T *rmp, char_u *source, char_u *dest, int copy, int magic, int backslash));
! int vim_regsub_multi __ARGS((regmmatch_T *rmp, linenr_T lnum, char_u *source, char_u *dest, int copy, int magic, int backslash));
! char_u *reg_submatch __ARGS((int no));
! list_T *reg_submatch_list __ARGS((int no));
! regprog_T *vim_regcomp __ARGS((char_u *expr_arg, int re_flags));
! void vim_regfree __ARGS((regprog_T *prog));
! int vim_regexec_prog __ARGS((regprog_T **prog, int ignore_case, char_u *line, colnr_T col));
! int vim_regexec __ARGS((regmatch_T *rmp, char_u *line, colnr_T col));
! int vim_regexec_nl __ARGS((regmatch_T *rmp, char_u *line, colnr_T col));
! long vim_regexec_multi __ARGS((regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm));
  /* vim: set ft=c : */
--- 1,20 ----
  /* regexp.c */
! int re_multiline(regprog_T *prog);
! int re_lookbehind(regprog_T *prog);
! char_u *skip_regexp(char_u *startp, int dirc, int magic, char_u **newp);
! int vim_regcomp_had_eol(void);
! void free_regexp_stuff(void);
! reg_extmatch_T *ref_extmatch(reg_extmatch_T *em);
! void unref_extmatch(reg_extmatch_T *em);
! char_u *regtilde(char_u *source, int magic);
! int vim_regsub(regmatch_T *rmp, char_u *source, char_u *dest, int copy, int magic, int backslash);
! int vim_regsub_multi(regmmatch_T *rmp, linenr_T lnum, char_u *source, char_u *dest, int copy, int magic, int backslash);
! char_u *reg_submatch(int no);
! list_T *reg_submatch_list(int no);
! regprog_T *vim_regcomp(char_u *expr_arg, int re_flags);
! void vim_regfree(regprog_T *prog);
! int vim_regexec_prog(regprog_T **prog, int ignore_case, char_u *line, colnr_T col);
! int vim_regexec(regmatch_T *rmp, char_u *line, colnr_T col);
! int vim_regexec_nl(regmatch_T *rmp, char_u *line, colnr_T col);
! long vim_regexec_multi(regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/screen.pro	2014-12-17 14:36:10.363090985 +0100
--- src/proto/screen.pro	2016-01-19 13:13:12.258971051 +0100
***************
*** 1,56 ****
  /* screen.c */
! void redraw_later __ARGS((int type));
! void redraw_win_later __ARGS((win_T *wp, int type));
! void redraw_later_clear __ARGS((void));
! void redraw_all_later __ARGS((int type));
! void redraw_curbuf_later __ARGS((int type));
! void redraw_buf_later __ARGS((buf_T *buf, int type));
! int redraw_asap __ARGS((int type));
! void redrawWinline __ARGS((linenr_T lnum, int invalid));
! void update_curbuf __ARGS((int type));
! void update_screen __ARGS((int type));
! int conceal_cursor_line __ARGS((win_T *wp));
! void conceal_check_cursur_line __ARGS((void));
! void update_single_line __ARGS((win_T *wp, linenr_T lnum));
! void update_debug_sign __ARGS((buf_T *buf, linenr_T lnum));
! void updateWindow __ARGS((win_T *wp));
! void rl_mirror __ARGS((char_u *str));
! void status_redraw_all __ARGS((void));
! void status_redraw_curbuf __ARGS((void));
! void redraw_statuslines __ARGS((void));
! void win_redraw_last_status __ARGS((frame_T *frp));
! void win_redr_status_matches __ARGS((expand_T *xp, int num_matches, char_u **matches, int match, int showtail));
! void win_redr_status __ARGS((win_T *wp));
! int stl_connected __ARGS((win_T *wp));
! int get_keymap_str __ARGS((win_T *wp, char_u *buf, int len));
! void screen_putchar __ARGS((int c, int row, int col, int attr));
! void screen_getbytes __ARGS((int row, int col, char_u *bytes, int *attrp));
! void screen_puts __ARGS((char_u *text, int row, int col, int attr));
! void screen_puts_len __ARGS((char_u *text, int textlen, int row, int col, int attr));
! void screen_stop_highlight __ARGS((void));
! void reset_cterm_colors __ARGS((void));
! void screen_draw_rectangle __ARGS((int row, int col, int height, int width, int invert));
! void screen_fill __ARGS((int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr));
! void check_for_delay __ARGS((int check_msg_scroll));
! int screen_valid __ARGS((int doclear));
! void screenalloc __ARGS((int doclear));
! void free_screenlines __ARGS((void));
! void screenclear __ARGS((void));
! int can_clear __ARGS((char_u *p));
! void screen_start __ARGS((void));
! void windgoto __ARGS((int row, int col));
! void setcursor __ARGS((void));
! int win_ins_lines __ARGS((win_T *wp, int row, int line_count, int invalid, int mayclear));
! int win_del_lines __ARGS((win_T *wp, int row, int line_count, int invalid, int mayclear));
! int screen_ins_lines __ARGS((int off, int row, int line_count, int end, win_T *wp));
! int screen_del_lines __ARGS((int off, int row, int line_count, int end, int force, win_T *wp));
! int showmode __ARGS((void));
! void unshowmode __ARGS((int force));
! void get_trans_bufname __ARGS((buf_T *buf));
! int redrawing __ARGS((void));
! int messaging __ARGS((void));
! void showruler __ARGS((int always));
! int number_width __ARGS((win_T *wp));
! int screen_screencol __ARGS((void));
! int screen_screenrow __ARGS((void));
  /* vim: set ft=c : */
--- 1,56 ----
  /* screen.c */
! void redraw_later(int type);
! void redraw_win_later(win_T *wp, int type);
! void redraw_later_clear(void);
! void redraw_all_later(int type);
! void redraw_curbuf_later(int type);
! void redraw_buf_later(buf_T *buf, int type);
! int redraw_asap(int type);
! void redrawWinline(linenr_T lnum, int invalid);
! void update_curbuf(int type);
! void update_screen(int type);
! int conceal_cursor_line(win_T *wp);
! void conceal_check_cursur_line(void);
! void update_single_line(win_T *wp, linenr_T lnum);
! void update_debug_sign(buf_T *buf, linenr_T lnum);
! void updateWindow(win_T *wp);
! void rl_mirror(char_u *str);
! void status_redraw_all(void);
! void status_redraw_curbuf(void);
! void redraw_statuslines(void);
! void win_redraw_last_status(frame_T *frp);
! void win_redr_status_matches(expand_T *xp, int num_matches, char_u **matches, int match, int showtail);
! void win_redr_status(win_T *wp);
! int stl_connected(win_T *wp);
! int get_keymap_str(win_T *wp, char_u *buf, int len);
! void screen_putchar(int c, int row, int col, int attr);
! void screen_getbytes(int row, int col, char_u *bytes, int *attrp);
! void screen_puts(char_u *text, int row, int col, int attr);
! void screen_puts_len(char_u *text, int textlen, int row, int col, int attr);
! void screen_stop_highlight(void);
! void reset_cterm_colors(void);
! void screen_draw_rectangle(int row, int col, int height, int width, int invert);
! void screen_fill(int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr);
! void check_for_delay(int check_msg_scroll);
! int screen_valid(int doclear);
! void screenalloc(int doclear);
! void free_screenlines(void);
! void screenclear(void);
! int can_clear(char_u *p);
! void screen_start(void);
! void windgoto(int row, int col);
! void setcursor(void);
! int win_ins_lines(win_T *wp, int row, int line_count, int invalid, int mayclear);
! int win_del_lines(win_T *wp, int row, int line_count, int invalid, int mayclear);
! int screen_ins_lines(int off, int row, int line_count, int end, win_T *wp);
! int screen_del_lines(int off, int row, int line_count, int end, int force, win_T *wp);
! int showmode(void);
! void unshowmode(int force);
! void get_trans_bufname(buf_T *buf);
! int redrawing(void);
! int messaging(void);
! void showruler(int always);
! int number_width(win_T *wp);
! int screen_screencol(void);
! int screen_screenrow(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/search.pro	2015-08-11 14:26:03.594931131 +0200
--- src/proto/search.pro	2016-01-19 13:13:12.650966832 +0100
***************
*** 1,47 ****
  /* search.c */
! int search_regcomp __ARGS((char_u *pat, int pat_save, int pat_use, int options, regmmatch_T *regmatch));
! char_u *get_search_pat __ARGS((void));
! char_u *reverse_text __ARGS((char_u *s));
! void save_re_pat __ARGS((int idx, char_u *pat, int magic));
! void save_search_patterns __ARGS((void));
! void restore_search_patterns __ARGS((void));
! void free_search_patterns __ARGS((void));
! int ignorecase __ARGS((char_u *pat));
! int pat_has_uppercase __ARGS((char_u *pat));
! char_u *last_csearch __ARGS((void));
! int last_csearch_forward __ARGS((void));
! int last_csearch_until __ARGS((void));
! void set_last_csearch __ARGS((int c, char_u *s, int len));
! void set_csearch_direction __ARGS((int cdir));
! void set_csearch_until __ARGS((int t_cmd));
! char_u *last_search_pat __ARGS((void));
! void reset_search_dir __ARGS((void));
! void set_last_search_pat __ARGS((char_u *s, int idx, int magic, int setlast));
! void last_pat_prog __ARGS((regmmatch_T *regmatch));
! int searchit __ARGS((win_T *win, buf_T *buf, pos_T *pos, int dir, char_u *pat, long count, int options, int pat_use, linenr_T stop_lnum, proftime_T *tm));
! void set_search_direction __ARGS((int cdir));
! int do_search __ARGS((oparg_T *oap, int dirc, char_u *pat, long count, int options, proftime_T *tm));
! int search_for_exact_line __ARGS((buf_T *buf, pos_T *pos, int dir, char_u *pat));
! int searchc __ARGS((cmdarg_T *cap, int t_cmd));
! pos_T *findmatch __ARGS((oparg_T *oap, int initc));
! pos_T *findmatchlimit __ARGS((oparg_T *oap, int initc, int flags, int maxtravel));
! void showmatch __ARGS((int c));
! int findsent __ARGS((int dir, long count));
! int findpar __ARGS((int *pincl, int dir, long count, int what, int both));
! int startPS __ARGS((linenr_T lnum, int para, int both));
! int fwd_word __ARGS((long count, int bigword, int eol));
! int bck_word __ARGS((long count, int bigword, int stop));
! int end_word __ARGS((long count, int bigword, int stop, int empty));
! int bckend_word __ARGS((long count, int bigword, int eol));
! int current_word __ARGS((oparg_T *oap, long count, int include, int bigword));
! int current_sent __ARGS((oparg_T *oap, long count, int include));
! int current_block __ARGS((oparg_T *oap, long count, int include, int what, int other));
! int current_tagblock __ARGS((oparg_T *oap, long count_arg, int include));
! int current_par __ARGS((oparg_T *oap, long count, int include, int type));
! int current_quote __ARGS((oparg_T *oap, long count, int include, int quotechar));
! int current_search __ARGS((long count, int forward));
! int linewhite __ARGS((linenr_T lnum));
! void find_pattern_in_path __ARGS((char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_T start_lnum, linenr_T end_lnum));
! int read_viminfo_search_pattern __ARGS((vir_T *virp, int force));
! void write_viminfo_search_pattern __ARGS((FILE *fp));
  /* vim: set ft=c : */
--- 1,47 ----
  /* search.c */
! int search_regcomp(char_u *pat, int pat_save, int pat_use, int options, regmmatch_T *regmatch);
! char_u *get_search_pat(void);
! char_u *reverse_text(char_u *s);
! void save_re_pat(int idx, char_u *pat, int magic);
! void save_search_patterns(void);
! void restore_search_patterns(void);
! void free_search_patterns(void);
! int ignorecase(char_u *pat);
! int pat_has_uppercase(char_u *pat);
! char_u *last_csearch(void);
! int last_csearch_forward(void);
! int last_csearch_until(void);
! void set_last_csearch(int c, char_u *s, int len);
! void set_csearch_direction(int cdir);
! void set_csearch_until(int t_cmd);
! char_u *last_search_pat(void);
! void reset_search_dir(void);
! void set_last_search_pat(char_u *s, int idx, int magic, int setlast);
! void last_pat_prog(regmmatch_T *regmatch);
! int searchit(win_T *win, buf_T *buf, pos_T *pos, int dir, char_u *pat, long count, int options, int pat_use, linenr_T stop_lnum, proftime_T *tm);
! void set_search_direction(int cdir);
! int do_search(oparg_T *oap, int dirc, char_u *pat, long count, int options, proftime_T *tm);
! int search_for_exact_line(buf_T *buf, pos_T *pos, int dir, char_u *pat);
! int searchc(cmdarg_T *cap, int t_cmd);
! pos_T *findmatch(oparg_T *oap, int initc);
! pos_T *findmatchlimit(oparg_T *oap, int initc, int flags, int maxtravel);
! void showmatch(int c);
! int findsent(int dir, long count);
! int findpar(int *pincl, int dir, long count, int what, int both);
! int startPS(linenr_T lnum, int para, int both);
! int fwd_word(long count, int bigword, int eol);
! int bck_word(long count, int bigword, int stop);
! int end_word(long count, int bigword, int stop, int empty);
! int bckend_word(long count, int bigword, int eol);
! int current_word(oparg_T *oap, long count, int include, int bigword);
! int current_sent(oparg_T *oap, long count, int include);
! int current_block(oparg_T *oap, long count, int include, int what, int other);
! int current_tagblock(oparg_T *oap, long count_arg, int include);
! int current_par(oparg_T *oap, long count, int include, int type);
! int current_quote(oparg_T *oap, long count, int include, int quotechar);
! int current_search(long count, int forward);
! int linewhite(linenr_T lnum);
! void find_pattern_in_path(char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_T start_lnum, linenr_T end_lnum);
! int read_viminfo_search_pattern(vir_T *virp, int force);
! void write_viminfo_search_pattern(FILE *fp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/sha256.pro	2013-08-10 13:37:26.000000000 +0200
--- src/proto/sha256.pro	2016-01-19 13:13:13.038962657 +0100
***************
*** 1,9 ****
  /* sha256.c */
! void sha256_start __ARGS((context_sha256_T *ctx));
! void sha256_update __ARGS((context_sha256_T *ctx, char_u *input, UINT32_T length));
! void sha256_finish __ARGS((context_sha256_T *ctx, char_u digest[32]));
! char_u *sha256_bytes __ARGS((char_u *buf, int buf_len, char_u *salt, int salt_len));
! char_u *sha256_key __ARGS((char_u *buf, char_u *salt, int salt_len));
! int sha256_self_test __ARGS((void));
! void sha2_seed __ARGS((char_u *header, int header_len, char_u *salt, int salt_len));
  /* vim: set ft=c : */
--- 1,9 ----
  /* sha256.c */
! void sha256_start(context_sha256_T *ctx);
! void sha256_update(context_sha256_T *ctx, char_u *input, UINT32_T length);
! void sha256_finish(context_sha256_T *ctx, char_u digest[32]);
! char_u *sha256_bytes(char_u *buf, int buf_len, char_u *salt, int salt_len);
! char_u *sha256_key(char_u *buf, char_u *salt, int salt_len);
! int sha256_self_test(void);
! void sha2_seed(char_u *header, int header_len, char_u *salt, int salt_len);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/spell.pro	2013-11-28 17:41:41.000000000 +0100
--- src/proto/spell.pro	2016-01-19 13:13:13.450958223 +0100
***************
*** 1,26 ****
  /* spell.c */
! int spell_check __ARGS((win_T *wp, char_u *ptr, hlf_T *attrp, int *capcol, int docount));
! int spell_move_to __ARGS((win_T *wp, int dir, int allwords, int curline, hlf_T *attrp));
! void spell_cat_line __ARGS((char_u *buf, char_u *line, int maxlen));
! char_u *did_set_spelllang __ARGS((win_T *wp));
! void spell_delete_wordlist __ARGS((void));
! void spell_free_all __ARGS((void));
! void spell_reload __ARGS((void));
! int spell_check_msm __ARGS((void));
! void ex_mkspell __ARGS((exarg_T *eap));
! void ex_spell __ARGS((exarg_T *eap));
! void spell_add_word __ARGS((char_u *word, int len, int bad, int idx, int undo));
! void init_spell_chartab __ARGS((void));
! int spell_check_sps __ARGS((void));
! void spell_suggest __ARGS((int count));
! void ex_spellrepall __ARGS((exarg_T *eap));
! void spell_suggest_list __ARGS((garray_T *gap, char_u *word, int maxcount, int need_cap, int interactive));
! char_u *eval_soundfold __ARGS((char_u *word));
! void ex_spellinfo __ARGS((exarg_T *eap));
! void ex_spelldump __ARGS((exarg_T *eap));
! void spell_dump_compl __ARGS((char_u *pat, int ic, int *dir, int dumpflags_arg));
! char_u *spell_to_word_end __ARGS((char_u *start, win_T *win));
! int spell_word_start __ARGS((int startcol));
! void spell_expand_check_cap __ARGS((colnr_T col));
! int expand_spelling __ARGS((linenr_T lnum, char_u *pat, char_u ***matchp));
  /* vim: set ft=c : */
--- 1,26 ----
  /* spell.c */
! int spell_check(win_T *wp, char_u *ptr, hlf_T *attrp, int *capcol, int docount);
! int spell_move_to(win_T *wp, int dir, int allwords, int curline, hlf_T *attrp);
! void spell_cat_line(char_u *buf, char_u *line, int maxlen);
! char_u *did_set_spelllang(win_T *wp);
! void spell_delete_wordlist(void);
! void spell_free_all(void);
! void spell_reload(void);
! int spell_check_msm(void);
! void ex_mkspell(exarg_T *eap);
! void ex_spell(exarg_T *eap);
! void spell_add_word(char_u *word, int len, int bad, int idx, int undo);
! void init_spell_chartab(void);
! int spell_check_sps(void);
! void spell_suggest(int count);
! void ex_spellrepall(exarg_T *eap);
! void spell_suggest_list(garray_T *gap, char_u *word, int maxcount, int need_cap, int interactive);
! char_u *eval_soundfold(char_u *word);
! void ex_spellinfo(exarg_T *eap);
! void ex_spelldump(exarg_T *eap);
! void spell_dump_compl(char_u *pat, int ic, int *dir, int dumpflags_arg);
! char_u *spell_to_word_end(char_u *start, win_T *win);
! int spell_word_start(int startcol);
! void spell_expand_check_cap(colnr_T col);
! int expand_spelling(linenr_T lnum, char_u *pat, char_u ***matchp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/syntax.pro	2013-08-10 13:37:27.000000000 +0200
--- src/proto/syntax.pro	2016-01-19 13:13:13.850953919 +0100
***************
*** 1,56 ****
  /* syntax.c */
! void syntax_start __ARGS((win_T *wp, linenr_T lnum));
! void syn_stack_free_all __ARGS((synblock_T *block));
! void syn_stack_apply_changes __ARGS((buf_T *buf));
! void syntax_end_parsing __ARGS((linenr_T lnum));
! int syntax_check_changed __ARGS((linenr_T lnum));
! int get_syntax_attr __ARGS((colnr_T col, int *can_spell, int keep_state));
! void syntax_clear __ARGS((synblock_T *block));
! void reset_synblock __ARGS((win_T *wp));
! void ex_syntax __ARGS((exarg_T *eap));
! void ex_ownsyntax __ARGS((exarg_T *eap));
! int syntax_present __ARGS((win_T *win));
! void reset_expand_highlight __ARGS((void));
! void set_context_in_echohl_cmd __ARGS((expand_T *xp, char_u *arg));
! void set_context_in_syntax_cmd __ARGS((expand_T *xp, char_u *arg));
! char_u *get_syntax_name __ARGS((expand_T *xp, int idx));
! int syn_get_id __ARGS((win_T *wp, long lnum, colnr_T col, int trans, int *spellp, int keep_state));
! int get_syntax_info __ARGS((int *seqnrp));
! int syn_get_sub_char __ARGS((void));
! int syn_get_stack_item __ARGS((int i));
! int syn_get_foldlevel __ARGS((win_T *wp, long lnum));
! void ex_syntime __ARGS((exarg_T *eap));
! char_u *get_syntime_arg __ARGS((expand_T *xp, int idx));
! void init_highlight __ARGS((int both, int reset));
! int load_colors __ARGS((char_u *name));
! void do_highlight __ARGS((char_u *line, int forceit, int init));
! void free_highlight __ARGS((void));
! void restore_cterm_colors __ARGS((void));
! void set_normal_colors __ARGS((void));
! char_u *hl_get_font_name __ARGS((void));
! void hl_set_font_name __ARGS((char_u *font_name));
! void hl_set_bg_color_name __ARGS((char_u *name));
! void hl_set_fg_color_name __ARGS((char_u *name));
! void clear_hl_tables __ARGS((void));
! int hl_combine_attr __ARGS((int char_attr, int prim_attr));
! attrentry_T *syn_gui_attr2entry __ARGS((int attr));
! int syn_attr2attr __ARGS((int attr));
! attrentry_T *syn_term_attr2entry __ARGS((int attr));
! attrentry_T *syn_cterm_attr2entry __ARGS((int attr));
! char_u *highlight_has_attr __ARGS((int id, int flag, int modec));
! char_u *highlight_color __ARGS((int id, char_u *what, int modec));
! long_u highlight_gui_color_rgb __ARGS((int id, int fg));
! int syn_name2id __ARGS((char_u *name));
! int highlight_exists __ARGS((char_u *name));
! char_u *syn_id2name __ARGS((int id));
! int syn_namen2id __ARGS((char_u *linep, int len));
! int syn_check_group __ARGS((char_u *pp, int len));
! int syn_id2attr __ARGS((int hl_id));
! int syn_id2colors __ARGS((int hl_id, guicolor_T *fgp, guicolor_T *bgp));
! int syn_get_final_id __ARGS((int hl_id));
! void highlight_gui_started __ARGS((void));
! int highlight_changed __ARGS((void));
! void set_context_in_highlight_cmd __ARGS((expand_T *xp, char_u *arg));
! char_u *get_highlight_name __ARGS((expand_T *xp, int idx));
! void free_highlight_fonts __ARGS((void));
  /* vim: set ft=c : */
--- 1,56 ----
  /* syntax.c */
! void syntax_start(win_T *wp, linenr_T lnum);
! void syn_stack_free_all(synblock_T *block);
! void syn_stack_apply_changes(buf_T *buf);
! void syntax_end_parsing(linenr_T lnum);
! int syntax_check_changed(linenr_T lnum);
! int get_syntax_attr(colnr_T col, int *can_spell, int keep_state);
! void syntax_clear(synblock_T *block);
! void reset_synblock(win_T *wp);
! void ex_syntax(exarg_T *eap);
! void ex_ownsyntax(exarg_T *eap);
! int syntax_present(win_T *win);
! void reset_expand_highlight(void);
! void set_context_in_echohl_cmd(expand_T *xp, char_u *arg);
! void set_context_in_syntax_cmd(expand_T *xp, char_u *arg);
! char_u *get_syntax_name(expand_T *xp, int idx);
! int syn_get_id(win_T *wp, long lnum, colnr_T col, int trans, int *spellp, int keep_state);
! int get_syntax_info(int *seqnrp);
! int syn_get_sub_char(void);
! int syn_get_stack_item(int i);
! int syn_get_foldlevel(win_T *wp, long lnum);
! void ex_syntime(exarg_T *eap);
! char_u *get_syntime_arg(expand_T *xp, int idx);
! void init_highlight(int both, int reset);
! int load_colors(char_u *name);
! void do_highlight(char_u *line, int forceit, int init);
! void free_highlight(void);
! void restore_cterm_colors(void);
! void set_normal_colors(void);
! char_u *hl_get_font_name(void);
! void hl_set_font_name(char_u *font_name);
! void hl_set_bg_color_name(char_u *name);
! void hl_set_fg_color_name(char_u *name);
! void clear_hl_tables(void);
! int hl_combine_attr(int char_attr, int prim_attr);
! attrentry_T *syn_gui_attr2entry(int attr);
! int syn_attr2attr(int attr);
! attrentry_T *syn_term_attr2entry(int attr);
! attrentry_T *syn_cterm_attr2entry(int attr);
! char_u *highlight_has_attr(int id, int flag, int modec);
! char_u *highlight_color(int id, char_u *what, int modec);
! long_u highlight_gui_color_rgb(int id, int fg);
! int syn_name2id(char_u *name);
! int highlight_exists(char_u *name);
! char_u *syn_id2name(int id);
! int syn_namen2id(char_u *linep, int len);
! int syn_check_group(char_u *pp, int len);
! int syn_id2attr(int hl_id);
! int syn_id2colors(int hl_id, guicolor_T *fgp, guicolor_T *bgp);
! int syn_get_final_id(int hl_id);
! void highlight_gui_started(void);
! int highlight_changed(void);
! void set_context_in_highlight_cmd(expand_T *xp, char_u *arg);
! char_u *get_highlight_name(expand_T *xp, int idx);
! void free_highlight_fonts(void);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/tag.pro	2013-08-10 13:37:27.000000000 +0200
--- src/proto/tag.pro	2016-01-19 13:13:14.238949744 +0100
***************
*** 1,12 ****
  /* tag.c */
! int do_tag __ARGS((char_u *tag, int type, int count, int forceit, int verbose));
! void tag_freematch __ARGS((void));
! void do_tags __ARGS((exarg_T *eap));
! int find_tags __ARGS((char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount, char_u *buf_ffname));
! void free_tag_stuff __ARGS((void));
! int get_tagfname __ARGS((tagname_T *tnp, int first, char_u *buf));
! void tagname_free __ARGS((tagname_T *tnp));
! void simplify_filename __ARGS((char_u *filename));
! int expand_tags __ARGS((int tagnames, char_u *pat, int *num_file, char_u ***file));
! int get_tags __ARGS((list_T *list, char_u *pat));
  /* vim: set ft=c : */
--- 1,12 ----
  /* tag.c */
! int do_tag(char_u *tag, int type, int count, int forceit, int verbose);
! void tag_freematch(void);
! void do_tags(exarg_T *eap);
! int find_tags(char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount, char_u *buf_ffname);
! void free_tag_stuff(void);
! int get_tagfname(tagname_T *tnp, int first, char_u *buf);
! void tagname_free(tagname_T *tnp);
! void simplify_filename(char_u *filename);
! int expand_tags(int tagnames, char_u *pat, int *num_file, char_u ***file);
! int get_tags(list_T *list, char_u *pat);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/termlib.pro	2013-08-10 13:37:28.000000000 +0200
--- src/proto/termlib.pro	2016-01-19 13:13:15.030941221 +0100
***************
*** 1,8 ****
  /* termlib.c */
! int tgetent __ARGS((char *tbuf, char *term));
! int tgetflag __ARGS((char *id));
! int tgetnum __ARGS((char *id));
! char *tgetstr __ARGS((char *id, char **buf));
! char *tgoto __ARGS((char *cm, int col, int line));
! int tputs __ARGS((char *cp, int affcnt, void (*outc)(unsigned int)));
  /* vim: set ft=c : */
--- 1,8 ----
  /* termlib.c */
! int tgetent(char *tbuf, char *term);
! int tgetflag(char *id);
! int tgetnum(char *id);
! char *tgetstr(char *id, char **buf);
! char *tgoto(char *cm, int col, int line);
! int tputs(char *cp, int affcnt, void (*outc)(unsigned int));
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/term.pro	2015-06-25 17:03:32.584666216 +0200
--- src/proto/term.pro	2016-01-19 13:13:14.642945396 +0100
***************
*** 1,63 ****
  /* term.c */
! int set_termname __ARGS((char_u *term));
! void set_mouse_termcode __ARGS((int n, char_u *s));
! void del_mouse_termcode __ARGS((int n));
! void getlinecol __ARGS((long *cp, long *rp));
! int add_termcap_entry __ARGS((char_u *name, int force));
! int term_is_8bit __ARGS((char_u *name));
! int term_is_gui __ARGS((char_u *name));
! char_u *tltoa __ARGS((unsigned long i));
! void termcapinit __ARGS((char_u *name));
! void out_flush __ARGS((void));
! void out_flush_check __ARGS((void));
! void out_trash __ARGS((void));
! void out_char __ARGS((unsigned c));
! void out_str_nf __ARGS((char_u *s));
! void out_str __ARGS((char_u *s));
! void term_windgoto __ARGS((int row, int col));
! void term_cursor_right __ARGS((int i));
! void term_append_lines __ARGS((int line_count));
! void term_delete_lines __ARGS((int line_count));
! void term_set_winpos __ARGS((int x, int y));
! void term_set_winsize __ARGS((int width, int height));
! void term_fg_color __ARGS((int n));
! void term_bg_color __ARGS((int n));
! void term_settitle __ARGS((char_u *title));
! void ttest __ARGS((int pairs));
! void add_long_to_buf __ARGS((long_u val, char_u *dst));
! void check_shellsize __ARGS((void));
! void limit_screen_size __ARGS((void));
! void win_new_shellsize __ARGS((void));
! void shell_resized __ARGS((void));
! void shell_resized_check __ARGS((void));
! void set_shellsize __ARGS((int width, int height, int mustset));
! void settmode __ARGS((int tmode));
! void starttermcap __ARGS((void));
! void stoptermcap __ARGS((void));
! void may_req_termresponse __ARGS((void));
! void may_req_ambiguous_char_width __ARGS((void));
! void may_req_bg_color __ARGS((void));
! int swapping_screen __ARGS((void));
! void setmouse __ARGS((void));
! int mouse_has __ARGS((int c));
! int mouse_model_popup __ARGS((void));
! void scroll_start __ARGS((void));
! void cursor_on __ARGS((void));
! void cursor_off __ARGS((void));
! void term_cursor_shape __ARGS((void));
! void scroll_region_set __ARGS((win_T *wp, int off));
! void scroll_region_reset __ARGS((void));
! void clear_termcodes __ARGS((void));
! void add_termcode __ARGS((char_u *name, char_u *string, int flags));
! char_u *find_termcode __ARGS((char_u *name));
! char_u *get_termcode __ARGS((int i));
! void del_termcode __ARGS((char_u *name));
! void set_mouse_topline __ARGS((win_T *wp));
! int check_termcode __ARGS((int max_offset, char_u *buf, int bufsize, int *buflen));
! char_u *replace_termcodes __ARGS((char_u *from, char_u **bufp, int from_part, int do_lt, int special));
! int find_term_bykeys __ARGS((char_u *src));
! void show_termcodes __ARGS((void));
! int show_one_termcode __ARGS((char_u *name, char_u *code, int printit));
! char_u *translate_mapping __ARGS((char_u *str, int expmap));
! void update_tcap __ARGS((int attr));
  /* vim: set ft=c : */
--- 1,63 ----
  /* term.c */
! int set_termname(char_u *term);
! void set_mouse_termcode(int n, char_u *s);
! void del_mouse_termcode(int n);
! void getlinecol(long *cp, long *rp);
! int add_termcap_entry(char_u *name, int force);
! int term_is_8bit(char_u *name);
! int term_is_gui(char_u *name);
! char_u *tltoa(unsigned long i);
! void termcapinit(char_u *name);
! void out_flush(void);
! void out_flush_check(void);
! void out_trash(void);
! void out_char(unsigned c);
! void out_str_nf(char_u *s);
! void out_str(char_u *s);
! void term_windgoto(int row, int col);
! void term_cursor_right(int i);
! void term_append_lines(int line_count);
! void term_delete_lines(int line_count);
! void term_set_winpos(int x, int y);
! void term_set_winsize(int width, int height);
! void term_fg_color(int n);
! void term_bg_color(int n);
! void term_settitle(char_u *title);
! void ttest(int pairs);
! void add_long_to_buf(long_u val, char_u *dst);
! void check_shellsize(void);
! void limit_screen_size(void);
! void win_new_shellsize(void);
! void shell_resized(void);
! void shell_resized_check(void);
! void set_shellsize(int width, int height, int mustset);
! void settmode(int tmode);
! void starttermcap(void);
! void stoptermcap(void);
! void may_req_termresponse(void);
! void may_req_ambiguous_char_width(void);
! void may_req_bg_color(void);
! int swapping_screen(void);
! void setmouse(void);
! int mouse_has(int c);
! int mouse_model_popup(void);
! void scroll_start(void);
! void cursor_on(void);
! void cursor_off(void);
! void term_cursor_shape(void);
! void scroll_region_set(win_T *wp, int off);
! void scroll_region_reset(void);
! void clear_termcodes(void);
! void add_termcode(char_u *name, char_u *string, int flags);
! char_u *find_termcode(char_u *name);
! char_u *get_termcode(int i);
! void del_termcode(char_u *name);
! void set_mouse_topline(win_T *wp);
! int check_termcode(int max_offset, char_u *buf, int bufsize, int *buflen);
! char_u *replace_termcodes(char_u *from, char_u **bufp, int from_part, int do_lt, int special);
! int find_term_bykeys(char_u *src);
! void show_termcodes(void);
! int show_one_termcode(char_u *name, char_u *code, int printit);
! char_u *translate_mapping(char_u *str, int expmap);
! void update_tcap(int attr);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/ui.pro	2014-08-06 18:17:03.475147780 +0200
--- src/proto/ui.pro	2016-01-19 13:13:15.438936830 +0100
***************
*** 1,67 ****
  /* ui.c */
! void ui_write __ARGS((char_u *s, int len));
! void ui_inchar_undo __ARGS((char_u *s, int len));
! int ui_inchar __ARGS((char_u *buf, int maxlen, long wtime, int tb_change_cnt));
! int ui_char_avail __ARGS((void));
! void ui_delay __ARGS((long msec, int ignoreinput));
! void ui_suspend __ARGS((void));
! void suspend_shell __ARGS((void));
! int ui_get_shellsize __ARGS((void));
! void ui_set_shellsize __ARGS((int mustset));
! void ui_new_shellsize __ARGS((void));
! void ui_breakcheck __ARGS((void));
! void clip_init __ARGS((int can_use));
! void clip_update_selection __ARGS((VimClipboard *clip));
! void clip_own_selection __ARGS((VimClipboard *cbd));
! void clip_lose_selection __ARGS((VimClipboard *cbd));
! void start_global_changes __ARGS((void));
! void end_global_changes __ARGS((void));
! void clip_auto_select __ARGS((void));
! int clip_isautosel_star __ARGS((void));
! int clip_isautosel_plus __ARGS((void));
! void clip_modeless __ARGS((int button, int is_click, int is_drag));
! void clip_start_selection __ARGS((int col, int row, int repeated_click));
! void clip_process_selection __ARGS((int button, int col, int row, int_u repeated_click));
! void clip_may_redraw_selection __ARGS((int row, int col, int len));
! void clip_clear_selection __ARGS((VimClipboard *cbd));
! void clip_may_clear_selection __ARGS((int row1, int row2));
! void clip_scroll_selection __ARGS((int rows));
! void clip_copy_modeless_selection __ARGS((int both));
! int clip_gen_own_selection __ARGS((VimClipboard *cbd));
! void clip_gen_lose_selection __ARGS((VimClipboard *cbd));
! void clip_gen_set_selection __ARGS((VimClipboard *cbd));
! void clip_gen_request_selection __ARGS((VimClipboard *cbd));
! int clip_gen_owner_exists __ARGS((VimClipboard *cbd));
! int vim_is_input_buf_full __ARGS((void));
! int vim_is_input_buf_empty __ARGS((void));
! int vim_free_in_input_buf __ARGS((void));
! int vim_used_in_input_buf __ARGS((void));
! char_u *get_input_buf __ARGS((void));
! void set_input_buf __ARGS((char_u *p));
! void add_to_input_buf __ARGS((char_u *s, int len));
! void add_to_input_buf_csi __ARGS((char_u *str, int len));
! void push_raw_key __ARGS((char_u *s, int len));
! void trash_input_buf __ARGS((void));
! int read_from_input_buf __ARGS((char_u *buf, long maxlen));
! void fill_input_buf __ARGS((int exit_on_error));
! void read_error_exit __ARGS((void));
! void ui_cursor_shape __ARGS((void));
! int check_col __ARGS((int col));
! int check_row __ARGS((int row));
! void open_app_context __ARGS((void));
! void x11_setup_atoms __ARGS((Display *dpy));
! void x11_setup_selection __ARGS((Widget w));
! void clip_x11_request_selection __ARGS((Widget myShell, Display *dpy, VimClipboard *cbd));
! void clip_x11_lose_selection __ARGS((Widget myShell, VimClipboard *cbd));
! int clip_x11_own_selection __ARGS((Widget myShell, VimClipboard *cbd));
! void clip_x11_set_selection __ARGS((VimClipboard *cbd));
! int clip_x11_owner_exists __ARGS((VimClipboard *cbd));
! void yank_cut_buffer0 __ARGS((Display *dpy, VimClipboard *cbd));
! int jump_to_mouse __ARGS((int flags, int *inclusive, int which_button));
! int mouse_comp_pos __ARGS((win_T *win, int *rowp, int *colp, linenr_T *lnump));
! win_T *mouse_find_win __ARGS((int *rowp, int *colp));
! int get_fpos_of_mouse __ARGS((pos_T *mpos));
! int vcol2col __ARGS((win_T *wp, linenr_T lnum, int vcol));
! void ui_focus_change __ARGS((int in_focus));
! void im_save_status __ARGS((long *psave));
  /* vim: set ft=c : */
--- 1,67 ----
  /* ui.c */
! void ui_write(char_u *s, int len);
! void ui_inchar_undo(char_u *s, int len);
! int ui_inchar(char_u *buf, int maxlen, long wtime, int tb_change_cnt);
! int ui_char_avail(void);
! void ui_delay(long msec, int ignoreinput);
! void ui_suspend(void);
! void suspend_shell(void);
! int ui_get_shellsize(void);
! void ui_set_shellsize(int mustset);
! void ui_new_shellsize(void);
! void ui_breakcheck(void);
! void clip_init(int can_use);
! void clip_update_selection(VimClipboard *clip);
! void clip_own_selection(VimClipboard *cbd);
! void clip_lose_selection(VimClipboard *cbd);
! void start_global_changes(void);
! void end_global_changes(void);
! void clip_auto_select(void);
! int clip_isautosel_star(void);
! int clip_isautosel_plus(void);
! void clip_modeless(int button, int is_click, int is_drag);
! void clip_start_selection(int col, int row, int repeated_click);
! void clip_process_selection(int button, int col, int row, int_u repeated_click);
! void clip_may_redraw_selection(int row, int col, int len);
! void clip_clear_selection(VimClipboard *cbd);
! void clip_may_clear_selection(int row1, int row2);
! void clip_scroll_selection(int rows);
! void clip_copy_modeless_selection(int both);
! int clip_gen_own_selection(VimClipboard *cbd);
! void clip_gen_lose_selection(VimClipboard *cbd);
! void clip_gen_set_selection(VimClipboard *cbd);
! void clip_gen_request_selection(VimClipboard *cbd);
! int clip_gen_owner_exists(VimClipboard *cbd);
! int vim_is_input_buf_full(void);
! int vim_is_input_buf_empty(void);
! int vim_free_in_input_buf(void);
! int vim_used_in_input_buf(void);
! char_u *get_input_buf(void);
! void set_input_buf(char_u *p);
! void add_to_input_buf(char_u *s, int len);
! void add_to_input_buf_csi(char_u *str, int len);
! void push_raw_key(char_u *s, int len);
! void trash_input_buf(void);
! int read_from_input_buf(char_u *buf, long maxlen);
! void fill_input_buf(int exit_on_error);
! void read_error_exit(void);
! void ui_cursor_shape(void);
! int check_col(int col);
! int check_row(int row);
! void open_app_context(void);
! void x11_setup_atoms(Display *dpy);
! void x11_setup_selection(Widget w);
! void clip_x11_request_selection(Widget myShell, Display *dpy, VimClipboard *cbd);
! void clip_x11_lose_selection(Widget myShell, VimClipboard *cbd);
! int clip_x11_own_selection(Widget myShell, VimClipboard *cbd);
! void clip_x11_set_selection(VimClipboard *cbd);
! int clip_x11_owner_exists(VimClipboard *cbd);
! void yank_cut_buffer0(Display *dpy, VimClipboard *cbd);
! int jump_to_mouse(int flags, int *inclusive, int which_button);
! int mouse_comp_pos(win_T *win, int *rowp, int *colp, linenr_T *lnump);
! win_T *mouse_find_win(int *rowp, int *colp);
! int get_fpos_of_mouse(pos_T *mpos);
! int vcol2col(win_T *wp, linenr_T lnum, int vcol);
! void ui_focus_change(int in_focus);
! void im_save_status(long *psave);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/undo.pro	2013-08-10 13:37:29.000000000 +0200
--- src/proto/undo.pro	2016-01-19 13:13:15.826932656 +0100
***************
*** 1,30 ****
  /* undo.c */
! int u_save_cursor __ARGS((void));
! int u_save __ARGS((linenr_T top, linenr_T bot));
! int u_savesub __ARGS((linenr_T lnum));
! int u_inssub __ARGS((linenr_T lnum));
! int u_savedel __ARGS((linenr_T lnum, long nlines));
! int undo_allowed __ARGS((void));
! int u_savecommon __ARGS((linenr_T top, linenr_T bot, linenr_T newbot, int reload));
! void u_compute_hash __ARGS((char_u *hash));
! char_u *u_get_undo_file_name __ARGS((char_u *buf_ffname, int reading));
! void u_write_undo __ARGS((char_u *name, int forceit, buf_T *buf, char_u *hash));
! void u_read_undo __ARGS((char_u *name, char_u *hash, char_u *orig_name));
! void u_undo __ARGS((int count));
! void u_redo __ARGS((int count));
! void undo_time __ARGS((long step, int sec, int file, int absolute));
! void u_sync __ARGS((int force));
! void ex_undolist __ARGS((exarg_T *eap));
! void ex_undojoin __ARGS((exarg_T *eap));
! void u_unchanged __ARGS((buf_T *buf));
! void u_find_first_changed __ARGS((void));
! void u_update_save_nr __ARGS((buf_T *buf));
! void u_clearall __ARGS((buf_T *buf));
! void u_saveline __ARGS((linenr_T lnum));
! void u_clearline __ARGS((void));
! void u_undoline __ARGS((void));
! void u_blockfree __ARGS((buf_T *buf));
! int bufIsChanged __ARGS((buf_T *buf));
! int curbufIsChanged __ARGS((void));
! void u_eval_tree __ARGS((u_header_T *first_uhp, list_T *list));
  /* vim: set ft=c : */
--- 1,30 ----
  /* undo.c */
! int u_save_cursor(void);
! int u_save(linenr_T top, linenr_T bot);
! int u_savesub(linenr_T lnum);
! int u_inssub(linenr_T lnum);
! int u_savedel(linenr_T lnum, long nlines);
! int undo_allowed(void);
! int u_savecommon(linenr_T top, linenr_T bot, linenr_T newbot, int reload);
! void u_compute_hash(char_u *hash);
! char_u *u_get_undo_file_name(char_u *buf_ffname, int reading);
! void u_write_undo(char_u *name, int forceit, buf_T *buf, char_u *hash);
! void u_read_undo(char_u *name, char_u *hash, char_u *orig_name);
! void u_undo(int count);
! void u_redo(int count);
! void undo_time(long step, int sec, int file, int absolute);
! void u_sync(int force);
! void ex_undolist(exarg_T *eap);
! void ex_undojoin(exarg_T *eap);
! void u_unchanged(buf_T *buf);
! void u_find_first_changed(void);
! void u_update_save_nr(buf_T *buf);
! void u_clearall(buf_T *buf);
! void u_saveline(linenr_T lnum);
! void u_clearline(void);
! void u_undoline(void);
! void u_blockfree(buf_T *buf);
! int bufIsChanged(buf_T *buf);
! int curbufIsChanged(void);
! void u_eval_tree(u_header_T *first_uhp, list_T *list);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/version.pro	2013-08-10 13:37:29.000000000 +0200
--- src/proto/version.pro	2016-01-19 13:13:16.234928264 +0100
***************
*** 1,10 ****
  /* version.c */
! void make_version __ARGS((void));
! int highest_patch __ARGS((void));
! int has_patch __ARGS((int n));
! void ex_version __ARGS((exarg_T *eap));
! void list_version __ARGS((void));
! void maybe_intro_message __ARGS((void));
! void intro_message __ARGS((int colon));
! void ex_intro __ARGS((exarg_T *eap));
  /* vim: set ft=c : */
--- 1,10 ----
  /* version.c */
! void make_version(void);
! int highest_patch(void);
! int has_patch(int n);
! void ex_version(exarg_T *eap);
! void list_version(void);
! void maybe_intro_message(void);
! void intro_message(int colon);
! void ex_intro(exarg_T *eap);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/winclip.pro	2014-03-12 19:24:32.508933166 +0100
--- src/proto/winclip.pro	2016-01-19 13:13:24.434840021 +0100
***************
*** 1,15 ****
  /* winclip.c */
! int utf8_to_utf16 __ARGS((char_u *instr, int inlen, short_u *outstr, int *unconvlenp));
! int utf16_to_utf8 __ARGS((short_u *instr, int inlen, char_u *outstr));
! void MultiByteToWideChar_alloc __ARGS((UINT cp, DWORD flags, LPCSTR in, int inlen, LPWSTR *out, int *outlen));
! void WideCharToMultiByte_alloc __ARGS((UINT cp, DWORD flags, LPCWSTR in, int inlen, LPSTR *out, int *outlen, LPCSTR def, LPBOOL useddef));
! void win_clip_init __ARGS((void));
! int clip_mch_own_selection __ARGS((VimClipboard *cbd));
! void clip_mch_lose_selection __ARGS((VimClipboard *cbd));
! void clip_mch_request_selection __ARGS((VimClipboard *cbd));
! void clip_mch_set_selection __ARGS((VimClipboard *cbd));
! short_u *enc_to_utf16 __ARGS((char_u *str, int *lenp));
! char_u *utf16_to_enc __ARGS((short_u *str, int *lenp));
! void acp_to_enc __ARGS((char_u *str, int str_size, char_u **out, int *outlen));
! void enc_to_acp __ARGS((char_u *str, int str_size, char_u **out, int *outlen));
  /* vim: set ft=c : */
--- 1,15 ----
  /* winclip.c */
! int utf8_to_utf16(char_u *instr, int inlen, short_u *outstr, int *unconvlenp);
! int utf16_to_utf8(short_u *instr, int inlen, char_u *outstr);
! void MultiByteToWideChar_alloc(UINT cp, DWORD flags, LPCSTR in, int inlen, LPWSTR *out, int *outlen);
! void WideCharToMultiByte_alloc(UINT cp, DWORD flags, LPCWSTR in, int inlen, LPSTR *out, int *outlen, LPCSTR def, LPBOOL useddef);
! void win_clip_init(void);
! int clip_mch_own_selection(VimClipboard *cbd);
! void clip_mch_lose_selection(VimClipboard *cbd);
! void clip_mch_request_selection(VimClipboard *cbd);
! void clip_mch_set_selection(VimClipboard *cbd);
! short_u *enc_to_utf16(char_u *str, int *lenp);
! char_u *utf16_to_enc(short_u *str, int *lenp);
! void acp_to_enc(char_u *str, int str_size, char_u **out, int *outlen);
! void enc_to_acp(char_u *str, int str_size, char_u **out, int *outlen);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/window.pro	2015-12-05 19:47:00.730636672 +0100
--- src/proto/window.pro	2016-01-19 13:13:16.630924002 +0100
***************
*** 1,86 ****
  /* window.c */
! void do_window __ARGS((int nchar, long Prenum, int xchar));
! void get_wincmd_addr_type __ARGS((char_u *arg, exarg_T *eap));
! int win_split __ARGS((int size, int flags));
! int win_split_ins __ARGS((int size, int flags, win_T *new_wp, int dir));
! int win_valid __ARGS((win_T *win));
! int win_count __ARGS((void));
! int make_windows __ARGS((int count, int vertical));
! void win_move_after __ARGS((win_T *win1, win_T *win2));
! void win_equal __ARGS((win_T *next_curwin, int current, int dir));
! void close_windows __ARGS((buf_T *buf, int keep_curwin));
! int one_window __ARGS((void));
! int win_close __ARGS((win_T *win, int free_buf));
! void win_close_othertab __ARGS((win_T *win, int free_buf, tabpage_T *tp));
! void win_free_all __ARGS((void));
! win_T *winframe_remove __ARGS((win_T *win, int *dirp, tabpage_T *tp));
! void close_others __ARGS((int message, int forceit));
! void curwin_init __ARGS((void));
! void win_init_empty __ARGS((win_T *wp));
! int win_alloc_first __ARGS((void));
! void win_alloc_aucmd_win __ARGS((void));
! void win_init_size __ARGS((void));
! void free_tabpage __ARGS((tabpage_T *tp));
! int win_new_tabpage __ARGS((int after));
! int may_open_tabpage __ARGS((void));
! int make_tabpages __ARGS((int maxcount));
! int valid_tabpage __ARGS((tabpage_T *tpc));
! tabpage_T *find_tabpage __ARGS((int n));
! int tabpage_index __ARGS((tabpage_T *ftp));
! void goto_tabpage __ARGS((int n));
! void goto_tabpage_tp __ARGS((tabpage_T *tp, int trigger_enter_autocmds, int trigger_leave_autocmds));
! void goto_tabpage_win __ARGS((tabpage_T *tp, win_T *wp));
! void tabpage_move __ARGS((int nr));
! void win_goto __ARGS((win_T *wp));
! win_T *win_find_nr __ARGS((int winnr));
! tabpage_T *win_find_tabpage __ARGS((win_T *win));
! void win_enter __ARGS((win_T *wp, int undo_sync));
! win_T *buf_jump_open_win __ARGS((buf_T *buf));
! win_T *buf_jump_open_tab __ARGS((buf_T *buf));
! void win_append __ARGS((win_T *after, win_T *wp));
! void win_remove __ARGS((win_T *wp, tabpage_T *tp));
! int win_alloc_lines __ARGS((win_T *wp));
! void win_free_lsize __ARGS((win_T *wp));
! void shell_new_rows __ARGS((void));
! void shell_new_columns __ARGS((void));
! void win_size_save __ARGS((garray_T *gap));
! void win_size_restore __ARGS((garray_T *gap));
! int win_comp_pos __ARGS((void));
! void win_setheight __ARGS((int height));
! void win_setheight_win __ARGS((int height, win_T *win));
! void win_setwidth __ARGS((int width));
! void win_setwidth_win __ARGS((int width, win_T *wp));
! void win_setminheight __ARGS((void));
! void win_drag_status_line __ARGS((win_T *dragwin, int offset));
! void win_drag_vsep_line __ARGS((win_T *dragwin, int offset));
! void set_fraction __ARGS((win_T *wp));
! void win_new_height __ARGS((win_T *wp, int height));
! void win_new_width __ARGS((win_T *wp, int width));
! void win_comp_scroll __ARGS((win_T *wp));
! void command_height __ARGS((void));
! void last_status __ARGS((int morewin));
! int tabline_height __ARGS((void));
! char_u *grab_file_name __ARGS((long count, linenr_T *file_lnum));
! char_u *file_name_at_cursor __ARGS((int options, long count, linenr_T *file_lnum));
! char_u *file_name_in_line __ARGS((char_u *line, int col, int options, long count, char_u *rel_fname, linenr_T *file_lnum));
! char_u *find_file_name_in_path __ARGS((char_u *ptr, int len, int options, long count, char_u *rel_fname));
! int path_with_url __ARGS((char_u *fname));
! int vim_isAbsName __ARGS((char_u *name));
! int vim_FullName __ARGS((char_u *fname, char_u *buf, int len, int force));
! int min_rows __ARGS((void));
! int only_one_window __ARGS((void));
! void check_lnums __ARGS((int do_curwin));
! void make_snapshot __ARGS((int idx));
! void restore_snapshot __ARGS((int idx, int close_curwin));
! int switch_win __ARGS((win_T **save_curwin, tabpage_T **save_curtab, win_T *win, tabpage_T *tp, int no_display));
! void restore_win __ARGS((win_T *save_curwin, tabpage_T *save_curtab, int no_display));
! void switch_buffer __ARGS((buf_T **save_curbuf, buf_T *buf));
! void restore_buffer __ARGS((buf_T *save_curbuf));
! int win_hasvertsplit __ARGS((void));
! int match_add __ARGS((win_T *wp, char_u *grp, char_u *pat, int prio, int id, list_T *pos_list, char_u *conceal_char));
! int match_delete __ARGS((win_T *wp, int id, int perr));
! void clear_matches __ARGS((win_T *wp));
! matchitem_T *get_match __ARGS((win_T *wp, int id));
! int get_win_number __ARGS((win_T *wp, win_T *first_win));
! int get_tab_number __ARGS((tabpage_T *tp));
  /* vim: set ft=c : */
--- 1,86 ----
  /* window.c */
! void do_window(int nchar, long Prenum, int xchar);
! void get_wincmd_addr_type(char_u *arg, exarg_T *eap);
! int win_split(int size, int flags);
! int win_split_ins(int size, int flags, win_T *new_wp, int dir);
! int win_valid(win_T *win);
! int win_count(void);
! int make_windows(int count, int vertical);
! void win_move_after(win_T *win1, win_T *win2);
! void win_equal(win_T *next_curwin, int current, int dir);
! void close_windows(buf_T *buf, int keep_curwin);
! int one_window(void);
! int win_close(win_T *win, int free_buf);
! void win_close_othertab(win_T *win, int free_buf, tabpage_T *tp);
! void win_free_all(void);
! win_T *winframe_remove(win_T *win, int *dirp, tabpage_T *tp);
! void close_others(int message, int forceit);
! void curwin_init(void);
! void win_init_empty(win_T *wp);
! int win_alloc_first(void);
! void win_alloc_aucmd_win(void);
! void win_init_size(void);
! void free_tabpage(tabpage_T *tp);
! int win_new_tabpage(int after);
! int may_open_tabpage(void);
! int make_tabpages(int maxcount);
! int valid_tabpage(tabpage_T *tpc);
! tabpage_T *find_tabpage(int n);
! int tabpage_index(tabpage_T *ftp);
! void goto_tabpage(int n);
! void goto_tabpage_tp(tabpage_T *tp, int trigger_enter_autocmds, int trigger_leave_autocmds);
! void goto_tabpage_win(tabpage_T *tp, win_T *wp);
! void tabpage_move(int nr);
! void win_goto(win_T *wp);
! win_T *win_find_nr(int winnr);
! tabpage_T *win_find_tabpage(win_T *win);
! void win_enter(win_T *wp, int undo_sync);
! win_T *buf_jump_open_win(buf_T *buf);
! win_T *buf_jump_open_tab(buf_T *buf);
! void win_append(win_T *after, win_T *wp);
! void win_remove(win_T *wp, tabpage_T *tp);
! int win_alloc_lines(win_T *wp);
! void win_free_lsize(win_T *wp);
! void shell_new_rows(void);
! void shell_new_columns(void);
! void win_size_save(garray_T *gap);
! void win_size_restore(garray_T *gap);
! int win_comp_pos(void);
! void win_setheight(int height);
! void win_setheight_win(int height, win_T *win);
! void win_setwidth(int width);
! void win_setwidth_win(int width, win_T *wp);
! void win_setminheight(void);
! void win_drag_status_line(win_T *dragwin, int offset);
! void win_drag_vsep_line(win_T *dragwin, int offset);
! void set_fraction(win_T *wp);
! void win_new_height(win_T *wp, int height);
! void win_new_width(win_T *wp, int width);
! void win_comp_scroll(win_T *wp);
! void command_height(void);
! void last_status(int morewin);
! int tabline_height(void);
! char_u *grab_file_name(long count, linenr_T *file_lnum);
! char_u *file_name_at_cursor(int options, long count, linenr_T *file_lnum);
! char_u *file_name_in_line(char_u *line, int col, int options, long count, char_u *rel_fname, linenr_T *file_lnum);
! char_u *find_file_name_in_path(char_u *ptr, int len, int options, long count, char_u *rel_fname);
! int path_with_url(char_u *fname);
! int vim_isAbsName(char_u *name);
! int vim_FullName(char_u *fname, char_u *buf, int len, int force);
! int min_rows(void);
! int only_one_window(void);
! void check_lnums(int do_curwin);
! void make_snapshot(int idx);
! void restore_snapshot(int idx, int close_curwin);
! int switch_win(win_T **save_curwin, tabpage_T **save_curtab, win_T *win, tabpage_T *tp, int no_display);
! void restore_win(win_T *save_curwin, tabpage_T *save_curtab, int no_display);
! void switch_buffer(buf_T **save_curbuf, buf_T *buf);
! void restore_buffer(buf_T *save_curbuf);
! int win_hasvertsplit(void);
! int match_add(win_T *wp, char_u *grp, char_u *pat, int prio, int id, list_T *pos_list, char_u *conceal_char);
! int match_delete(win_T *wp, int id, int perr);
! void clear_matches(win_T *wp);
! matchitem_T *get_match(win_T *wp, int id);
! int get_win_number(win_T *wp, win_T *first_win);
! int get_tab_number(tabpage_T *tp);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/proto/workshop.pro	2013-08-10 13:37:31.000000000 +0200
--- src/proto/workshop.pro	2016-01-19 13:13:17.438915307 +0100
***************
*** 1,49 ****
  /* workshop.c */
! void workshop_init __ARGS((void));
! void workshop_postinit __ARGS((void));
! void ex_wsverb __ARGS((exarg_T *eap));
! char *workshop_get_editor_name __ARGS((void));
! char *workshop_get_editor_version __ARGS((void));
! void workshop_load_file __ARGS((char *filename, int line, char *frameid));
! void workshop_reload_file __ARGS((char *filename, int line));
! void workshop_show_file __ARGS((char *filename));
! void workshop_goto_line __ARGS((char *filename, int lineno));
! void workshop_front_file __ARGS((char *filename));
! void workshop_save_file __ARGS((char *filename));
! void workshop_save_files __ARGS((void));
! void workshop_quit __ARGS((void));
! void workshop_minimize __ARGS((void));
! void workshop_maximize __ARGS((void));
! void workshop_add_mark_type __ARGS((int idx, char *colorspec, char *sign));
! void workshop_set_mark __ARGS((char *filename, int lineno, int markId, int idx));
! void workshop_change_mark_type __ARGS((char *filename, int markId, int idx));
! void workshop_goto_mark __ARGS((char *filename, int markId, char *message));
! void workshop_delete_mark __ARGS((char *filename, int markId));
! int workshop_get_mark_lineno __ARGS((char *filename, int markId));
! void workshop_moved_marks __ARGS((char *filename));
! int workshop_get_font_height __ARGS((void));
! void workshop_footer_message __ARGS((char *message, int severity));
! void workshop_menu_begin __ARGS((char *label));
! void workshop_submenu_begin __ARGS((char *label));
! void workshop_submenu_end __ARGS((void));
! void workshop_menu_item __ARGS((char *label, char *verb, char *accelerator, char *acceleratorText, char *name, char *filepos, char *sensitive));
! void workshop_menu_end __ARGS((void));
! void workshop_toolbar_begin __ARGS((void));
! void workshop_toolbar_end __ARGS((void));
! void workshop_toolbar_button __ARGS((char *label, char *verb, char *senseVerb, char *filepos, char *help, char *sense, char *file, char *left));
! void workshop_frame_sensitivities __ARGS((VerbSense *vs));
! void workshop_set_option __ARGS((char *option, char *value));
! void workshop_balloon_mode __ARGS((Boolean on));
! void workshop_balloon_delay __ARGS((int delay));
! void workshop_show_balloon_tip __ARGS((char *tip));
! void workshop_hotkeys __ARGS((Boolean on));
! int workshop_get_positions __ARGS((void *clientData, char **filename, int *curLine, int *curCol, int *selStartLine, int *selStartCol, int *selEndLine, int *selEndCol, int *selLength, char **selection));
! char *workshop_test_getcurrentfile __ARGS((void));
! int workshop_test_getcursorrow __ARGS((void));
! int workshop_test_getcursorcol __ARGS((void));
! char *workshop_test_getcursorrowtext __ARGS((void));
! char *workshop_test_getselectedtext __ARGS((void));
! void workshop_save_sensitivity __ARGS((char *filename));
! void workshop_beval_cb __ARGS((BalloonEval *beval, int state));
! void findYourself __ARGS((char *argv0));
  /* vim: set ft=c : */
--- 1,49 ----
  /* workshop.c */
! void workshop_init(void);
! void workshop_postinit(void);
! void ex_wsverb(exarg_T *eap);
! char *workshop_get_editor_name(void);
! char *workshop_get_editor_version(void);
! void workshop_load_file(char *filename, int line, char *frameid);
! void workshop_reload_file(char *filename, int line);
! void workshop_show_file(char *filename);
! void workshop_goto_line(char *filename, int lineno);
! void workshop_front_file(char *filename);
! void workshop_save_file(char *filename);
! void workshop_save_files(void);
! void workshop_quit(void);
! void workshop_minimize(void);
! void workshop_maximize(void);
! void workshop_add_mark_type(int idx, char *colorspec, char *sign);
! void workshop_set_mark(char *filename, int lineno, int markId, int idx);
! void workshop_change_mark_type(char *filename, int markId, int idx);
! void workshop_goto_mark(char *filename, int markId, char *message);
! void workshop_delete_mark(char *filename, int markId);
! int workshop_get_mark_lineno(char *filename, int markId);
! void workshop_moved_marks(char *filename);
! int workshop_get_font_height(void);
! void workshop_footer_message(char *message, int severity);
! void workshop_menu_begin(char *label);
! void workshop_submenu_begin(char *label);
! void workshop_submenu_end(void);
! void workshop_menu_item(char *label, char *verb, char *accelerator, char *acceleratorText, char *name, char *filepos, char *sensitive);
! void workshop_menu_end(void);
! void workshop_toolbar_begin(void);
! void workshop_toolbar_end(void);
! void workshop_toolbar_button(char *label, char *verb, char *senseVerb, char *filepos, char *help, char *sense, char *file, char *left);
! void workshop_frame_sensitivities(VerbSense *vs);
! void workshop_set_option(char *option, char *value);
! void workshop_balloon_mode(Boolean on);
! void workshop_balloon_delay(int delay);
! void workshop_show_balloon_tip(char *tip);
! void workshop_hotkeys(Boolean on);
! int workshop_get_positions(void *clientData, char **filename, int *curLine, int *curCol, int *selStartLine, int *selStartCol, int *selEndLine, int *selEndCol, int *selLength, char **selection);
! char *workshop_test_getcurrentfile(void);
! int workshop_test_getcursorrow(void);
! int workshop_test_getcursorcol(void);
! char *workshop_test_getcursorrowtext(void);
! char *workshop_test_getselectedtext(void);
! void workshop_save_sensitivity(char *filename);
! void workshop_beval_cb(BalloonEval *beval, int state);
! void findYourself(char *argv0);
  /* vim: set ft=c : */
*** ../vim-7.4.1132/src/version.c	2016-01-19 13:07:08.758882600 +0100
--- src/version.c	2016-01-19 13:15:18.413613427 +0100
***************
*** 743,744 ****
--- 743,746 ----
  {   /* Add new patch number below this line */
+ /**/
+     1133,
  /**/

-- 
A consultant is a person who takes your money and annoys your employees while
tirelessly searching for the best way to extend the consulting contract.
				(Scott Adams - The Dilbert principle)

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
