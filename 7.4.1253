To: vim_dev@googlegroups.com
Subject: Patch 7.4.1253
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.4.1253
Problem:    Python test server not displaying second of two commands.
            Solaris doesn't have "pkill --full".
Solution:   Also echo the second command. Use "pkill -f".
Files:      src/testdir/test_channel.py, src/testdir/test_channel.vim


*** ../vim-7.4.1252/src/testdir/test_channel.py	2016-02-03 22:20:23.432974050 +0100
--- src/testdir/test_channel.py	2016-02-03 22:33:08.792902303 +0100
***************
*** 34,65 ****
          thesocket = self.request
          while True:
              try:
!                 data = self.request.recv(4096).decode('utf-8')
              except socket.error:
                  print("=== socket error ===")
                  break
              except IOError:
                  print("=== socket closed ===")
                  break
!             if data == '':
                  print("=== socket closed ===")
                  break
!             print("received: {}".format(data))
  
              # We may receive two messages at once. Take the part up to the
              # matching "]" (recognized by finding "][").
!             while data != '':
!                 splitidx = data.find('][')
                  if splitidx < 0:
!                      todo = data
!                      data = ''
                  else:
!                      todo = data[:splitidx + 1]
!                      data = data[splitidx + 1:]
!                      print("using: {}".format(todo))
  
                  try:
!                     decoded = json.loads(todo)
                  except ValueError:
                      print("json decoding failed")
                      decoded = [-1, '']
--- 34,67 ----
          thesocket = self.request
          while True:
              try:
!                 received = self.request.recv(4096).decode('utf-8')
              except socket.error:
                  print("=== socket error ===")
                  break
              except IOError:
                  print("=== socket closed ===")
                  break
!             if received == '':
                  print("=== socket closed ===")
                  break
!             print("received: {}".format(received))
  
              # We may receive two messages at once. Take the part up to the
              # matching "]" (recognized by finding "][").
!             todo = received
!             while todo != '':
!                 splitidx = todo.find('][')
                  if splitidx < 0:
!                      used = todo
!                      todo = ''
                  else:
!                      used = todo[:splitidx + 1]
!                      todo = todo[splitidx + 1:]
!                 if used != received:
!                     print("using: {}".format(used))
  
                  try:
!                     decoded = json.loads(used)
                  except ValueError:
                      print("json decoding failed")
                      decoded = [-1, '']
*** ../vim-7.4.1252/src/testdir/test_channel.vim	2016-02-03 21:32:39.171071570 +0100
--- src/testdir/test_channel.vim	2016-02-03 22:37:01.522442188 +0100
***************
*** 59,65 ****
    if has('win32')
      call system('taskkill /IM py.exe /T /F /FI "WINDOWTITLE eq test_channel"')
    else
!     call system("pkill --full test_channel.py")
    endif
  endfunc
  
--- 59,65 ----
    if has('win32')
      call system('taskkill /IM py.exe /T /F /FI "WINDOWTITLE eq test_channel"')
    else
!     call system("pkill -f test_channel.py")
    endif
  endfunc
  
*** ../vim-7.4.1252/src/version.c	2016-02-03 22:20:23.432974050 +0100
--- src/version.c	2016-02-03 22:34:54.843784428 +0100
***************
*** 744,745 ****
--- 744,747 ----
  {   /* Add new patch number below this line */
+ /**/
+     1253,
  /**/

-- 
hundred-and-one symptoms of being an internet addict:
125. You begin to wonder how often it REALLY is necessary to get up
     and shower or bathe.

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
